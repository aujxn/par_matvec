<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1302" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1285.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1285.00"> </text><svg id="frames" x="10" width="1180" total_samples="215693071492"><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30,484,546 samples, 0.01%)</title><rect x="0.0517%" y="1221" width="0.0141%" height="15" fill="rgb(227,0,7)" fg:x="111608516" fg:w="30484546"/><text x="0.3017%" y="1231.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (23,144,632 samples, 0.01%)</title><rect x="0.0551%" y="1205" width="0.0107%" height="15" fill="rgb(217,0,24)" fg:x="118948430" fg:w="23144632"/><text x="0.3051%" y="1215.50"></text></g><g><title>[libc.so.6] (41,696,112 samples, 0.02%)</title><rect x="0.0793%" y="1189" width="0.0193%" height="15" fill="rgb(221,193,54)" fg:x="171090679" fg:w="41696112"/><text x="0.3293%" y="1199.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (235,090,286 samples, 0.11%)</title><rect x="0.1332%" y="581" width="0.1090%" height="15" fill="rgb(248,212,6)" fg:x="287355391" fg:w="235090286"/><text x="0.3832%" y="591.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (235,090,286 samples, 0.11%)</title><rect x="0.1332%" y="565" width="0.1090%" height="15" fill="rgb(208,68,35)" fg:x="287355391" fg:w="235090286"/><text x="0.3832%" y="575.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (235,090,286 samples, 0.11%)</title><rect x="0.1332%" y="549" width="0.1090%" height="15" fill="rgb(232,128,0)" fg:x="287355391" fg:w="235090286"/><text x="0.3832%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (229,305,271 samples, 0.11%)</title><rect x="0.2422%" y="581" width="0.1063%" height="15" fill="rgb(207,160,47)" fg:x="522445677" fg:w="229305271"/><text x="0.4922%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (132,839,395 samples, 0.06%)</title><rect x="0.2869%" y="565" width="0.0616%" height="15" fill="rgb(228,23,34)" fg:x="618911553" fg:w="132839395"/><text x="0.5369%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (132,839,395 samples, 0.06%)</title><rect x="0.2869%" y="549" width="0.0616%" height="15" fill="rgb(218,30,26)" fg:x="618911553" fg:w="132839395"/><text x="0.5369%" y="559.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (132,839,395 samples, 0.06%)</title><rect x="0.2869%" y="533" width="0.0616%" height="15" fill="rgb(220,122,19)" fg:x="618911553" fg:w="132839395"/><text x="0.5369%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (132,839,395 samples, 0.06%)</title><rect x="0.2869%" y="517" width="0.0616%" height="15" fill="rgb(250,228,42)" fg:x="618911553" fg:w="132839395"/><text x="0.5369%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (62,249,862 samples, 0.03%)</title><rect x="0.3197%" y="501" width="0.0289%" height="15" fill="rgb(240,193,28)" fg:x="689501086" fg:w="62249862"/><text x="0.5697%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (539,067,402 samples, 0.25%)</title><rect x="0.3554%" y="533" width="0.2499%" height="15" fill="rgb(216,20,37)" fg:x="766498384" fg:w="539067402"/><text x="0.6054%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (539,067,402 samples, 0.25%)</title><rect x="0.3554%" y="517" width="0.2499%" height="15" fill="rgb(206,188,39)" fg:x="766498384" fg:w="539067402"/><text x="0.6054%" y="527.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (51,366,976 samples, 0.02%)</title><rect x="0.5815%" y="501" width="0.0238%" height="15" fill="rgb(217,207,13)" fg:x="1254198810" fg:w="51366976"/><text x="0.8315%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (51,366,976 samples, 0.02%)</title><rect x="0.5815%" y="485" width="0.0238%" height="15" fill="rgb(231,73,38)" fg:x="1254198810" fg:w="51366976"/><text x="0.8315%" y="495.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (5,162,088,789 samples, 2.39%)</title><rect x="0.1217%" y="709" width="2.3933%" height="15" fill="rgb(225,20,46)" fg:x="262431438" fg:w="5162088789"/><text x="0.3717%" y="719.50">ra..</text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (5,162,088,789 samples, 2.39%)</title><rect x="0.1217%" y="693" width="2.3933%" height="15" fill="rgb(210,31,41)" fg:x="262431438" fg:w="5162088789"/><text x="0.3717%" y="703.50">&lt;r..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5,162,088,789 samples, 2.39%)</title><rect x="0.1217%" y="677" width="2.3933%" height="15" fill="rgb(221,200,47)" fg:x="262431438" fg:w="5162088789"/><text x="0.3717%" y="687.50">co..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,162,088,789 samples, 2.39%)</title><rect x="0.1217%" y="661" width="2.3933%" height="15" fill="rgb(226,26,5)" fg:x="262431438" fg:w="5162088789"/><text x="0.3717%" y="671.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (5,162,088,789 samples, 2.39%)</title><rect x="0.1217%" y="645" width="2.3933%" height="15" fill="rgb(249,33,26)" fg:x="262431438" fg:w="5162088789"/><text x="0.3717%" y="655.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5,162,088,789 samples, 2.39%)</title><rect x="0.1217%" y="629" width="2.3933%" height="15" fill="rgb(235,183,28)" fg:x="262431438" fg:w="5162088789"/><text x="0.3717%" y="639.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (5,162,088,789 samples, 2.39%)</title><rect x="0.1217%" y="613" width="2.3933%" height="15" fill="rgb(221,5,38)" fg:x="262431438" fg:w="5162088789"/><text x="0.3717%" y="623.50">co..</text></g><g><title>par_matvec::sparse_dense_impl::simple::reduce_workspaces_rayon::_{{closure}} (5,162,088,789 samples, 2.39%)</title><rect x="0.1217%" y="597" width="2.3933%" height="15" fill="rgb(247,18,42)" fg:x="262431438" fg:w="5162088789"/><text x="0.3717%" y="607.50">pa..</text></g><g><title>faer::row::rowref::&lt;impl faer::row::generic::Row&lt;Inner&gt;&gt;::sum (4,658,021,843 samples, 2.16%)</title><rect x="0.3554%" y="581" width="2.1596%" height="15" fill="rgb(241,131,45)" fg:x="766498384" fg:w="4658021843"/><text x="0.6054%" y="591.50">f..</text></g><g><title>faer::mat::matref::&lt;impl faer::mat::generic::Mat&lt;Inner&gt;&gt;::sum (4,658,021,843 samples, 2.16%)</title><rect x="0.3554%" y="565" width="2.1596%" height="15" fill="rgb(249,31,29)" fg:x="766498384" fg:w="4658021843"/><text x="0.6054%" y="575.50">f..</text></g><g><title>faer::linalg::reductions::sum::sum (4,658,021,843 samples, 2.16%)</title><rect x="0.3554%" y="549" width="2.1596%" height="15" fill="rgb(225,111,53)" fg:x="766498384" fg:w="4658021843"/><text x="0.6054%" y="559.50">f..</text></g><g><title>faer_traits::math_utils::add (4,118,954,441 samples, 1.91%)</title><rect x="0.6053%" y="533" width="1.9096%" height="15" fill="rgb(238,160,17)" fg:x="1305565786" fg:w="4118954441"/><text x="0.8553%" y="543.50">f..</text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (4,118,954,441 samples, 1.91%)</title><rect x="0.6053%" y="517" width="1.9096%" height="15" fill="rgb(214,148,48)" fg:x="1305565786" fg:w="4118954441"/><text x="0.8553%" y="527.50">&lt;..</text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (4,118,954,441 samples, 1.91%)</title><rect x="0.6053%" y="501" width="1.9096%" height="15" fill="rgb(232,36,49)" fg:x="1305565786" fg:w="4118954441"/><text x="0.8553%" y="511.50">&lt;..</text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (4,118,954,441 samples, 1.91%)</title><rect x="0.6053%" y="485" width="1.9096%" height="15" fill="rgb(209,103,24)" fg:x="1305565786" fg:w="4118954441"/><text x="0.8553%" y="495.50">&lt;..</text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (24,040,047 samples, 0.01%)</title><rect x="2.5184%" y="517" width="0.0111%" height="15" fill="rgb(229,88,8)" fg:x="5432091418" fg:w="24040047"/><text x="2.7684%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (70,418,356 samples, 0.03%)</title><rect x="2.5180%" y="581" width="0.0326%" height="15" fill="rgb(213,181,19)" fg:x="5431148022" fg:w="70418356"/><text x="2.7680%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (70,418,356 samples, 0.03%)</title><rect x="2.5180%" y="565" width="0.0326%" height="15" fill="rgb(254,191,54)" fg:x="5431148022" fg:w="70418356"/><text x="2.7680%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (70,418,356 samples, 0.03%)</title><rect x="2.5180%" y="549" width="0.0326%" height="15" fill="rgb(241,83,37)" fg:x="5431148022" fg:w="70418356"/><text x="2.7680%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (70,418,356 samples, 0.03%)</title><rect x="2.5180%" y="533" width="0.0326%" height="15" fill="rgb(233,36,39)" fg:x="5431148022" fg:w="70418356"/><text x="2.7680%" y="543.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (44,632,290 samples, 0.02%)</title><rect x="2.5300%" y="517" width="0.0207%" height="15" fill="rgb(226,3,54)" fg:x="5456934088" fg:w="44632290"/><text x="2.7800%" y="527.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (44,632,290 samples, 0.02%)</title><rect x="2.5300%" y="501" width="0.0207%" height="15" fill="rgb(245,192,40)" fg:x="5456934088" fg:w="44632290"/><text x="2.7800%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (44,632,290 samples, 0.02%)</title><rect x="2.5300%" y="485" width="0.0207%" height="15" fill="rgb(238,167,29)" fg:x="5456934088" fg:w="44632290"/><text x="2.7800%" y="495.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (44,632,290 samples, 0.02%)</title><rect x="2.5300%" y="469" width="0.0207%" height="15" fill="rgb(232,182,51)" fg:x="5456934088" fg:w="44632290"/><text x="2.7800%" y="479.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (40,639,396 samples, 0.02%)</title><rect x="2.5318%" y="453" width="0.0188%" height="15" fill="rgb(231,60,39)" fg:x="5460926982" fg:w="40639396"/><text x="2.7818%" y="463.50"></text></g><g><title>crossbeam_epoch::default::pin (37,091,029 samples, 0.02%)</title><rect x="2.5334%" y="437" width="0.0172%" height="15" fill="rgb(208,69,12)" fg:x="5464475349" fg:w="37091029"/><text x="2.7834%" y="447.50"></text></g><g><title>crossbeam_epoch::default::with_handle (37,091,029 samples, 0.02%)</title><rect x="2.5334%" y="421" width="0.0172%" height="15" fill="rgb(235,93,37)" fg:x="5464475349" fg:w="37091029"/><text x="2.7834%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (37,091,029 samples, 0.02%)</title><rect x="2.5334%" y="405" width="0.0172%" height="15" fill="rgb(213,116,39)" fg:x="5464475349" fg:w="37091029"/><text x="2.7834%" y="415.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (35,917,136 samples, 0.02%)</title><rect x="2.5340%" y="389" width="0.0167%" height="15" fill="rgb(222,207,29)" fg:x="5465649242" fg:w="35917136"/><text x="2.7840%" y="399.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (35,917,136 samples, 0.02%)</title><rect x="2.5340%" y="373" width="0.0167%" height="15" fill="rgb(206,96,30)" fg:x="5465649242" fg:w="35917136"/><text x="2.7840%" y="383.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (35,917,136 samples, 0.02%)</title><rect x="2.5340%" y="357" width="0.0167%" height="15" fill="rgb(218,138,4)" fg:x="5465649242" fg:w="35917136"/><text x="2.7840%" y="367.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (35,917,136 samples, 0.02%)</title><rect x="2.5340%" y="341" width="0.0167%" height="15" fill="rgb(250,191,14)" fg:x="5465649242" fg:w="35917136"/><text x="2.7840%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (76,494,471 samples, 0.04%)</title><rect x="2.5161%" y="629" width="0.0355%" height="15" fill="rgb(239,60,40)" fg:x="5426952849" fg:w="76494471"/><text x="2.7661%" y="639.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work::_{{closure}} (76,494,471 samples, 0.04%)</title><rect x="2.5161%" y="613" width="0.0355%" height="15" fill="rgb(206,27,48)" fg:x="5426952849" fg:w="76494471"/><text x="2.7661%" y="623.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (72,299,298 samples, 0.03%)</title><rect x="2.5180%" y="597" width="0.0335%" height="15" fill="rgb(225,35,8)" fg:x="5431148022" fg:w="72299298"/><text x="2.7680%" y="607.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (80,131,746 samples, 0.04%)</title><rect x="2.5161%" y="645" width="0.0372%" height="15" fill="rgb(250,213,24)" fg:x="5426952849" fg:w="80131746"/><text x="2.7661%" y="655.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (96,396,020 samples, 0.04%)</title><rect x="2.5156%" y="677" width="0.0447%" height="15" fill="rgb(247,123,22)" fg:x="5426017338" fg:w="96396020"/><text x="2.7656%" y="687.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (96,396,020 samples, 0.04%)</title><rect x="2.5156%" y="661" width="0.0447%" height="15" fill="rgb(231,138,38)" fg:x="5426017338" fg:w="96396020"/><text x="2.7656%" y="671.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (102,857,397 samples, 0.05%)</title><rect x="2.5714%" y="421" width="0.0477%" height="15" fill="rgb(231,145,46)" fg:x="5546402500" fg:w="102857397"/><text x="2.8214%" y="431.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (102,857,397 samples, 0.05%)</title><rect x="2.5714%" y="405" width="0.0477%" height="15" fill="rgb(251,118,11)" fg:x="5546402500" fg:w="102857397"/><text x="2.8214%" y="415.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (102,857,397 samples, 0.05%)</title><rect x="2.5714%" y="389" width="0.0477%" height="15" fill="rgb(217,147,25)" fg:x="5546402500" fg:w="102857397"/><text x="2.8214%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (130,610,774 samples, 0.06%)</title><rect x="2.6191%" y="421" width="0.0606%" height="15" fill="rgb(247,81,37)" fg:x="5649259897" fg:w="130610774"/><text x="2.8691%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (67,208,631 samples, 0.03%)</title><rect x="2.6485%" y="405" width="0.0312%" height="15" fill="rgb(209,12,38)" fg:x="5712662040" fg:w="67208631"/><text x="2.8985%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (67,208,631 samples, 0.03%)</title><rect x="2.6485%" y="389" width="0.0312%" height="15" fill="rgb(227,1,9)" fg:x="5712662040" fg:w="67208631"/><text x="2.8985%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (67,208,631 samples, 0.03%)</title><rect x="2.6485%" y="373" width="0.0312%" height="15" fill="rgb(248,47,43)" fg:x="5712662040" fg:w="67208631"/><text x="2.8985%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (67,208,631 samples, 0.03%)</title><rect x="2.6485%" y="357" width="0.0312%" height="15" fill="rgb(221,10,30)" fg:x="5712662040" fg:w="67208631"/><text x="2.8985%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (42,711,572 samples, 0.02%)</title><rect x="2.6599%" y="341" width="0.0198%" height="15" fill="rgb(210,229,1)" fg:x="5737159099" fg:w="42711572"/><text x="2.9099%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (261,945,573 samples, 0.12%)</title><rect x="2.6844%" y="373" width="0.1214%" height="15" fill="rgb(222,148,37)" fg:x="5789992780" fg:w="261945573"/><text x="2.9344%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (261,945,573 samples, 0.12%)</title><rect x="2.6844%" y="357" width="0.1214%" height="15" fill="rgb(234,67,33)" fg:x="5789992780" fg:w="261945573"/><text x="2.9344%" y="367.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (30,531,753 samples, 0.01%)</title><rect x="2.7917%" y="341" width="0.0142%" height="15" fill="rgb(247,98,35)" fg:x="6021406600" fg:w="30531753"/><text x="3.0417%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (30,531,753 samples, 0.01%)</title><rect x="2.7917%" y="325" width="0.0142%" height="15" fill="rgb(247,138,52)" fg:x="6021406600" fg:w="30531753"/><text x="3.0417%" y="335.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (2,634,271,263 samples, 1.22%)</title><rect x="2.5603%" y="549" width="1.2213%" height="15" fill="rgb(213,79,30)" fg:x="5522413358" fg:w="2634271263"/><text x="2.8103%" y="559.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (2,631,083,270 samples, 1.22%)</title><rect x="2.5618%" y="533" width="1.2198%" height="15" fill="rgb(246,177,23)" fg:x="5525601351" fg:w="2631083270"/><text x="2.8118%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,631,083,270 samples, 1.22%)</title><rect x="2.5618%" y="517" width="1.2198%" height="15" fill="rgb(230,62,27)" fg:x="5525601351" fg:w="2631083270"/><text x="2.8118%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,631,083,270 samples, 1.22%)</title><rect x="2.5618%" y="501" width="1.2198%" height="15" fill="rgb(216,154,8)" fg:x="5525601351" fg:w="2631083270"/><text x="2.8118%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (2,631,083,270 samples, 1.22%)</title><rect x="2.5618%" y="485" width="1.2198%" height="15" fill="rgb(244,35,45)" fg:x="5525601351" fg:w="2631083270"/><text x="2.8118%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2,631,083,270 samples, 1.22%)</title><rect x="2.5618%" y="469" width="1.2198%" height="15" fill="rgb(251,115,12)" fg:x="5525601351" fg:w="2631083270"/><text x="2.8118%" y="479.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (2,631,083,270 samples, 1.22%)</title><rect x="2.5618%" y="453" width="1.2198%" height="15" fill="rgb(240,54,50)" fg:x="5525601351" fg:w="2631083270"/><text x="2.8118%" y="463.50"></text></g><g><title>par_matvec::sparse_dense_impl::simple::reduce_workspaces_rayon::_{{closure}} (2,631,083,270 samples, 1.22%)</title><rect x="2.5618%" y="437" width="1.2198%" height="15" fill="rgb(233,84,52)" fg:x="5525601351" fg:w="2631083270"/><text x="2.8118%" y="447.50"></text></g><g><title>faer::row::rowref::&lt;impl faer::row::generic::Row&lt;Inner&gt;&gt;::sum (2,366,691,841 samples, 1.10%)</title><rect x="2.6844%" y="421" width="1.0972%" height="15" fill="rgb(207,117,47)" fg:x="5789992780" fg:w="2366691841"/><text x="2.9344%" y="431.50"></text></g><g><title>faer::mat::matref::&lt;impl faer::mat::generic::Mat&lt;Inner&gt;&gt;::sum (2,366,691,841 samples, 1.10%)</title><rect x="2.6844%" y="405" width="1.0972%" height="15" fill="rgb(249,43,39)" fg:x="5789992780" fg:w="2366691841"/><text x="2.9344%" y="415.50"></text></g><g><title>faer::linalg::reductions::sum::sum (2,366,691,841 samples, 1.10%)</title><rect x="2.6844%" y="389" width="1.0972%" height="15" fill="rgb(209,38,44)" fg:x="5789992780" fg:w="2366691841"/><text x="2.9344%" y="399.50"></text></g><g><title>faer_traits::math_utils::add (2,104,746,268 samples, 0.98%)</title><rect x="2.8058%" y="373" width="0.9758%" height="15" fill="rgb(236,212,23)" fg:x="6051938353" fg:w="2104746268"/><text x="3.0558%" y="383.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (2,104,746,268 samples, 0.98%)</title><rect x="2.8058%" y="357" width="0.9758%" height="15" fill="rgb(242,79,21)" fg:x="6051938353" fg:w="2104746268"/><text x="3.0558%" y="367.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (2,104,746,268 samples, 0.98%)</title><rect x="2.8058%" y="341" width="0.9758%" height="15" fill="rgb(211,96,35)" fg:x="6051938353" fg:w="2104746268"/><text x="3.0558%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (2,104,746,268 samples, 0.98%)</title><rect x="2.8058%" y="325" width="0.9758%" height="15" fill="rgb(253,215,40)" fg:x="6051938353" fg:w="2104746268"/><text x="3.0558%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (48,890,558 samples, 0.02%)</title><rect x="3.7916%" y="453" width="0.0227%" height="15" fill="rgb(211,81,21)" fg:x="8178169286" fg:w="48890558"/><text x="4.0416%" y="463.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work::_{{closure}} (48,890,558 samples, 0.02%)</title><rect x="3.7916%" y="437" width="0.0227%" height="15" fill="rgb(208,190,38)" fg:x="8178169286" fg:w="48890558"/><text x="4.0416%" y="447.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (41,616,692 samples, 0.02%)</title><rect x="3.7949%" y="421" width="0.0193%" height="15" fill="rgb(235,213,38)" fg:x="8185443152" fg:w="41616692"/><text x="4.0449%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (41,616,692 samples, 0.02%)</title><rect x="3.7949%" y="405" width="0.0193%" height="15" fill="rgb(237,122,38)" fg:x="8185443152" fg:w="41616692"/><text x="4.0449%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (41,616,692 samples, 0.02%)</title><rect x="3.7949%" y="389" width="0.0193%" height="15" fill="rgb(244,218,35)" fg:x="8185443152" fg:w="41616692"/><text x="4.0449%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (41,616,692 samples, 0.02%)</title><rect x="3.7949%" y="373" width="0.0193%" height="15" fill="rgb(240,68,47)" fg:x="8185443152" fg:w="41616692"/><text x="4.0449%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (41,616,692 samples, 0.02%)</title><rect x="3.7949%" y="357" width="0.0193%" height="15" fill="rgb(210,16,53)" fg:x="8185443152" fg:w="41616692"/><text x="4.0449%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (31,512,697 samples, 0.01%)</title><rect x="3.7996%" y="341" width="0.0146%" height="15" fill="rgb(235,124,12)" fg:x="8195547147" fg:w="31512697"/><text x="4.0496%" y="351.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (31,512,697 samples, 0.01%)</title><rect x="3.7996%" y="325" width="0.0146%" height="15" fill="rgb(224,169,11)" fg:x="8195547147" fg:w="31512697"/><text x="4.0496%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (31,512,697 samples, 0.01%)</title><rect x="3.7996%" y="309" width="0.0146%" height="15" fill="rgb(250,166,2)" fg:x="8195547147" fg:w="31512697"/><text x="4.0496%" y="319.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (31,512,697 samples, 0.01%)</title><rect x="3.7996%" y="293" width="0.0146%" height="15" fill="rgb(242,216,29)" fg:x="8195547147" fg:w="31512697"/><text x="4.0496%" y="303.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (31,512,697 samples, 0.01%)</title><rect x="3.7996%" y="277" width="0.0146%" height="15" fill="rgb(230,116,27)" fg:x="8195547147" fg:w="31512697"/><text x="4.0496%" y="287.50"></text></g><g><title>crossbeam_epoch::default::pin (29,639,003 samples, 0.01%)</title><rect x="3.8005%" y="261" width="0.0137%" height="15" fill="rgb(228,99,48)" fg:x="8197420841" fg:w="29639003"/><text x="4.0505%" y="271.50"></text></g><g><title>crossbeam_epoch::default::with_handle (29,639,003 samples, 0.01%)</title><rect x="3.8005%" y="245" width="0.0137%" height="15" fill="rgb(253,11,6)" fg:x="8197420841" fg:w="29639003"/><text x="4.0505%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (29,639,003 samples, 0.01%)</title><rect x="3.8005%" y="229" width="0.0137%" height="15" fill="rgb(247,143,39)" fg:x="8197420841" fg:w="29639003"/><text x="4.0505%" y="239.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (25,509,382 samples, 0.01%)</title><rect x="3.8024%" y="213" width="0.0118%" height="15" fill="rgb(236,97,10)" fg:x="8201550462" fg:w="25509382"/><text x="4.0524%" y="223.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (25,509,382 samples, 0.01%)</title><rect x="3.8024%" y="197" width="0.0118%" height="15" fill="rgb(233,208,19)" fg:x="8201550462" fg:w="25509382"/><text x="4.0524%" y="207.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (25,509,382 samples, 0.01%)</title><rect x="3.8024%" y="181" width="0.0118%" height="15" fill="rgb(216,164,2)" fg:x="8201550462" fg:w="25509382"/><text x="4.0524%" y="191.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (25,509,382 samples, 0.01%)</title><rect x="3.8024%" y="165" width="0.0118%" height="15" fill="rgb(220,129,5)" fg:x="8201550462" fg:w="25509382"/><text x="4.0524%" y="175.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (52,150,515 samples, 0.02%)</title><rect x="3.7916%" y="469" width="0.0242%" height="15" fill="rgb(242,17,10)" fg:x="8178169286" fg:w="52150515"/><text x="4.0416%" y="479.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (54,066,723 samples, 0.03%)</title><rect x="3.7916%" y="501" width="0.0251%" height="15" fill="rgb(242,107,0)" fg:x="8178169286" fg:w="54066723"/><text x="4.0416%" y="511.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (54,066,723 samples, 0.03%)</title><rect x="3.7916%" y="485" width="0.0251%" height="15" fill="rgb(251,28,31)" fg:x="8178169286" fg:w="54066723"/><text x="4.0416%" y="495.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (34,041,959 samples, 0.02%)</title><rect x="3.8221%" y="245" width="0.0158%" height="15" fill="rgb(233,223,10)" fg:x="8244070767" fg:w="34041959"/><text x="4.0721%" y="255.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (34,041,959 samples, 0.02%)</title><rect x="3.8221%" y="229" width="0.0158%" height="15" fill="rgb(215,21,27)" fg:x="8244070767" fg:w="34041959"/><text x="4.0721%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (34,041,959 samples, 0.02%)</title><rect x="3.8221%" y="213" width="0.0158%" height="15" fill="rgb(232,23,21)" fg:x="8244070767" fg:w="34041959"/><text x="4.0721%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (78,240,122 samples, 0.04%)</title><rect x="3.8379%" y="245" width="0.0363%" height="15" fill="rgb(244,5,23)" fg:x="8278112726" fg:w="78240122"/><text x="4.0879%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52,700,673 samples, 0.02%)</title><rect x="3.8498%" y="229" width="0.0244%" height="15" fill="rgb(226,81,46)" fg:x="8303652175" fg:w="52700673"/><text x="4.0998%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52,700,673 samples, 0.02%)</title><rect x="3.8498%" y="213" width="0.0244%" height="15" fill="rgb(247,70,30)" fg:x="8303652175" fg:w="52700673"/><text x="4.0998%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (52,700,673 samples, 0.02%)</title><rect x="3.8498%" y="197" width="0.0244%" height="15" fill="rgb(212,68,19)" fg:x="8303652175" fg:w="52700673"/><text x="4.0998%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (52,700,673 samples, 0.02%)</title><rect x="3.8498%" y="181" width="0.0244%" height="15" fill="rgb(240,187,13)" fg:x="8303652175" fg:w="52700673"/><text x="4.0998%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (25,912,737 samples, 0.01%)</title><rect x="3.8622%" y="165" width="0.0120%" height="15" fill="rgb(223,113,26)" fg:x="8330440111" fg:w="25912737"/><text x="4.1122%" y="175.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (138,732,534 samples, 0.06%)</title><rect x="3.8756%" y="197" width="0.0643%" height="15" fill="rgb(206,192,2)" fg:x="8359399728" fg:w="138732534"/><text x="4.1256%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (138,732,534 samples, 0.06%)</title><rect x="3.8756%" y="181" width="0.0643%" height="15" fill="rgb(241,108,4)" fg:x="8359399728" fg:w="138732534"/><text x="4.1256%" y="191.50"></text></g><g><title>rayon_core::join::join_context::call_b::_{{closure}} (9,187,447,115 samples, 4.26%)</title><rect x="0.1215%" y="757" width="4.2595%" height="15" fill="rgb(247,173,49)" fg:x="261984731" fg:w="9187447115"/><text x="0.3715%" y="767.50">rayon..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (9,187,447,115 samples, 4.26%)</title><rect x="0.1215%" y="741" width="4.2595%" height="15" fill="rgb(224,114,35)" fg:x="261984731" fg:w="9187447115"/><text x="0.3715%" y="751.50">rayon..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9,187,000,408 samples, 4.26%)</title><rect x="0.1217%" y="725" width="4.2593%" height="15" fill="rgb(245,159,27)" fg:x="262431438" fg:w="9187000408"/><text x="0.3717%" y="735.50">rayon..</text></g><g><title>rayon_core::join::join_context (4,024,911,619 samples, 1.87%)</title><rect x="2.5149%" y="709" width="1.8660%" height="15" fill="rgb(245,172,44)" fg:x="5424520227" fg:w="4024911619"/><text x="2.7649%" y="719.50">r..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (4,024,911,619 samples, 1.87%)</title><rect x="2.5149%" y="693" width="1.8660%" height="15" fill="rgb(236,23,11)" fg:x="5424520227" fg:w="4024911619"/><text x="2.7649%" y="703.50">r..</text></g><g><title>rayon_core::unwind::halt_unwinding (3,927,018,488 samples, 1.82%)</title><rect x="2.5603%" y="677" width="1.8207%" height="15" fill="rgb(205,117,38)" fg:x="5522413358" fg:w="3927018488"/><text x="2.8103%" y="687.50">r..</text></g><g><title>std::panic::catch_unwind (3,927,018,488 samples, 1.82%)</title><rect x="2.5603%" y="661" width="1.8207%" height="15" fill="rgb(237,72,25)" fg:x="5522413358" fg:w="3927018488"/><text x="2.8103%" y="671.50">s..</text></g><g><title>std::panicking::try (3,927,018,488 samples, 1.82%)</title><rect x="2.5603%" y="645" width="1.8207%" height="15" fill="rgb(244,70,9)" fg:x="5522413358" fg:w="3927018488"/><text x="2.8103%" y="655.50">s..</text></g><g><title>std::panicking::try::do_call (3,927,018,488 samples, 1.82%)</title><rect x="2.5603%" y="629" width="1.8207%" height="15" fill="rgb(217,125,39)" fg:x="5522413358" fg:w="3927018488"/><text x="2.8103%" y="639.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,927,018,488 samples, 1.82%)</title><rect x="2.5603%" y="613" width="1.8207%" height="15" fill="rgb(235,36,10)" fg:x="5522413358" fg:w="3927018488"/><text x="2.8103%" y="623.50">&lt;..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (3,927,018,488 samples, 1.82%)</title><rect x="2.5603%" y="597" width="1.8207%" height="15" fill="rgb(251,123,47)" fg:x="5522413358" fg:w="3927018488"/><text x="2.8103%" y="607.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (3,927,018,488 samples, 1.82%)</title><rect x="2.5603%" y="581" width="1.8207%" height="15" fill="rgb(221,13,13)" fg:x="5522413358" fg:w="3927018488"/><text x="2.8103%" y="591.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (3,927,018,488 samples, 1.82%)</title><rect x="2.5603%" y="565" width="1.8207%" height="15" fill="rgb(238,131,9)" fg:x="5522413358" fg:w="3927018488"/><text x="2.8103%" y="575.50">r..</text></g><g><title>rayon_core::join::join_context (1,292,747,225 samples, 0.60%)</title><rect x="3.7816%" y="549" width="0.5993%" height="15" fill="rgb(211,50,8)" fg:x="8156684621" fg:w="1292747225"/><text x="4.0316%" y="559.50"></text></g><g><title>rayon_core::registry::in_worker (1,292,747,225 samples, 0.60%)</title><rect x="3.7816%" y="533" width="0.5993%" height="15" fill="rgb(245,182,24)" fg:x="8156684621" fg:w="1292747225"/><text x="4.0316%" y="543.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1,292,747,225 samples, 0.60%)</title><rect x="3.7816%" y="517" width="0.5993%" height="15" fill="rgb(242,14,37)" fg:x="8156684621" fg:w="1292747225"/><text x="4.0316%" y="527.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="501" width="0.5643%" height="15" fill="rgb(246,228,12)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="511.50"></text></g><g><title>std::panic::catch_unwind (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="485" width="0.5643%" height="15" fill="rgb(213,55,15)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="495.50"></text></g><g><title>std::panicking::try (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="469" width="0.5643%" height="15" fill="rgb(209,9,3)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="479.50"></text></g><g><title>std::panicking::try::do_call (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="453" width="0.5643%" height="15" fill="rgb(230,59,30)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="463.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="437" width="0.5643%" height="15" fill="rgb(209,121,21)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="447.50"></text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="421" width="0.5643%" height="15" fill="rgb(220,109,13)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="431.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="405" width="0.5643%" height="15" fill="rgb(232,18,1)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="415.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="389" width="0.5643%" height="15" fill="rgb(215,41,42)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="399.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="373" width="0.5643%" height="15" fill="rgb(224,123,36)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="383.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="357" width="0.5643%" height="15" fill="rgb(240,125,3)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="341" width="0.5643%" height="15" fill="rgb(205,98,50)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="325" width="0.5643%" height="15" fill="rgb(205,185,37)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="309" width="0.5643%" height="15" fill="rgb(238,207,15)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="293" width="0.5643%" height="15" fill="rgb(213,199,42)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="277" width="0.5643%" height="15" fill="rgb(235,201,11)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="287.50"></text></g><g><title>par_matvec::sparse_dense_impl::simple::reduce_workspaces_rayon::_{{closure}} (1,217,195,837 samples, 0.56%)</title><rect x="3.8166%" y="261" width="0.5643%" height="15" fill="rgb(207,46,11)" fg:x="8232236009" fg:w="1217195837"/><text x="4.0666%" y="271.50"></text></g><g><title>faer::row::rowref::&lt;impl faer::row::generic::Row&lt;Inner&gt;&gt;::sum (1,090,032,118 samples, 0.51%)</title><rect x="3.8756%" y="245" width="0.5054%" height="15" fill="rgb(241,35,35)" fg:x="8359399728" fg:w="1090032118"/><text x="4.1256%" y="255.50"></text></g><g><title>faer::mat::matref::&lt;impl faer::mat::generic::Mat&lt;Inner&gt;&gt;::sum (1,090,032,118 samples, 0.51%)</title><rect x="3.8756%" y="229" width="0.5054%" height="15" fill="rgb(243,32,47)" fg:x="8359399728" fg:w="1090032118"/><text x="4.1256%" y="239.50"></text></g><g><title>faer::linalg::reductions::sum::sum (1,090,032,118 samples, 0.51%)</title><rect x="3.8756%" y="213" width="0.5054%" height="15" fill="rgb(247,202,23)" fg:x="8359399728" fg:w="1090032118"/><text x="4.1256%" y="223.50"></text></g><g><title>faer_traits::math_utils::add (951,299,584 samples, 0.44%)</title><rect x="3.9399%" y="197" width="0.4410%" height="15" fill="rgb(219,102,11)" fg:x="8498132262" fg:w="951299584"/><text x="4.1899%" y="207.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (951,299,584 samples, 0.44%)</title><rect x="3.9399%" y="181" width="0.4410%" height="15" fill="rgb(243,110,44)" fg:x="8498132262" fg:w="951299584"/><text x="4.1899%" y="191.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (951,299,584 samples, 0.44%)</title><rect x="3.9399%" y="165" width="0.4410%" height="15" fill="rgb(222,74,54)" fg:x="8498132262" fg:w="951299584"/><text x="4.1899%" y="175.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (951,299,584 samples, 0.44%)</title><rect x="3.9399%" y="149" width="0.4410%" height="15" fill="rgb(216,99,12)" fg:x="8498132262" fg:w="951299584"/><text x="4.1899%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (26,795,863 samples, 0.01%)</title><rect x="4.3839%" y="629" width="0.0124%" height="15" fill="rgb(226,22,26)" fg:x="9455765038" fg:w="26795863"/><text x="4.6339%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26,795,863 samples, 0.01%)</title><rect x="4.3839%" y="613" width="0.0124%" height="15" fill="rgb(217,163,10)" fg:x="9455765038" fg:w="26795863"/><text x="4.6339%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26,795,863 samples, 0.01%)</title><rect x="4.3839%" y="597" width="0.0124%" height="15" fill="rgb(213,25,53)" fg:x="9455765038" fg:w="26795863"/><text x="4.6339%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (26,795,863 samples, 0.01%)</title><rect x="4.3839%" y="581" width="0.0124%" height="15" fill="rgb(252,105,26)" fg:x="9455765038" fg:w="26795863"/><text x="4.6339%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (27,727,775 samples, 0.01%)</title><rect x="4.3839%" y="677" width="0.0129%" height="15" fill="rgb(220,39,43)" fg:x="9455765038" fg:w="27727775"/><text x="4.6339%" y="687.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work::_{{closure}} (27,727,775 samples, 0.01%)</title><rect x="4.3839%" y="661" width="0.0129%" height="15" fill="rgb(229,68,48)" fg:x="9455765038" fg:w="27727775"/><text x="4.6339%" y="671.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (27,727,775 samples, 0.01%)</title><rect x="4.3839%" y="645" width="0.0129%" height="15" fill="rgb(252,8,32)" fg:x="9455765038" fg:w="27727775"/><text x="4.6339%" y="655.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (30,649,370 samples, 0.01%)</title><rect x="4.3839%" y="693" width="0.0142%" height="15" fill="rgb(223,20,43)" fg:x="9455765038" fg:w="30649370"/><text x="4.6339%" y="703.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (34,194,670 samples, 0.02%)</title><rect x="4.3839%" y="725" width="0.0159%" height="15" fill="rgb(229,81,49)" fg:x="9455765038" fg:w="34194670"/><text x="4.6339%" y="735.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (34,194,670 samples, 0.02%)</title><rect x="4.3839%" y="709" width="0.0159%" height="15" fill="rgb(236,28,36)" fg:x="9455765038" fg:w="34194670"/><text x="4.6339%" y="719.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (22,419,007 samples, 0.01%)</title><rect x="4.4188%" y="357" width="0.0104%" height="15" fill="rgb(249,185,26)" fg:x="9530983779" fg:w="22419007"/><text x="4.6688%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (22,419,007 samples, 0.01%)</title><rect x="4.4188%" y="341" width="0.0104%" height="15" fill="rgb(249,174,33)" fg:x="9530983779" fg:w="22419007"/><text x="4.6688%" y="351.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work::_{{closure}} (22,419,007 samples, 0.01%)</title><rect x="4.4188%" y="325" width="0.0104%" height="15" fill="rgb(233,201,37)" fg:x="9530983779" fg:w="22419007"/><text x="4.6688%" y="335.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (21,939,231 samples, 0.01%)</title><rect x="4.4190%" y="309" width="0.0102%" height="15" fill="rgb(221,78,26)" fg:x="9531463555" fg:w="21939231"/><text x="4.6690%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (21,939,231 samples, 0.01%)</title><rect x="4.4190%" y="293" width="0.0102%" height="15" fill="rgb(250,127,30)" fg:x="9531463555" fg:w="21939231"/><text x="4.6690%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21,939,231 samples, 0.01%)</title><rect x="4.4190%" y="277" width="0.0102%" height="15" fill="rgb(230,49,44)" fg:x="9531463555" fg:w="21939231"/><text x="4.6690%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21,939,231 samples, 0.01%)</title><rect x="4.4190%" y="261" width="0.0102%" height="15" fill="rgb(229,67,23)" fg:x="9531463555" fg:w="21939231"/><text x="4.6690%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (21,939,231 samples, 0.01%)</title><rect x="4.4190%" y="245" width="0.0102%" height="15" fill="rgb(249,83,47)" fg:x="9531463555" fg:w="21939231"/><text x="4.6690%" y="255.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (29,154,808 samples, 0.01%)</title><rect x="4.4176%" y="389" width="0.0135%" height="15" fill="rgb(215,43,3)" fg:x="9528414352" fg:w="29154808"/><text x="4.6676%" y="399.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (29,154,808 samples, 0.01%)</title><rect x="4.4176%" y="373" width="0.0135%" height="15" fill="rgb(238,154,13)" fg:x="9528414352" fg:w="29154808"/><text x="4.6676%" y="383.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (43,786,130 samples, 0.02%)</title><rect x="4.4351%" y="133" width="0.0203%" height="15" fill="rgb(219,56,2)" fg:x="9566229657" fg:w="43786130"/><text x="4.6851%" y="143.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (43,786,130 samples, 0.02%)</title><rect x="4.4351%" y="117" width="0.0203%" height="15" fill="rgb(233,0,4)" fg:x="9566229657" fg:w="43786130"/><text x="4.6851%" y="127.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (43,786,130 samples, 0.02%)</title><rect x="4.4351%" y="101" width="0.0203%" height="15" fill="rgb(235,30,7)" fg:x="9566229657" fg:w="43786130"/><text x="4.6851%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (64,143,309 samples, 0.03%)</title><rect x="4.4554%" y="133" width="0.0297%" height="15" fill="rgb(250,79,13)" fg:x="9610015787" fg:w="64143309"/><text x="4.7054%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40,584,921 samples, 0.02%)</title><rect x="4.4663%" y="117" width="0.0188%" height="15" fill="rgb(211,146,34)" fg:x="9633574175" fg:w="40584921"/><text x="4.7163%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40,584,921 samples, 0.02%)</title><rect x="4.4663%" y="101" width="0.0188%" height="15" fill="rgb(228,22,38)" fg:x="9633574175" fg:w="40584921"/><text x="4.7163%" y="111.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (40,584,921 samples, 0.02%)</title><rect x="4.4663%" y="85" width="0.0188%" height="15" fill="rgb(235,168,5)" fg:x="9633574175" fg:w="40584921"/><text x="4.7163%" y="95.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (40,584,921 samples, 0.02%)</title><rect x="4.4663%" y="69" width="0.0188%" height="15" fill="rgb(221,155,16)" fg:x="9633574175" fg:w="40584921"/><text x="4.7163%" y="79.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (30,019,935 samples, 0.01%)</title><rect x="4.4712%" y="53" width="0.0139%" height="15" fill="rgb(215,215,53)" fg:x="9644139161" fg:w="30019935"/><text x="4.7212%" y="63.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (125,058,999 samples, 0.06%)</title><rect x="4.4852%" y="85" width="0.0580%" height="15" fill="rgb(223,4,10)" fg:x="9674159096" fg:w="125058999"/><text x="4.7352%" y="95.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (125,058,999 samples, 0.06%)</title><rect x="4.4852%" y="69" width="0.0580%" height="15" fill="rgb(234,103,6)" fg:x="9674159096" fg:w="125058999"/><text x="4.7352%" y="79.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (10,552,624,038 samples, 4.89%)</title><rect x="0.1190%" y="917" width="4.8924%" height="15" fill="rgb(227,97,0)" fg:x="256620694" fg:w="10552624038"/><text x="0.3690%" y="927.50">rayon_..</text></g><g><title>rayon_core::job::JobRef::execute (10,552,624,038 samples, 4.89%)</title><rect x="0.1190%" y="901" width="4.8924%" height="15" fill="rgb(234,150,53)" fg:x="256620694" fg:w="10552624038"/><text x="0.3690%" y="911.50">rayon_..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (10,552,624,038 samples, 4.89%)</title><rect x="0.1190%" y="885" width="4.8924%" height="15" fill="rgb(228,201,54)" fg:x="256620694" fg:w="10552624038"/><text x="0.3690%" y="895.50">&lt;rayon..</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call (10,547,260,001 samples, 4.89%)</title><rect x="0.1215%" y="869" width="4.8899%" height="15" fill="rgb(222,22,37)" fg:x="261984731" fg:w="10547260001"/><text x="0.3715%" y="879.50">rayon_..</text></g><g><title>rayon_core::unwind::halt_unwinding (10,547,260,001 samples, 4.89%)</title><rect x="0.1215%" y="853" width="4.8899%" height="15" fill="rgb(237,53,32)" fg:x="261984731" fg:w="10547260001"/><text x="0.3715%" y="863.50">rayon_..</text></g><g><title>std::panic::catch_unwind (10,547,260,001 samples, 4.89%)</title><rect x="0.1215%" y="837" width="4.8899%" height="15" fill="rgb(233,25,53)" fg:x="261984731" fg:w="10547260001"/><text x="0.3715%" y="847.50">std::p..</text></g><g><title>std::panicking::try (10,547,260,001 samples, 4.89%)</title><rect x="0.1215%" y="821" width="4.8899%" height="15" fill="rgb(210,40,34)" fg:x="261984731" fg:w="10547260001"/><text x="0.3715%" y="831.50">std::p..</text></g><g><title>std::panicking::try::do_call (10,547,260,001 samples, 4.89%)</title><rect x="0.1215%" y="805" width="4.8899%" height="15" fill="rgb(241,220,44)" fg:x="261984731" fg:w="10547260001"/><text x="0.3715%" y="815.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (10,547,260,001 samples, 4.89%)</title><rect x="0.1215%" y="789" width="4.8899%" height="15" fill="rgb(235,28,35)" fg:x="261984731" fg:w="10547260001"/><text x="0.3715%" y="799.50">&lt;core:..</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::_{{closure}} (10,547,260,001 samples, 4.89%)</title><rect x="0.1215%" y="773" width="4.8899%" height="15" fill="rgb(210,56,17)" fg:x="261984731" fg:w="10547260001"/><text x="0.3715%" y="783.50">rayon_..</text></g><g><title>rayon_core::registry::Registry::in_worker_cold::_{{closure}}::_{{closure}} (1,359,812,886 samples, 0.63%)</title><rect x="4.3810%" y="757" width="0.6304%" height="15" fill="rgb(224,130,29)" fg:x="9449431846" fg:w="1359812886"/><text x="4.6310%" y="767.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1,359,812,886 samples, 0.63%)</title><rect x="4.3810%" y="741" width="0.6304%" height="15" fill="rgb(235,212,8)" fg:x="9449431846" fg:w="1359812886"/><text x="4.6310%" y="751.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (1,319,285,024 samples, 0.61%)</title><rect x="4.3998%" y="725" width="0.6116%" height="15" fill="rgb(223,33,50)" fg:x="9489959708" fg:w="1319285024"/><text x="4.6498%" y="735.50"></text></g><g><title>std::panic::catch_unwind (1,319,285,024 samples, 0.61%)</title><rect x="4.3998%" y="709" width="0.6116%" height="15" fill="rgb(219,149,13)" fg:x="9489959708" fg:w="1319285024"/><text x="4.6498%" y="719.50"></text></g><g><title>std::panicking::try (1,319,285,024 samples, 0.61%)</title><rect x="4.3998%" y="693" width="0.6116%" height="15" fill="rgb(250,156,29)" fg:x="9489959708" fg:w="1319285024"/><text x="4.6498%" y="703.50"></text></g><g><title>std::panicking::try::do_call (1,319,285,024 samples, 0.61%)</title><rect x="4.3998%" y="677" width="0.6116%" height="15" fill="rgb(216,193,19)" fg:x="9489959708" fg:w="1319285024"/><text x="4.6498%" y="687.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,319,285,024 samples, 0.61%)</title><rect x="4.3998%" y="661" width="0.6116%" height="15" fill="rgb(216,135,14)" fg:x="9489959708" fg:w="1319285024"/><text x="4.6498%" y="671.50"></text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (1,319,285,024 samples, 0.61%)</title><rect x="4.3998%" y="645" width="0.6116%" height="15" fill="rgb(241,47,5)" fg:x="9489959708" fg:w="1319285024"/><text x="4.6498%" y="655.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (1,319,285,024 samples, 0.61%)</title><rect x="4.3998%" y="629" width="0.6116%" height="15" fill="rgb(233,42,35)" fg:x="9489959708" fg:w="1319285024"/><text x="4.6498%" y="639.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,319,285,024 samples, 0.61%)</title><rect x="4.3998%" y="613" width="0.6116%" height="15" fill="rgb(231,13,6)" fg:x="9489959708" fg:w="1319285024"/><text x="4.6498%" y="623.50"></text></g><g><title>rayon_core::join::join_context (1,316,251,684 samples, 0.61%)</title><rect x="4.4012%" y="597" width="0.6102%" height="15" fill="rgb(207,181,40)" fg:x="9492993048" fg:w="1316251684"/><text x="4.6512%" y="607.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1,316,251,684 samples, 0.61%)</title><rect x="4.4012%" y="581" width="0.6102%" height="15" fill="rgb(254,173,49)" fg:x="9492993048" fg:w="1316251684"/><text x="4.6512%" y="591.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (1,292,360,741 samples, 0.60%)</title><rect x="4.4122%" y="565" width="0.5992%" height="15" fill="rgb(221,1,38)" fg:x="9516883991" fg:w="1292360741"/><text x="4.6622%" y="575.50"></text></g><g><title>std::panic::catch_unwind (1,292,360,741 samples, 0.60%)</title><rect x="4.4122%" y="549" width="0.5992%" height="15" fill="rgb(206,124,46)" fg:x="9516883991" fg:w="1292360741"/><text x="4.6622%" y="559.50"></text></g><g><title>std::panicking::try (1,292,360,741 samples, 0.60%)</title><rect x="4.4122%" y="533" width="0.5992%" height="15" fill="rgb(249,21,11)" fg:x="9516883991" fg:w="1292360741"/><text x="4.6622%" y="543.50"></text></g><g><title>std::panicking::try::do_call (1,292,360,741 samples, 0.60%)</title><rect x="4.4122%" y="517" width="0.5992%" height="15" fill="rgb(222,201,40)" fg:x="9516883991" fg:w="1292360741"/><text x="4.6622%" y="527.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,292,360,741 samples, 0.60%)</title><rect x="4.4122%" y="501" width="0.5992%" height="15" fill="rgb(235,61,29)" fg:x="9516883991" fg:w="1292360741"/><text x="4.6622%" y="511.50"></text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (1,292,360,741 samples, 0.60%)</title><rect x="4.4122%" y="485" width="0.5992%" height="15" fill="rgb(219,207,3)" fg:x="9516883991" fg:w="1292360741"/><text x="4.6622%" y="495.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (1,292,360,741 samples, 0.60%)</title><rect x="4.4122%" y="469" width="0.5992%" height="15" fill="rgb(222,56,46)" fg:x="9516883991" fg:w="1292360741"/><text x="4.6622%" y="479.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,292,360,741 samples, 0.60%)</title><rect x="4.4122%" y="453" width="0.5992%" height="15" fill="rgb(239,76,54)" fg:x="9516883991" fg:w="1292360741"/><text x="4.6622%" y="463.50"></text></g><g><title>rayon_core::join::join_context (1,292,360,741 samples, 0.60%)</title><rect x="4.4122%" y="437" width="0.5992%" height="15" fill="rgb(231,124,27)" fg:x="9516883991" fg:w="1292360741"/><text x="4.6622%" y="447.50"></text></g><g><title>rayon_core::registry::in_worker (1,292,360,741 samples, 0.60%)</title><rect x="4.4122%" y="421" width="0.5992%" height="15" fill="rgb(249,195,6)" fg:x="9516883991" fg:w="1292360741"/><text x="4.6622%" y="431.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1,292,360,741 samples, 0.60%)</title><rect x="4.4122%" y="405" width="0.5992%" height="15" fill="rgb(237,174,47)" fg:x="9516883991" fg:w="1292360741"/><text x="4.6622%" y="415.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="389" width="0.5803%" height="15" fill="rgb(206,201,31)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="399.50"></text></g><g><title>std::panic::catch_unwind (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="373" width="0.5803%" height="15" fill="rgb(231,57,52)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="383.50"></text></g><g><title>std::panicking::try (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="357" width="0.5803%" height="15" fill="rgb(248,177,22)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="367.50"></text></g><g><title>std::panicking::try::do_call (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="341" width="0.5803%" height="15" fill="rgb(215,211,37)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="351.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="325" width="0.5803%" height="15" fill="rgb(241,128,51)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="335.50"></text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="309" width="0.5803%" height="15" fill="rgb(227,165,31)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="319.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="293" width="0.5803%" height="15" fill="rgb(228,167,24)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="303.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="277" width="0.5803%" height="15" fill="rgb(228,143,12)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="287.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="261" width="0.5803%" height="15" fill="rgb(249,149,8)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="271.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="245" width="0.5803%" height="15" fill="rgb(243,35,44)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="229" width="0.5803%" height="15" fill="rgb(246,89,9)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="213" width="0.5803%" height="15" fill="rgb(233,213,13)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="197" width="0.5803%" height="15" fill="rgb(233,141,41)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="181" width="0.5803%" height="15" fill="rgb(239,167,4)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="165" width="0.5803%" height="15" fill="rgb(209,217,16)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="175.50"></text></g><g><title>par_matvec::sparse_dense_impl::simple::reduce_workspaces_rayon::_{{closure}} (1,251,675,572 samples, 0.58%)</title><rect x="4.4311%" y="149" width="0.5803%" height="15" fill="rgb(219,88,35)" fg:x="9557569160" fg:w="1251675572"/><text x="4.6811%" y="159.50"></text></g><g><title>faer::row::rowref::&lt;impl faer::row::generic::Row&lt;Inner&gt;&gt;::sum (1,135,085,636 samples, 0.53%)</title><rect x="4.4852%" y="133" width="0.5263%" height="15" fill="rgb(220,193,23)" fg:x="9674159096" fg:w="1135085636"/><text x="4.7352%" y="143.50"></text></g><g><title>faer::mat::matref::&lt;impl faer::mat::generic::Mat&lt;Inner&gt;&gt;::sum (1,135,085,636 samples, 0.53%)</title><rect x="4.4852%" y="117" width="0.5263%" height="15" fill="rgb(230,90,52)" fg:x="9674159096" fg:w="1135085636"/><text x="4.7352%" y="127.50"></text></g><g><title>faer::linalg::reductions::sum::sum (1,135,085,636 samples, 0.53%)</title><rect x="4.4852%" y="101" width="0.5263%" height="15" fill="rgb(252,106,19)" fg:x="9674159096" fg:w="1135085636"/><text x="4.7352%" y="111.50"></text></g><g><title>faer_traits::math_utils::add (1,010,026,637 samples, 0.47%)</title><rect x="4.5431%" y="85" width="0.4683%" height="15" fill="rgb(206,74,20)" fg:x="9799218095" fg:w="1010026637"/><text x="4.7931%" y="95.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (1,010,026,637 samples, 0.47%)</title><rect x="4.5431%" y="69" width="0.4683%" height="15" fill="rgb(230,138,44)" fg:x="9799218095" fg:w="1010026637"/><text x="4.7931%" y="79.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (1,010,026,637 samples, 0.47%)</title><rect x="4.5431%" y="53" width="0.4683%" height="15" fill="rgb(235,182,43)" fg:x="9799218095" fg:w="1010026637"/><text x="4.7931%" y="63.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (1,010,026,637 samples, 0.47%)</title><rect x="4.5431%" y="37" width="0.4683%" height="15" fill="rgb(242,16,51)" fg:x="9799218095" fg:w="1010026637"/><text x="4.7931%" y="47.50"></text></g><g><title>rayon_core::registry::Registry::pop_injected_job (49,532,297 samples, 0.02%)</title><rect x="5.0125%" y="869" width="0.0230%" height="15" fill="rgb(248,9,4)" fg:x="10811694059" fg:w="49532297"/><text x="5.2625%" y="879.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (43,553,827 samples, 0.02%)</title><rect x="5.0153%" y="853" width="0.0202%" height="15" fill="rgb(210,31,22)" fg:x="10817672529" fg:w="43553827"/><text x="5.2653%" y="863.50"></text></g><g><title>core::sync::atomic::fence (28,141,052 samples, 0.01%)</title><rect x="5.0225%" y="837" width="0.0130%" height="15" fill="rgb(239,54,39)" fg:x="10833085304" fg:w="28141052"/><text x="5.2725%" y="847.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (32,750,722 samples, 0.02%)</title><rect x="5.0965%" y="725" width="0.0152%" height="15" fill="rgb(230,99,41)" fg:x="10992862609" fg:w="32750722"/><text x="5.3465%" y="735.50"></text></g><g><title>crossbeam_epoch::default::with_handle (32,750,722 samples, 0.02%)</title><rect x="5.0965%" y="709" width="0.0152%" height="15" fill="rgb(253,106,12)" fg:x="10992862609" fg:w="32750722"/><text x="5.3465%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (32,750,722 samples, 0.02%)</title><rect x="5.0965%" y="693" width="0.0152%" height="15" fill="rgb(213,46,41)" fg:x="10992862609" fg:w="32750722"/><text x="5.3465%" y="703.50"></text></g><g><title>core::ops::function::FnOnce::call_once (32,750,722 samples, 0.02%)</title><rect x="5.0965%" y="677" width="0.0152%" height="15" fill="rgb(215,133,35)" fg:x="10992862609" fg:w="32750722"/><text x="5.3465%" y="687.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::_{{constant}}::_{{closure}} (32,750,722 samples, 0.02%)</title><rect x="5.0965%" y="661" width="0.0152%" height="15" fill="rgb(213,28,5)" fg:x="10992862609" fg:w="32750722"/><text x="5.3465%" y="671.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (32,750,722 samples, 0.02%)</title><rect x="5.0965%" y="645" width="0.0152%" height="15" fill="rgb(215,77,49)" fg:x="10992862609" fg:w="32750722"/><text x="5.3465%" y="655.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::compare_exchange (178,445,898 samples, 0.08%)</title><rect x="5.1427%" y="613" width="0.0827%" height="15" fill="rgb(248,100,22)" fg:x="11092368721" fg:w="178445898"/><text x="5.3927%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (178,445,898 samples, 0.08%)</title><rect x="5.1427%" y="597" width="0.0827%" height="15" fill="rgb(208,67,9)" fg:x="11092368721" fg:w="178445898"/><text x="5.3927%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (178,445,898 samples, 0.08%)</title><rect x="5.1427%" y="581" width="0.0827%" height="15" fill="rgb(219,133,21)" fg:x="11092368721" fg:w="178445898"/><text x="5.3927%" y="591.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::load (24,138,024 samples, 0.01%)</title><rect x="5.2254%" y="613" width="0.0112%" height="15" fill="rgb(246,46,29)" fg:x="11270814619" fg:w="24138024"/><text x="5.4754%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (24,138,024 samples, 0.01%)</title><rect x="5.2254%" y="597" width="0.0112%" height="15" fill="rgb(246,185,52)" fg:x="11270814619" fg:w="24138024"/><text x="5.4754%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (24,138,024 samples, 0.01%)</title><rect x="5.2254%" y="581" width="0.0112%" height="15" fill="rgb(252,136,11)" fg:x="11270814619" fg:w="24138024"/><text x="5.4754%" y="591.50"></text></g><g><title>crossbeam_epoch::epoch::Epoch::pinned (25,239,684 samples, 0.01%)</title><rect x="5.2366%" y="613" width="0.0117%" height="15" fill="rgb(219,138,53)" fg:x="11294952643" fg:w="25239684"/><text x="5.4866%" y="623.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (24,449,758 samples, 0.01%)</title><rect x="5.2569%" y="565" width="0.0113%" height="15" fill="rgb(211,51,23)" fg:x="11338681982" fg:w="24449758"/><text x="5.5069%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (24,449,758 samples, 0.01%)</title><rect x="5.2569%" y="549" width="0.0113%" height="15" fill="rgb(247,221,28)" fg:x="11338681982" fg:w="24449758"/><text x="5.5069%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (24,449,758 samples, 0.01%)</title><rect x="5.2569%" y="533" width="0.0113%" height="15" fill="rgb(251,222,45)" fg:x="11338681982" fg:w="24449758"/><text x="5.5069%" y="543.50"></text></g><g><title>&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (25,984,884 samples, 0.01%)</title><rect x="5.2569%" y="581" width="0.0120%" height="15" fill="rgb(217,162,53)" fg:x="11338681982" fg:w="25984884"/><text x="5.5069%" y="591.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::load (25,865,307 samples, 0.01%)</title><rect x="5.2699%" y="581" width="0.0120%" height="15" fill="rgb(229,93,14)" fg:x="11366868625" fg:w="25865307"/><text x="5.5199%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (25,865,307 samples, 0.01%)</title><rect x="5.2699%" y="565" width="0.0120%" height="15" fill="rgb(209,67,49)" fg:x="11366868625" fg:w="25865307"/><text x="5.5199%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (25,865,307 samples, 0.01%)</title><rect x="5.2699%" y="549" width="0.0120%" height="15" fill="rgb(213,87,29)" fg:x="11366868625" fg:w="25865307"/><text x="5.5199%" y="559.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (75,526,041 samples, 0.04%)</title><rect x="5.2490%" y="597" width="0.0350%" height="15" fill="rgb(205,151,52)" fg:x="11321697145" fg:w="75526041"/><text x="5.4990%" y="607.50"></text></g><g><title>[libc.so.6] (37,813,181 samples, 0.02%)</title><rect x="5.2840%" y="581" width="0.0175%" height="15" fill="rgb(253,215,39)" fg:x="11397223186" fg:w="37813181"/><text x="5.5340%" y="591.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (116,559,689 samples, 0.05%)</title><rect x="5.2483%" y="613" width="0.0540%" height="15" fill="rgb(221,220,41)" fg:x="11320192327" fg:w="116559689"/><text x="5.4983%" y="623.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (39,528,830 samples, 0.02%)</title><rect x="5.2840%" y="597" width="0.0183%" height="15" fill="rgb(218,133,21)" fg:x="11397223186" fg:w="39528830"/><text x="5.5340%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (530,340,824 samples, 0.25%)</title><rect x="5.0576%" y="773" width="0.2459%" height="15" fill="rgb(221,193,43)" fg:x="10908905474" fg:w="530340824"/><text x="5.3076%" y="783.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (530,340,824 samples, 0.25%)</title><rect x="5.0576%" y="757" width="0.2459%" height="15" fill="rgb(240,128,52)" fg:x="10908905474" fg:w="530340824"/><text x="5.3076%" y="767.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (514,866,293 samples, 0.24%)</title><rect x="5.0648%" y="741" width="0.2387%" height="15" fill="rgb(253,114,12)" fg:x="10924380005" fg:w="514866293"/><text x="5.3148%" y="751.50"></text></g><g><title>crossbeam_epoch::default::pin (413,632,967 samples, 0.19%)</title><rect x="5.1117%" y="725" width="0.1918%" height="15" fill="rgb(215,223,47)" fg:x="11025613331" fg:w="413632967"/><text x="5.3617%" y="735.50"></text></g><g><title>crossbeam_epoch::default::with_handle (413,632,967 samples, 0.19%)</title><rect x="5.1117%" y="709" width="0.1918%" height="15" fill="rgb(248,225,23)" fg:x="11025613331" fg:w="413632967"/><text x="5.3617%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (413,632,967 samples, 0.19%)</title><rect x="5.1117%" y="693" width="0.1918%" height="15" fill="rgb(250,108,0)" fg:x="11025613331" fg:w="413632967"/><text x="5.3617%" y="703.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (392,746,708 samples, 0.18%)</title><rect x="5.1214%" y="677" width="0.1821%" height="15" fill="rgb(228,208,7)" fg:x="11046499590" fg:w="392746708"/><text x="5.3714%" y="687.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (392,746,708 samples, 0.18%)</title><rect x="5.1214%" y="661" width="0.1821%" height="15" fill="rgb(244,45,10)" fg:x="11046499590" fg:w="392746708"/><text x="5.3714%" y="671.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (392,746,708 samples, 0.18%)</title><rect x="5.1214%" y="645" width="0.1821%" height="15" fill="rgb(207,125,25)" fg:x="11046499590" fg:w="392746708"/><text x="5.3714%" y="655.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (392,746,708 samples, 0.18%)</title><rect x="5.1214%" y="629" width="0.1821%" height="15" fill="rgb(210,195,18)" fg:x="11046499590" fg:w="392746708"/><text x="5.3714%" y="639.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (541,355,754 samples, 0.25%)</title><rect x="5.0550%" y="789" width="0.2510%" height="15" fill="rgb(249,80,12)" fg:x="10903362433" fg:w="541355754"/><text x="5.3050%" y="799.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (39,487,079 samples, 0.02%)</title><rect x="5.3655%" y="709" width="0.0183%" height="15" fill="rgb(221,65,9)" fg:x="11573027447" fg:w="39487079"/><text x="5.6155%" y="719.50"></text></g><g><title>crossbeam_epoch::default::with_handle (39,487,079 samples, 0.02%)</title><rect x="5.3655%" y="693" width="0.0183%" height="15" fill="rgb(235,49,36)" fg:x="11573027447" fg:w="39487079"/><text x="5.6155%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (39,487,079 samples, 0.02%)</title><rect x="5.3655%" y="677" width="0.0183%" height="15" fill="rgb(225,32,20)" fg:x="11573027447" fg:w="39487079"/><text x="5.6155%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once (39,487,079 samples, 0.02%)</title><rect x="5.3655%" y="661" width="0.0183%" height="15" fill="rgb(215,141,46)" fg:x="11573027447" fg:w="39487079"/><text x="5.6155%" y="671.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::_{{constant}}::_{{closure}} (39,487,079 samples, 0.02%)</title><rect x="5.3655%" y="645" width="0.0183%" height="15" fill="rgb(250,160,47)" fg:x="11573027447" fg:w="39487079"/><text x="5.6155%" y="655.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (39,487,079 samples, 0.02%)</title><rect x="5.3655%" y="629" width="0.0183%" height="15" fill="rgb(216,222,40)" fg:x="11573027447" fg:w="39487079"/><text x="5.6155%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (34,937,391 samples, 0.02%)</title><rect x="5.3851%" y="661" width="0.0162%" height="15" fill="rgb(234,217,39)" fg:x="11615294443" fg:w="34937391"/><text x="5.6351%" y="671.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::_{{constant}}::_{{closure}} (34,937,391 samples, 0.02%)</title><rect x="5.3851%" y="645" width="0.0162%" height="15" fill="rgb(207,178,40)" fg:x="11615294443" fg:w="34937391"/><text x="5.6351%" y="655.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (34,937,391 samples, 0.02%)</title><rect x="5.3851%" y="629" width="0.0162%" height="15" fill="rgb(221,136,13)" fg:x="11615294443" fg:w="34937391"/><text x="5.6351%" y="639.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::compare_exchange (237,195,129 samples, 0.11%)</title><rect x="5.4311%" y="597" width="0.1100%" height="15" fill="rgb(249,199,10)" fg:x="11714505503" fg:w="237195129"/><text x="5.6811%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (237,195,129 samples, 0.11%)</title><rect x="5.4311%" y="581" width="0.1100%" height="15" fill="rgb(249,222,13)" fg:x="11714505503" fg:w="237195129"/><text x="5.6811%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (237,195,129 samples, 0.11%)</title><rect x="5.4311%" y="565" width="0.1100%" height="15" fill="rgb(244,185,38)" fg:x="11714505503" fg:w="237195129"/><text x="5.6811%" y="575.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::load (30,211,880 samples, 0.01%)</title><rect x="5.5411%" y="597" width="0.0140%" height="15" fill="rgb(236,202,9)" fg:x="11951700632" fg:w="30211880"/><text x="5.7911%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (30,211,880 samples, 0.01%)</title><rect x="5.5411%" y="581" width="0.0140%" height="15" fill="rgb(250,229,37)" fg:x="11951700632" fg:w="30211880"/><text x="5.7911%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (30,211,880 samples, 0.01%)</title><rect x="5.5411%" y="565" width="0.0140%" height="15" fill="rgb(206,174,23)" fg:x="11951700632" fg:w="30211880"/><text x="5.7911%" y="575.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (36,410,934 samples, 0.02%)</title><rect x="5.5735%" y="549" width="0.0169%" height="15" fill="rgb(211,33,43)" fg:x="12021567871" fg:w="36410934"/><text x="5.8235%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (36,410,934 samples, 0.02%)</title><rect x="5.5735%" y="533" width="0.0169%" height="15" fill="rgb(245,58,50)" fg:x="12021567871" fg:w="36410934"/><text x="5.8235%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_load (36,410,934 samples, 0.02%)</title><rect x="5.5735%" y="517" width="0.0169%" height="15" fill="rgb(244,68,36)" fg:x="12021567871" fg:w="36410934"/><text x="5.8235%" y="527.50"></text></g><g><title>&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (46,685,636 samples, 0.02%)</title><rect x="5.5708%" y="565" width="0.0216%" height="15" fill="rgb(232,229,15)" fg:x="12015740769" fg:w="46685636"/><text x="5.8208%" y="575.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::load (25,739,311 samples, 0.01%)</title><rect x="5.5948%" y="565" width="0.0119%" height="15" fill="rgb(254,30,23)" fg:x="12067559376" fg:w="25739311"/><text x="5.8448%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (25,739,311 samples, 0.01%)</title><rect x="5.5948%" y="549" width="0.0119%" height="15" fill="rgb(235,160,14)" fg:x="12067559376" fg:w="25739311"/><text x="5.8448%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (25,739,311 samples, 0.01%)</title><rect x="5.5948%" y="533" width="0.0119%" height="15" fill="rgb(212,155,44)" fg:x="12067559376" fg:w="25739311"/><text x="5.8448%" y="543.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (100,008,630 samples, 0.05%)</title><rect x="5.5626%" y="581" width="0.0464%" height="15" fill="rgb(226,2,50)" fg:x="11998055015" fg:w="100008630"/><text x="5.8126%" y="591.50"></text></g><g><title>[libc.so.6] (29,835,111 samples, 0.01%)</title><rect x="5.6089%" y="565" width="0.0138%" height="15" fill="rgb(234,177,6)" fg:x="12098063645" fg:w="29835111"/><text x="5.8589%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (666,042,172 samples, 0.31%)</title><rect x="5.3147%" y="757" width="0.3088%" height="15" fill="rgb(217,24,9)" fg:x="11463389381" fg:w="666042172"/><text x="5.5647%" y="767.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (666,042,172 samples, 0.31%)</title><rect x="5.3147%" y="741" width="0.3088%" height="15" fill="rgb(220,13,46)" fg:x="11463389381" fg:w="666042172"/><text x="5.5647%" y="751.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (645,148,894 samples, 0.30%)</title><rect x="5.3244%" y="725" width="0.2991%" height="15" fill="rgb(239,221,27)" fg:x="11484282659" fg:w="645148894"/><text x="5.5744%" y="735.50"></text></g><g><title>crossbeam_epoch::default::pin (516,917,027 samples, 0.24%)</title><rect x="5.3838%" y="709" width="0.2397%" height="15" fill="rgb(222,198,25)" fg:x="11612514526" fg:w="516917027"/><text x="5.6338%" y="719.50"></text></g><g><title>crossbeam_epoch::default::with_handle (514,137,110 samples, 0.24%)</title><rect x="5.3851%" y="693" width="0.2384%" height="15" fill="rgb(211,99,13)" fg:x="11615294443" fg:w="514137110"/><text x="5.6351%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (514,137,110 samples, 0.24%)</title><rect x="5.3851%" y="677" width="0.2384%" height="15" fill="rgb(232,111,31)" fg:x="11615294443" fg:w="514137110"/><text x="5.6351%" y="687.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (479,199,719 samples, 0.22%)</title><rect x="5.4013%" y="661" width="0.2222%" height="15" fill="rgb(245,82,37)" fg:x="11650231834" fg:w="479199719"/><text x="5.6513%" y="671.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (479,199,719 samples, 0.22%)</title><rect x="5.4013%" y="645" width="0.2222%" height="15" fill="rgb(227,149,46)" fg:x="11650231834" fg:w="479199719"/><text x="5.6513%" y="655.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (479,199,719 samples, 0.22%)</title><rect x="5.4013%" y="629" width="0.2222%" height="15" fill="rgb(218,36,50)" fg:x="11650231834" fg:w="479199719"/><text x="5.6513%" y="639.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (479,199,719 samples, 0.22%)</title><rect x="5.4013%" y="613" width="0.2222%" height="15" fill="rgb(226,80,48)" fg:x="11650231834" fg:w="479199719"/><text x="5.6513%" y="623.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (131,376,538 samples, 0.06%)</title><rect x="5.5626%" y="597" width="0.0609%" height="15" fill="rgb(238,224,15)" fg:x="11998055015" fg:w="131376538"/><text x="5.8126%" y="607.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (31,367,908 samples, 0.01%)</title><rect x="5.6089%" y="581" width="0.0145%" height="15" fill="rgb(241,136,10)" fg:x="12098063645" fg:w="31367908"/><text x="5.8589%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,268,105,615 samples, 0.59%)</title><rect x="5.0378%" y="837" width="0.5879%" height="15" fill="rgb(208,32,45)" fg:x="10866161147" fg:w="1268105615"/><text x="5.2878%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,264,377,454 samples, 0.59%)</title><rect x="5.0395%" y="821" width="0.5862%" height="15" fill="rgb(207,135,9)" fg:x="10869889308" fg:w="1264377454"/><text x="5.2895%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,259,270,616 samples, 0.58%)</title><rect x="5.0419%" y="805" width="0.5838%" height="15" fill="rgb(206,86,44)" fg:x="10874996146" fg:w="1259270616"/><text x="5.2919%" y="815.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (672,714,692 samples, 0.31%)</title><rect x="5.3138%" y="789" width="0.3119%" height="15" fill="rgb(245,177,15)" fg:x="11461552070" fg:w="672714692"/><text x="5.5638%" y="799.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (672,714,692 samples, 0.31%)</title><rect x="5.3138%" y="773" width="0.3119%" height="15" fill="rgb(206,64,50)" fg:x="11461552070" fg:w="672714692"/><text x="5.5638%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1,271,846,306 samples, 0.59%)</title><rect x="5.0378%" y="853" width="0.5897%" height="15" fill="rgb(234,36,40)" fg:x="10866161147" fg:w="1271846306"/><text x="5.2878%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (1,330,604,772 samples, 0.62%)</title><rect x="5.0114%" y="901" width="0.6169%" height="15" fill="rgb(213,64,8)" fg:x="10809244732" fg:w="1330604772"/><text x="5.2614%" y="911.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work::_{{closure}} (1,328,155,445 samples, 0.62%)</title><rect x="5.0125%" y="885" width="0.6158%" height="15" fill="rgb(210,75,36)" fg:x="10811694059" fg:w="1328155445"/><text x="5.2625%" y="895.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (1,278,623,148 samples, 0.59%)</title><rect x="5.0355%" y="869" width="0.5928%" height="15" fill="rgb(229,88,21)" fg:x="10861226356" fg:w="1278623148"/><text x="5.2855%" y="879.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::compare_exchange (44,357,331 samples, 0.02%)</title><rect x="5.6518%" y="757" width="0.0206%" height="15" fill="rgb(252,204,47)" fg:x="12190480248" fg:w="44357331"/><text x="5.9018%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (44,357,331 samples, 0.02%)</title><rect x="5.6518%" y="741" width="0.0206%" height="15" fill="rgb(208,77,27)" fg:x="12190480248" fg:w="44357331"/><text x="5.9018%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (44,357,331 samples, 0.02%)</title><rect x="5.6518%" y="725" width="0.0206%" height="15" fill="rgb(221,76,26)" fg:x="12190480248" fg:w="44357331"/><text x="5.9018%" y="735.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::load (35,202,929 samples, 0.02%)</title><rect x="5.6723%" y="757" width="0.0163%" height="15" fill="rgb(225,139,18)" fg:x="12234837579" fg:w="35202929"/><text x="5.9223%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (35,202,929 samples, 0.02%)</title><rect x="5.6723%" y="741" width="0.0163%" height="15" fill="rgb(230,137,11)" fg:x="12234837579" fg:w="35202929"/><text x="5.9223%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (35,202,929 samples, 0.02%)</title><rect x="5.6723%" y="725" width="0.0163%" height="15" fill="rgb(212,28,1)" fg:x="12234837579" fg:w="35202929"/><text x="5.9223%" y="735.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (148,920,587 samples, 0.07%)</title><rect x="5.6298%" y="885" width="0.0690%" height="15" fill="rgb(248,164,17)" fg:x="12143195616" fg:w="148920587"/><text x="5.8798%" y="895.50"></text></g><g><title>crossbeam_epoch::default::pin (110,761,295 samples, 0.05%)</title><rect x="5.6475%" y="869" width="0.0514%" height="15" fill="rgb(222,171,42)" fg:x="12181354908" fg:w="110761295"/><text x="5.8975%" y="879.50"></text></g><g><title>crossbeam_epoch::default::with_handle (110,761,295 samples, 0.05%)</title><rect x="5.6475%" y="853" width="0.0514%" height="15" fill="rgb(243,84,45)" fg:x="12181354908" fg:w="110761295"/><text x="5.8975%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (110,761,295 samples, 0.05%)</title><rect x="5.6475%" y="837" width="0.0514%" height="15" fill="rgb(252,49,23)" fg:x="12181354908" fg:w="110761295"/><text x="5.8975%" y="847.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (110,761,295 samples, 0.05%)</title><rect x="5.6475%" y="821" width="0.0514%" height="15" fill="rgb(215,19,7)" fg:x="12181354908" fg:w="110761295"/><text x="5.8975%" y="831.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (110,761,295 samples, 0.05%)</title><rect x="5.6475%" y="805" width="0.0514%" height="15" fill="rgb(238,81,41)" fg:x="12181354908" fg:w="110761295"/><text x="5.8975%" y="815.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (110,761,295 samples, 0.05%)</title><rect x="5.6475%" y="789" width="0.0514%" height="15" fill="rgb(210,199,37)" fg:x="12181354908" fg:w="110761295"/><text x="5.8975%" y="799.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (110,761,295 samples, 0.05%)</title><rect x="5.6475%" y="773" width="0.0514%" height="15" fill="rgb(244,192,49)" fg:x="12181354908" fg:w="110761295"/><text x="5.8975%" y="783.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (1,505,923,215 samples, 0.70%)</title><rect x="5.0114%" y="917" width="0.6982%" height="15" fill="rgb(226,211,11)" fg:x="10809244732" fg:w="1505923215"/><text x="5.2614%" y="927.50"></text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (175,318,443 samples, 0.08%)</title><rect x="5.6283%" y="901" width="0.0813%" height="15" fill="rgb(236,162,54)" fg:x="12139849504" fg:w="175318443"/><text x="5.8783%" y="911.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (23,051,744 samples, 0.01%)</title><rect x="5.6989%" y="885" width="0.0107%" height="15" fill="rgb(220,229,9)" fg:x="12292116203" fg:w="23051744"/><text x="5.9489%" y="895.50"></text></g><g><title>__sched_yield (65,013,019 samples, 0.03%)</title><rect x="5.7207%" y="901" width="0.0301%" height="15" fill="rgb(250,87,22)" fg:x="12339234362" fg:w="65013019"/><text x="5.9707%" y="911.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (74,692,746 samples, 0.03%)</title><rect x="5.7515%" y="901" width="0.0346%" height="15" fill="rgb(239,43,17)" fg:x="12405544852" fg:w="74692746"/><text x="6.0015%" y="911.50"></text></g><g><title>std::sync::poison::condvar::Condvar::wait (54,736,160 samples, 0.03%)</title><rect x="5.7607%" y="885" width="0.0254%" height="15" fill="rgb(231,177,25)" fg:x="12425501438" fg:w="54736160"/><text x="6.0107%" y="895.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (34,691,627 samples, 0.02%)</title><rect x="5.7700%" y="869" width="0.0161%" height="15" fill="rgb(219,179,1)" fg:x="12445545971" fg:w="34691627"/><text x="6.0200%" y="879.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (34,691,627 samples, 0.02%)</title><rect x="5.7700%" y="853" width="0.0161%" height="15" fill="rgb(238,219,53)" fg:x="12445545971" fg:w="34691627"/><text x="6.0200%" y="863.50"></text></g><g><title>rayon_core::sleep::Sleep::no_work_found (159,585,271 samples, 0.07%)</title><rect x="5.7153%" y="917" width="0.0740%" height="15" fill="rgb(232,167,36)" fg:x="12327521109" fg:w="159585271"/><text x="5.9653%" y="927.50"></text></g><g><title>core::hint::spin_loop (46,482,818 samples, 0.02%)</title><rect x="5.8036%" y="805" width="0.0216%" height="15" fill="rgb(244,19,51)" fg:x="12518014091" fg:w="46482818"/><text x="6.0536%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (46,482,818 samples, 0.02%)</title><rect x="5.8036%" y="789" width="0.0216%" height="15" fill="rgb(224,6,22)" fg:x="12518014091" fg:w="46482818"/><text x="6.0536%" y="799.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (81,717,146 samples, 0.04%)</title><rect x="5.7926%" y="869" width="0.0379%" height="15" fill="rgb(224,145,5)" fg:x="12494342839" fg:w="81717146"/><text x="6.0426%" y="879.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (81,717,146 samples, 0.04%)</title><rect x="5.7926%" y="853" width="0.0379%" height="15" fill="rgb(234,130,49)" fg:x="12494342839" fg:w="81717146"/><text x="6.0426%" y="863.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (69,704,253 samples, 0.03%)</title><rect x="5.7982%" y="837" width="0.0323%" height="15" fill="rgb(254,6,2)" fg:x="12506355732" fg:w="69704253"/><text x="6.0482%" y="847.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::spin (59,928,498 samples, 0.03%)</title><rect x="5.8028%" y="821" width="0.0278%" height="15" fill="rgb(208,96,46)" fg:x="12516131487" fg:w="59928498"/><text x="6.0528%" y="831.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}} (12,336,199,448 samples, 5.72%)</title><rect x="0.1117%" y="1013" width="5.7193%" height="15" fill="rgb(239,3,39)" fg:x="240823550" fg:w="12336199448"/><text x="0.3617%" y="1023.50">&lt;rayon_..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (12,336,199,448 samples, 5.72%)</title><rect x="0.1117%" y="997" width="5.7193%" height="15" fill="rgb(233,210,1)" fg:x="240823550" fg:w="12336199448"/><text x="0.3617%" y="1007.50">rayon_c..</text></g><g><title>rayon_core::registry::main_loop (12,336,199,448 samples, 5.72%)</title><rect x="0.1117%" y="981" width="5.7193%" height="15" fill="rgb(244,137,37)" fg:x="240823550" fg:w="12336199448"/><text x="0.3617%" y="991.50">rayon_c..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_out_of_work (12,336,199,448 samples, 5.72%)</title><rect x="0.1117%" y="965" width="5.7193%" height="15" fill="rgb(240,136,2)" fg:x="240823550" fg:w="12336199448"/><text x="0.3617%" y="975.50">rayon_c..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (12,336,199,448 samples, 5.72%)</title><rect x="0.1117%" y="949" width="5.7193%" height="15" fill="rgb(239,18,37)" fg:x="240823550" fg:w="12336199448"/><text x="0.3617%" y="959.50">rayon_c..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (12,336,199,448 samples, 5.72%)</title><rect x="0.1117%" y="933" width="5.7193%" height="15" fill="rgb(218,185,22)" fg:x="240823550" fg:w="12336199448"/><text x="0.3617%" y="943.50">rayon_c..</text></g><g><title>rayon_core::sleep::Sleep::work_found (89,916,618 samples, 0.04%)</title><rect x="5.7893%" y="917" width="0.0417%" height="15" fill="rgb(225,218,4)" fg:x="12487106380" fg:w="89916618"/><text x="6.0393%" y="927.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (89,916,618 samples, 0.04%)</title><rect x="5.7893%" y="901" width="0.0417%" height="15" fill="rgb(230,182,32)" fg:x="12487106380" fg:w="89916618"/><text x="6.0393%" y="911.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (87,761,429 samples, 0.04%)</title><rect x="5.7903%" y="885" width="0.0407%" height="15" fill="rgb(242,56,43)" fg:x="12489261569" fg:w="87761429"/><text x="6.0403%" y="895.50"></text></g><g><title>&lt;faer::col::generic::Col&lt;Inner&gt; as core::ops::index::Index&lt;&lt;Rows as faer::ShapeIdx&gt;::Idx&lt;usize&gt;&gt;&gt;::index (74,839,019 samples, 0.03%)</title><rect x="6.1334%" y="997" width="0.0347%" height="15" fill="rgb(233,99,24)" fg:x="13229218660" fg:w="74839019"/><text x="6.3834%" y="1007.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::at (74,839,019 samples, 0.03%)</title><rect x="6.1334%" y="981" width="0.0347%" height="15" fill="rgb(234,209,42)" fg:x="13229218660" fg:w="74839019"/><text x="6.3834%" y="991.50"></text></g><g><title>&lt;&amp;&amp;equator::structures::Finalize&lt;E&gt; as equator::traits::Expr&gt;::eval_expr (74,839,019 samples, 0.03%)</title><rect x="6.1334%" y="965" width="0.0347%" height="15" fill="rgb(227,7,12)" fg:x="13229218660" fg:w="74839019"/><text x="6.3834%" y="975.50"></text></g><g><title>&lt;equator::expr::CmpExpr&lt;&amp;equator::spec::by_val::CmpByValWrapper&lt;equator::spec::sized::CmpSizedWrapper&lt;equator::spec::debug::CmpDebugWrapper&lt;C&gt;&gt;&gt;,&amp;Lhs3,&amp;Rhs3&gt; as equator::traits::Expr&gt;::eval_expr (74,839,019 samples, 0.03%)</title><rect x="6.1334%" y="949" width="0.0347%" height="15" fill="rgb(245,203,43)" fg:x="13229218660" fg:w="74839019"/><text x="6.3834%" y="959.50"></text></g><g><title>&lt;equator::Lt as equator::Cmp&lt;Lhs,Rhs&gt;&gt;::test (74,839,019 samples, 0.03%)</title><rect x="6.1334%" y="933" width="0.0347%" height="15" fill="rgb(238,205,33)" fg:x="13229218660" fg:w="74839019"/><text x="6.3834%" y="943.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (74,839,019 samples, 0.03%)</title><rect x="6.1334%" y="917" width="0.0347%" height="15" fill="rgb(231,56,7)" fg:x="13229218660" fg:w="74839019"/><text x="6.3834%" y="927.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (256,105,971 samples, 0.12%)</title><rect x="6.1752%" y="965" width="0.1187%" height="15" fill="rgb(244,186,29)" fg:x="13319405992" fg:w="256105971"/><text x="6.4252%" y="975.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (518,342,050 samples, 0.24%)</title><rect x="6.1681%" y="997" width="0.2403%" height="15" fill="rgb(234,111,31)" fg:x="13304057679" fg:w="518342050"/><text x="6.4181%" y="1007.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next (518,342,050 samples, 0.24%)</title><rect x="6.1681%" y="981" width="0.2403%" height="15" fill="rgb(241,149,10)" fg:x="13304057679" fg:w="518342050"/><text x="6.4181%" y="991.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (246,887,766 samples, 0.11%)</title><rect x="6.2939%" y="965" width="0.1145%" height="15" fill="rgb(249,206,44)" fg:x="13575511963" fg:w="246887766"/><text x="6.5439%" y="975.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (37,599,029,817 samples, 17.43%)</title><rect x="64.1168%" y="981" width="17.4317%" height="15" fill="rgb(251,153,30)" fg:x="138295420266" fg:w="37599029817"/><text x="64.3668%" y="991.50">&lt;Lhs as faer_traits::AddByR..</text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (37,599,029,817 samples, 17.43%)</title><rect x="64.1168%" y="965" width="17.4317%" height="15" fill="rgb(239,152,38)" fg:x="138295420266" fg:w="37599029817"/><text x="64.3668%" y="975.50">&lt;&amp;f64 as core::ops::arith::..</text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (37,599,029,817 samples, 17.43%)</title><rect x="64.1168%" y="949" width="17.4317%" height="15" fill="rgb(249,139,47)" fg:x="138295420266" fg:w="37599029817"/><text x="64.3668%" y="959.50">&lt;f64 as core::ops::arith::A..</text></g><g><title>&lt;Lhs as faer_traits::MulByRef&lt;Rhs&gt;&gt;::mul_by_ref (1,215,213,997 samples, 0.56%)</title><rect x="81.5485%" y="981" width="0.5634%" height="15" fill="rgb(244,64,35)" fg:x="175894450083" fg:w="1215213997"/><text x="81.7985%" y="991.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&gt;::mul (1,215,213,997 samples, 0.56%)</title><rect x="81.5485%" y="965" width="0.5634%" height="15" fill="rgb(216,46,15)" fg:x="175894450083" fg:w="1215213997"/><text x="81.7985%" y="975.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1,215,213,997 samples, 0.56%)</title><rect x="81.5485%" y="949" width="0.5634%" height="15" fill="rgb(250,74,19)" fg:x="175894450083" fg:w="1215213997"/><text x="81.7985%" y="959.50"></text></g><g><title>&lt;faer::col::generic::Col&lt;Inner&gt; as core::ops::index::Index&lt;&lt;Rows as faer::ShapeIdx&gt;::Idx&lt;usize&gt;&gt;&gt;::index (15,393,277,607 samples, 7.14%)</title><rect x="82.1119%" y="981" width="7.1367%" height="15" fill="rgb(249,42,33)" fg:x="177109664080" fg:w="15393277607"/><text x="82.3619%" y="991.50">&lt;faer::col..</text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::at (15,393,277,607 samples, 7.14%)</title><rect x="82.1119%" y="965" width="7.1367%" height="15" fill="rgb(242,149,17)" fg:x="177109664080" fg:w="15393277607"/><text x="82.3619%" y="975.50">faer::col:..</text></g><g><title>&lt;&amp;&amp;equator::structures::Finalize&lt;E&gt; as equator::traits::Expr&gt;::eval_expr (15,393,277,607 samples, 7.14%)</title><rect x="82.1119%" y="949" width="7.1367%" height="15" fill="rgb(244,29,21)" fg:x="177109664080" fg:w="15393277607"/><text x="82.3619%" y="959.50">&lt;&amp;&amp;equator..</text></g><g><title>&lt;equator::expr::CmpExpr&lt;&amp;equator::spec::by_val::CmpByValWrapper&lt;equator::spec::sized::CmpSizedWrapper&lt;equator::spec::debug::CmpDebugWrapper&lt;C&gt;&gt;&gt;,&amp;Lhs3,&amp;Rhs3&gt; as equator::traits::Expr&gt;::eval_expr (15,393,277,607 samples, 7.14%)</title><rect x="82.1119%" y="933" width="7.1367%" height="15" fill="rgb(220,130,37)" fg:x="177109664080" fg:w="15393277607"/><text x="82.3619%" y="943.50">&lt;equator::..</text></g><g><title>&lt;equator::Lt as equator::Cmp&lt;Lhs,Rhs&gt;&gt;::test (15,393,277,607 samples, 7.14%)</title><rect x="82.1119%" y="917" width="7.1367%" height="15" fill="rgb(211,67,2)" fg:x="177109664080" fg:w="15393277607"/><text x="82.3619%" y="927.50">&lt;equator::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (15,393,277,607 samples, 7.14%)</title><rect x="82.1119%" y="901" width="7.1367%" height="15" fill="rgb(235,68,52)" fg:x="177109664080" fg:w="15393277607"/><text x="82.3619%" y="911.50">core::cmp:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (206,876,664,057 samples, 95.91%)</title><rect x="0.1017%" y="1173" width="95.9125%" height="15" fill="rgb(246,142,3)" fg:x="219382171" fg:w="206876664057"/><text x="0.3517%" y="1183.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (206,876,664,057 samples, 95.91%)</title><rect x="0.1017%" y="1157" width="95.9125%" height="15" fill="rgb(241,25,7)" fg:x="219382171" fg:w="206876664057"/><text x="0.3517%" y="1167.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (206,876,664,057 samples, 95.91%)</title><rect x="0.1017%" y="1141" width="95.9125%" height="15" fill="rgb(242,119,39)" fg:x="219382171" fg:w="206876664057"/><text x="0.3517%" y="1151.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (206,876,664,057 samples, 95.91%)</title><rect x="0.1017%" y="1125" width="95.9125%" height="15" fill="rgb(241,98,45)" fg:x="219382171" fg:w="206876664057"/><text x="0.3517%" y="1135.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (206,855,222,678 samples, 95.90%)</title><rect x="0.1117%" y="1109" width="95.9026%" height="15" fill="rgb(254,28,30)" fg:x="240823550" fg:w="206855222678"/><text x="0.3617%" y="1119.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (206,855,222,678 samples, 95.90%)</title><rect x="0.1117%" y="1093" width="95.9026%" height="15" fill="rgb(241,142,54)" fg:x="240823550" fg:w="206855222678"/><text x="0.3617%" y="1103.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (206,855,222,678 samples, 95.90%)</title><rect x="0.1117%" y="1077" width="95.9026%" height="15" fill="rgb(222,85,15)" fg:x="240823550" fg:w="206855222678"/><text x="0.3617%" y="1087.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (206,855,222,678 samples, 95.90%)</title><rect x="0.1117%" y="1061" width="95.9026%" height="15" fill="rgb(210,85,47)" fg:x="240823550" fg:w="206855222678"/><text x="0.3617%" y="1071.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (206,855,222,678 samples, 95.90%)</title><rect x="0.1117%" y="1045" width="95.9026%" height="15" fill="rgb(224,206,25)" fg:x="240823550" fg:w="206855222678"/><text x="0.3617%" y="1055.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (206,855,222,678 samples, 95.90%)</title><rect x="0.1117%" y="1029" width="95.9026%" height="15" fill="rgb(243,201,19)" fg:x="240823550" fg:w="206855222678"/><text x="0.3617%" y="1039.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>par_matvec::sparse_dense_impl::simple::par_sparse_dense::_{{closure}}::_{{closure}} (194,519,023,230 samples, 90.18%)</title><rect x="5.8310%" y="1013" width="90.1833%" height="15" fill="rgb(236,59,4)" fg:x="12577022998" fg:w="194519023230"/><text x="6.0810%" y="1023.50">par_matvec::sparse_dense_impl::simple::par_sparse_dense::_{{closure}}::_{{closure}}</text></g><g><title>par_matvec::sparse_dense_impl::simple::hot_loop (193,273,646,499 samples, 89.61%)</title><rect x="6.4084%" y="997" width="89.6059%" height="15" fill="rgb(254,179,45)" fg:x="13822399729" fg:w="193273646499"/><text x="6.6584%" y="1007.50">par_matvec::sparse_dense_impl::simple::hot_loop</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (14,593,104,541 samples, 6.77%)</title><rect x="89.2486%" y="981" width="6.7657%" height="15" fill="rgb(226,14,10)" fg:x="192502941687" fg:w="14593104541"/><text x="89.4986%" y="991.50">core::ite..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (14,593,104,541 samples, 6.77%)</title><rect x="89.2486%" y="965" width="6.7657%" height="15" fill="rgb(244,27,41)" fg:x="192502941687" fg:w="14593104541"/><text x="89.4986%" y="975.50">&lt;core::op..</text></g><g><title>[libc.so.6] (206,948,738,280 samples, 95.95%)</title><rect x="0.0728%" y="1221" width="95.9459%" height="15" fill="rgb(235,35,32)" fg:x="157103769" fg:w="206948738280"/><text x="0.3228%" y="1231.50">[libc.so.6]</text></g><g><title>[libc.so.6] (206,938,077,857 samples, 95.94%)</title><rect x="0.0778%" y="1205" width="95.9410%" height="15" fill="rgb(218,68,31)" fg:x="167764192" fg:w="206938077857"/><text x="0.3278%" y="1215.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (206,886,459,878 samples, 95.92%)</title><rect x="0.1017%" y="1189" width="95.9171%" height="15" fill="rgb(207,120,37)" fg:x="219382171" fg:w="206886459878"/><text x="0.3517%" y="1199.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (34,689,452 samples, 0.02%)</title><rect x="96.4058%" y="1205" width="0.0161%" height="15" fill="rgb(227,98,0)" fg:x="207940661054" fg:w="34689452"/><text x="96.6558%" y="1215.50"></text></g><g><title>crossbeam_epoch::default::pin (34,689,452 samples, 0.02%)</title><rect x="96.4058%" y="1189" width="0.0161%" height="15" fill="rgb(207,7,3)" fg:x="207940661054" fg:w="34689452"/><text x="96.6558%" y="1199.50"></text></g><g><title>[unknown] (939,392,060 samples, 0.44%)</title><rect x="96.0188%" y="1221" width="0.4355%" height="15" fill="rgb(206,98,19)" fg:x="207105842049" fg:w="939392060"/><text x="96.2688%" y="1231.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (24,934,257 samples, 0.01%)</title><rect x="96.4578%" y="757" width="0.0116%" height="15" fill="rgb(217,5,26)" fg:x="208052805650" fg:w="24934257"/><text x="96.7078%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (24,934,257 samples, 0.01%)</title><rect x="96.4578%" y="741" width="0.0116%" height="15" fill="rgb(235,190,38)" fg:x="208052805650" fg:w="24934257"/><text x="96.7078%" y="751.50"></text></g><g><title>core::ptr::write (24,934,257 samples, 0.01%)</title><rect x="96.4578%" y="725" width="0.0116%" height="15" fill="rgb(247,86,24)" fg:x="208052805650" fg:w="24934257"/><text x="96.7078%" y="735.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (60,301,157 samples, 0.03%)</title><rect x="96.4578%" y="773" width="0.0280%" height="15" fill="rgb(205,101,16)" fg:x="208052805650" fg:w="60301157"/><text x="96.7078%" y="783.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market::_{{closure}} (35,366,900 samples, 0.02%)</title><rect x="96.4694%" y="757" width="0.0164%" height="15" fill="rgb(246,168,33)" fg:x="208077739907" fg:w="35366900"/><text x="96.7194%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (79,249,714 samples, 0.04%)</title><rect x="96.4578%" y="933" width="0.0367%" height="15" fill="rgb(231,114,1)" fg:x="208052805650" fg:w="79249714"/><text x="96.7078%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (79,249,714 samples, 0.04%)</title><rect x="96.4578%" y="917" width="0.0367%" height="15" fill="rgb(207,184,53)" fg:x="208052805650" fg:w="79249714"/><text x="96.7078%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (79,249,714 samples, 0.04%)</title><rect x="96.4578%" y="901" width="0.0367%" height="15" fill="rgb(224,95,51)" fg:x="208052805650" fg:w="79249714"/><text x="96.7078%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (79,249,714 samples, 0.04%)</title><rect x="96.4578%" y="885" width="0.0367%" height="15" fill="rgb(212,188,45)" fg:x="208052805650" fg:w="79249714"/><text x="96.7078%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (79,249,714 samples, 0.04%)</title><rect x="96.4578%" y="869" width="0.0367%" height="15" fill="rgb(223,154,38)" fg:x="208052805650" fg:w="79249714"/><text x="96.7078%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (79,249,714 samples, 0.04%)</title><rect x="96.4578%" y="853" width="0.0367%" height="15" fill="rgb(251,22,52)" fg:x="208052805650" fg:w="79249714"/><text x="96.7078%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (79,249,714 samples, 0.04%)</title><rect x="96.4578%" y="837" width="0.0367%" height="15" fill="rgb(229,209,22)" fg:x="208052805650" fg:w="79249714"/><text x="96.7078%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (79,249,714 samples, 0.04%)</title><rect x="96.4578%" y="821" width="0.0367%" height="15" fill="rgb(234,138,34)" fg:x="208052805650" fg:w="79249714"/><text x="96.7078%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (79,249,714 samples, 0.04%)</title><rect x="96.4578%" y="805" width="0.0367%" height="15" fill="rgb(212,95,11)" fg:x="208052805650" fg:w="79249714"/><text x="96.7078%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (79,249,714 samples, 0.04%)</title><rect x="96.4578%" y="789" width="0.0367%" height="15" fill="rgb(240,179,47)" fg:x="208052805650" fg:w="79249714"/><text x="96.7078%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (45,620,539 samples, 0.02%)</title><rect x="96.5106%" y="901" width="0.0212%" height="15" fill="rgb(240,163,11)" fg:x="208166733630" fg:w="45620539"/><text x="96.7606%" y="911.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::new_from_argsort_impl (257,004,028 samples, 0.12%)</title><rect x="96.4945%" y="917" width="0.1192%" height="15" fill="rgb(236,37,12)" fg:x="208132055364" fg:w="257004028"/><text x="96.7445%" y="927.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (159,643,818 samples, 0.07%)</title><rect x="96.5397%" y="901" width="0.0740%" height="15" fill="rgb(232,164,16)" fg:x="208229415574" fg:w="159643818"/><text x="96.7897%" y="911.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (148,109,460 samples, 0.07%)</title><rect x="96.5450%" y="885" width="0.0687%" height="15" fill="rgb(244,205,15)" fg:x="208240949932" fg:w="148109460"/><text x="96.7950%" y="895.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (147,187,758 samples, 0.07%)</title><rect x="96.6724%" y="901" width="0.0682%" height="15" fill="rgb(223,117,47)" fg:x="208515644591" fg:w="147187758"/><text x="96.9224%" y="911.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (55,585,734 samples, 0.03%)</title><rect x="96.7588%" y="789" width="0.0258%" height="15" fill="rgb(244,107,35)" fg:x="208702062471" fg:w="55585734"/><text x="97.0088%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (28,872,343 samples, 0.01%)</title><rect x="96.7712%" y="773" width="0.0134%" height="15" fill="rgb(205,140,8)" fg:x="208728775862" fg:w="28872343"/><text x="97.0212%" y="783.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (199,510,079 samples, 0.09%)</title><rect x="96.7453%" y="853" width="0.0925%" height="15" fill="rgb(228,84,46)" fg:x="208672913560" fg:w="199510079"/><text x="96.9953%" y="863.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (199,510,079 samples, 0.09%)</title><rect x="96.7453%" y="837" width="0.0925%" height="15" fill="rgb(254,188,9)" fg:x="208672913560" fg:w="199510079"/><text x="96.9953%" y="847.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (197,684,269 samples, 0.09%)</title><rect x="96.7461%" y="821" width="0.0917%" height="15" fill="rgb(206,112,54)" fg:x="208674739370" fg:w="197684269"/><text x="96.9961%" y="831.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (170,361,168 samples, 0.08%)</title><rect x="96.7588%" y="805" width="0.0790%" height="15" fill="rgb(216,84,49)" fg:x="208702062471" fg:w="170361168"/><text x="97.0088%" y="815.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (114,775,434 samples, 0.05%)</title><rect x="96.7846%" y="789" width="0.0532%" height="15" fill="rgb(214,194,35)" fg:x="208757648205" fg:w="114775434"/><text x="97.0346%" y="799.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (102,521,895 samples, 0.05%)</title><rect x="96.7903%" y="773" width="0.0475%" height="15" fill="rgb(249,28,3)" fg:x="208769901744" fg:w="102521895"/><text x="97.0403%" y="783.50"></text></g><g><title>core::intrinsics::copy (22,567,400 samples, 0.01%)</title><rect x="96.8503%" y="789" width="0.0105%" height="15" fill="rgb(222,56,52)" fg:x="208899307397" fg:w="22567400"/><text x="97.1003%" y="799.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (40,452,304 samples, 0.02%)</title><rect x="96.8607%" y="773" width="0.0188%" height="15" fill="rgb(245,217,50)" fg:x="208921874797" fg:w="40452304"/><text x="97.1107%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (35,981,181 samples, 0.02%)</title><rect x="96.8628%" y="757" width="0.0167%" height="15" fill="rgb(213,201,24)" fg:x="208926345920" fg:w="35981181"/><text x="97.1128%" y="767.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (255,158,606 samples, 0.12%)</title><rect x="96.8378%" y="837" width="0.1183%" height="15" fill="rgb(248,116,28)" fg:x="208872423639" fg:w="255158606"/><text x="97.0878%" y="847.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (255,158,606 samples, 0.12%)</title><rect x="96.8378%" y="821" width="0.1183%" height="15" fill="rgb(219,72,43)" fg:x="208872423639" fg:w="255158606"/><text x="97.0878%" y="831.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (255,158,606 samples, 0.12%)</title><rect x="96.8378%" y="805" width="0.1183%" height="15" fill="rgb(209,138,14)" fg:x="208872423639" fg:w="255158606"/><text x="97.0878%" y="815.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (205,707,448 samples, 0.10%)</title><rect x="96.8607%" y="789" width="0.0954%" height="15" fill="rgb(222,18,33)" fg:x="208921874797" fg:w="205707448"/><text x="97.1107%" y="799.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (165,255,144 samples, 0.08%)</title><rect x="96.8795%" y="773" width="0.0766%" height="15" fill="rgb(213,199,7)" fg:x="208962327101" fg:w="165255144"/><text x="97.1295%" y="783.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (142,892,644 samples, 0.07%)</title><rect x="96.8898%" y="757" width="0.0662%" height="15" fill="rgb(250,110,10)" fg:x="208984689601" fg:w="142892644"/><text x="97.1398%" y="767.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (44,697,144 samples, 0.02%)</title><rect x="96.9850%" y="757" width="0.0207%" height="15" fill="rgb(248,123,6)" fg:x="209189940549" fg:w="44697144"/><text x="97.2350%" y="767.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (267,979,039 samples, 0.12%)</title><rect x="96.9561%" y="821" width="0.1242%" height="15" fill="rgb(206,91,31)" fg:x="209127582245" fg:w="267979039"/><text x="97.2061%" y="831.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (267,979,039 samples, 0.12%)</title><rect x="96.9561%" y="805" width="0.1242%" height="15" fill="rgb(211,154,13)" fg:x="209127582245" fg:w="267979039"/><text x="97.2061%" y="815.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (267,979,039 samples, 0.12%)</title><rect x="96.9561%" y="789" width="0.1242%" height="15" fill="rgb(225,148,7)" fg:x="209127582245" fg:w="267979039"/><text x="97.2061%" y="799.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (205,620,735 samples, 0.10%)</title><rect x="96.9850%" y="773" width="0.0953%" height="15" fill="rgb(220,160,43)" fg:x="209189940549" fg:w="205620735"/><text x="97.2350%" y="783.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (160,923,591 samples, 0.07%)</title><rect x="97.0057%" y="757" width="0.0746%" height="15" fill="rgb(213,52,39)" fg:x="209234637693" fg:w="160923591"/><text x="97.2557%" y="767.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (151,971,909 samples, 0.07%)</title><rect x="97.0099%" y="741" width="0.0705%" height="15" fill="rgb(243,137,7)" fg:x="209243589375" fg:w="151971909"/><text x="97.2599%" y="751.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (35,683,505 samples, 0.02%)</title><rect x="97.0968%" y="741" width="0.0165%" height="15" fill="rgb(230,79,13)" fg:x="209431176544" fg:w="35683505"/><text x="97.3468%" y="751.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (183,056,467 samples, 0.08%)</title><rect x="97.0824%" y="805" width="0.0849%" height="15" fill="rgb(247,105,23)" fg:x="209400037119" fg:w="183056467"/><text x="97.3324%" y="815.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (183,056,467 samples, 0.08%)</title><rect x="97.0824%" y="789" width="0.0849%" height="15" fill="rgb(223,179,41)" fg:x="209400037119" fg:w="183056467"/><text x="97.3324%" y="799.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (183,056,467 samples, 0.08%)</title><rect x="97.0824%" y="773" width="0.0849%" height="15" fill="rgb(218,9,34)" fg:x="209400037119" fg:w="183056467"/><text x="97.3324%" y="783.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (151,917,042 samples, 0.07%)</title><rect x="97.0968%" y="757" width="0.0704%" height="15" fill="rgb(222,106,8)" fg:x="209431176544" fg:w="151917042"/><text x="97.3468%" y="767.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (116,233,537 samples, 0.05%)</title><rect x="97.1134%" y="741" width="0.0539%" height="15" fill="rgb(211,220,0)" fg:x="209466860049" fg:w="116233537"/><text x="97.3634%" y="751.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (84,921,896 samples, 0.04%)</title><rect x="97.1279%" y="725" width="0.0394%" height="15" fill="rgb(229,52,16)" fg:x="209498171690" fg:w="84921896"/><text x="97.3779%" y="735.50"></text></g><g><title>core::intrinsics::copy (40,272,486 samples, 0.02%)</title><rect x="97.1838%" y="741" width="0.0187%" height="15" fill="rgb(212,155,18)" fg:x="209618793084" fg:w="40272486"/><text x="97.4338%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (35,726,163 samples, 0.02%)</title><rect x="97.2108%" y="709" width="0.0166%" height="15" fill="rgb(242,21,14)" fg:x="209677029372" fg:w="35726163"/><text x="97.4608%" y="719.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (53,663,883 samples, 0.02%)</title><rect x="97.2067%" y="725" width="0.0249%" height="15" fill="rgb(222,19,48)" fg:x="209668031914" fg:w="53663883"/><text x="97.4567%" y="735.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (214,656,285 samples, 0.10%)</title><rect x="97.1735%" y="789" width="0.0995%" height="15" fill="rgb(232,45,27)" fg:x="209596435670" fg:w="214656285"/><text x="97.4235%" y="799.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (214,656,285 samples, 0.10%)</title><rect x="97.1735%" y="773" width="0.0995%" height="15" fill="rgb(249,103,42)" fg:x="209596435670" fg:w="214656285"/><text x="97.4235%" y="783.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (214,656,285 samples, 0.10%)</title><rect x="97.1735%" y="757" width="0.0995%" height="15" fill="rgb(246,81,33)" fg:x="209596435670" fg:w="214656285"/><text x="97.4235%" y="767.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (152,026,385 samples, 0.07%)</title><rect x="97.2025%" y="741" width="0.0705%" height="15" fill="rgb(252,33,42)" fg:x="209659065570" fg:w="152026385"/><text x="97.4525%" y="751.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (89,396,158 samples, 0.04%)</title><rect x="97.2315%" y="725" width="0.0414%" height="15" fill="rgb(209,212,41)" fg:x="209721695797" fg:w="89396158"/><text x="97.4815%" y="735.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (62,662,346 samples, 0.03%)</title><rect x="97.2439%" y="709" width="0.0291%" height="15" fill="rgb(207,154,6)" fg:x="209748429609" fg:w="62662346"/><text x="97.4939%" y="719.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (22,237,941 samples, 0.01%)</title><rect x="97.2751%" y="773" width="0.0103%" height="15" fill="rgb(223,64,47)" fg:x="209815579044" fg:w="22237941"/><text x="97.5251%" y="783.50"></text></g><g><title>core::intrinsics::copy (22,391,939 samples, 0.01%)</title><rect x="97.2936%" y="725" width="0.0104%" height="15" fill="rgb(211,161,38)" fg:x="209855611305" fg:w="22391939"/><text x="97.5436%" y="735.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (129,555,797 samples, 0.06%)</title><rect x="97.2854%" y="773" width="0.0601%" height="15" fill="rgb(219,138,40)" fg:x="209837816985" fg:w="129555797"/><text x="97.5354%" y="783.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (129,555,797 samples, 0.06%)</title><rect x="97.2854%" y="757" width="0.0601%" height="15" fill="rgb(241,228,46)" fg:x="209837816985" fg:w="129555797"/><text x="97.5354%" y="767.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (125,132,937 samples, 0.06%)</title><rect x="97.2874%" y="741" width="0.0580%" height="15" fill="rgb(223,209,38)" fg:x="209842239845" fg:w="125132937"/><text x="97.5374%" y="751.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (89,369,538 samples, 0.04%)</title><rect x="97.3040%" y="725" width="0.0414%" height="15" fill="rgb(236,164,45)" fg:x="209878003244" fg:w="89369538"/><text x="97.5540%" y="735.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (44,745,422 samples, 0.02%)</title><rect x="97.3247%" y="709" width="0.0207%" height="15" fill="rgb(231,15,5)" fg:x="209922627360" fg:w="44745422"/><text x="97.5747%" y="719.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (31,402,276 samples, 0.01%)</title><rect x="97.3309%" y="693" width="0.0146%" height="15" fill="rgb(252,35,15)" fg:x="209935970506" fg:w="31402276"/><text x="97.5809%" y="703.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (40,129,935 samples, 0.02%)</title><rect x="97.3454%" y="757" width="0.0186%" height="15" fill="rgb(248,181,18)" fg:x="209967372782" fg:w="40129935"/><text x="97.5954%" y="767.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (35,564,343 samples, 0.02%)</title><rect x="97.3910%" y="693" width="0.0165%" height="15" fill="rgb(233,39,42)" fg:x="210065579189" fg:w="35564343"/><text x="97.6410%" y="703.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (129,442,720 samples, 0.06%)</title><rect x="97.3640%" y="757" width="0.0600%" height="15" fill="rgb(238,110,33)" fg:x="210007502717" fg:w="129442720"/><text x="97.6140%" y="767.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (129,442,720 samples, 0.06%)</title><rect x="97.3640%" y="741" width="0.0600%" height="15" fill="rgb(233,195,10)" fg:x="210007502717" fg:w="129442720"/><text x="97.6140%" y="751.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (129,442,720 samples, 0.06%)</title><rect x="97.3640%" y="725" width="0.0600%" height="15" fill="rgb(254,105,3)" fg:x="210007502717" fg:w="129442720"/><text x="97.6140%" y="735.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (93,625,274 samples, 0.04%)</title><rect x="97.3807%" y="709" width="0.0434%" height="15" fill="rgb(221,225,9)" fg:x="210043320163" fg:w="93625274"/><text x="97.6307%" y="719.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (35,801,905 samples, 0.02%)</title><rect x="97.4075%" y="693" width="0.0166%" height="15" fill="rgb(224,227,45)" fg:x="210101143532" fg:w="35801905"/><text x="97.6575%" y="703.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (26,808,529 samples, 0.01%)</title><rect x="97.4116%" y="677" width="0.0124%" height="15" fill="rgb(229,198,43)" fg:x="210110136908" fg:w="26808529"/><text x="97.6616%" y="687.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (39,962,880 samples, 0.02%)</title><rect x="97.4323%" y="725" width="0.0185%" height="15" fill="rgb(206,209,35)" fg:x="210154664754" fg:w="39962880"/><text x="97.6823%" y="735.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (39,962,880 samples, 0.02%)</title><rect x="97.4323%" y="709" width="0.0185%" height="15" fill="rgb(245,195,53)" fg:x="210154664754" fg:w="39962880"/><text x="97.6823%" y="719.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (75,493,853 samples, 0.04%)</title><rect x="97.4241%" y="741" width="0.0350%" height="15" fill="rgb(240,92,26)" fg:x="210136945437" fg:w="75493853"/><text x="97.6741%" y="751.50"></text></g><g><title>core::intrinsics::copy (22,253,800 samples, 0.01%)</title><rect x="97.4673%" y="693" width="0.0103%" height="15" fill="rgb(207,40,23)" fg:x="210230251697" fg:w="22253800"/><text x="97.7173%" y="703.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (31,266,839 samples, 0.01%)</title><rect x="97.4941%" y="677" width="0.0145%" height="15" fill="rgb(223,111,35)" fg:x="210288111128" fg:w="31266839"/><text x="97.7441%" y="687.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (156,097,629 samples, 0.07%)</title><rect x="97.4591%" y="741" width="0.0724%" height="15" fill="rgb(229,147,28)" fg:x="210212439290" fg:w="156097629"/><text x="97.7091%" y="751.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (156,097,629 samples, 0.07%)</title><rect x="97.4591%" y="725" width="0.0724%" height="15" fill="rgb(211,29,28)" fg:x="210212439290" fg:w="156097629"/><text x="97.7091%" y="735.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (156,097,629 samples, 0.07%)</title><rect x="97.4591%" y="709" width="0.0724%" height="15" fill="rgb(228,72,33)" fg:x="210212439290" fg:w="156097629"/><text x="97.7091%" y="719.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (116,031,422 samples, 0.05%)</title><rect x="97.4776%" y="693" width="0.0538%" height="15" fill="rgb(205,214,31)" fg:x="210252505497" fg:w="116031422"/><text x="97.7276%" y="703.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (49,158,952 samples, 0.02%)</title><rect x="97.5086%" y="677" width="0.0228%" height="15" fill="rgb(224,111,15)" fg:x="210319377967" fg:w="49158952"/><text x="97.7586%" y="687.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (26,720,212 samples, 0.01%)</title><rect x="97.5190%" y="661" width="0.0124%" height="15" fill="rgb(253,21,26)" fg:x="210341816707" fg:w="26720212"/><text x="97.7690%" y="671.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (31,310,431 samples, 0.01%)</title><rect x="97.5481%" y="709" width="0.0145%" height="15" fill="rgb(245,139,43)" fg:x="210404389334" fg:w="31310431"/><text x="97.7981%" y="719.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (31,310,431 samples, 0.01%)</title><rect x="97.5481%" y="693" width="0.0145%" height="15" fill="rgb(252,170,7)" fg:x="210404389334" fg:w="31310431"/><text x="97.7981%" y="703.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (53,586,079 samples, 0.02%)</title><rect x="97.5398%" y="725" width="0.0248%" height="15" fill="rgb(231,118,14)" fg:x="210386581511" fg:w="53586079"/><text x="97.7898%" y="735.50"></text></g><g><title>core::intrinsics::copy (22,380,026 samples, 0.01%)</title><rect x="97.5749%" y="677" width="0.0104%" height="15" fill="rgb(238,83,0)" fg:x="210462361456" fg:w="22380026"/><text x="97.8249%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (22,533,229 samples, 0.01%)</title><rect x="97.6038%" y="645" width="0.0104%" height="15" fill="rgb(221,39,39)" fg:x="210524738482" fg:w="22533229"/><text x="97.8538%" y="655.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (44,874,197 samples, 0.02%)</title><rect x="97.5997%" y="661" width="0.0208%" height="15" fill="rgb(222,119,46)" fg:x="210515827543" fg:w="44874197"/><text x="97.8497%" y="671.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (138,496,655 samples, 0.06%)</title><rect x="97.5646%" y="725" width="0.0642%" height="15" fill="rgb(222,165,49)" fg:x="210440167590" fg:w="138496655"/><text x="97.8146%" y="735.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (138,496,655 samples, 0.06%)</title><rect x="97.5646%" y="709" width="0.0642%" height="15" fill="rgb(219,113,52)" fg:x="210440167590" fg:w="138496655"/><text x="97.8146%" y="719.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (134,071,121 samples, 0.06%)</title><rect x="97.5667%" y="693" width="0.0622%" height="15" fill="rgb(214,7,15)" fg:x="210444593124" fg:w="134071121"/><text x="97.8167%" y="703.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (93,922,763 samples, 0.04%)</title><rect x="97.5853%" y="677" width="0.0435%" height="15" fill="rgb(235,32,4)" fg:x="210484741482" fg:w="93922763"/><text x="97.8353%" y="687.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (22,414,657 samples, 0.01%)</title><rect x="97.6537%" y="693" width="0.0104%" height="15" fill="rgb(238,90,54)" fg:x="210632277252" fg:w="22414657"/><text x="97.9037%" y="703.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (22,414,657 samples, 0.01%)</title><rect x="97.6537%" y="677" width="0.0104%" height="15" fill="rgb(213,208,19)" fg:x="210632277252" fg:w="22414657"/><text x="97.9037%" y="687.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (62,647,721 samples, 0.03%)</title><rect x="97.6392%" y="709" width="0.0290%" height="15" fill="rgb(233,156,4)" fg:x="210600978960" fg:w="62647721"/><text x="97.8892%" y="719.50"></text></g><g><title>core::intrinsics::copy (22,375,624 samples, 0.01%)</title><rect x="97.6745%" y="661" width="0.0104%" height="15" fill="rgb(207,194,5)" fg:x="210677051757" fg:w="22375624"/><text x="97.9245%" y="671.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (98,178,989 samples, 0.05%)</title><rect x="97.6682%" y="709" width="0.0455%" height="15" fill="rgb(206,111,30)" fg:x="210663626681" fg:w="98178989"/><text x="97.9182%" y="719.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (98,178,989 samples, 0.05%)</title><rect x="97.6682%" y="693" width="0.0455%" height="15" fill="rgb(243,70,54)" fg:x="210663626681" fg:w="98178989"/><text x="97.9182%" y="703.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (98,178,989 samples, 0.05%)</title><rect x="97.6682%" y="677" width="0.0455%" height="15" fill="rgb(242,28,8)" fg:x="210663626681" fg:w="98178989"/><text x="97.9182%" y="687.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (57,946,828 samples, 0.03%)</title><rect x="97.6869%" y="661" width="0.0269%" height="15" fill="rgb(219,106,18)" fg:x="210703858842" fg:w="57946828"/><text x="97.9369%" y="671.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (26,764,069 samples, 0.01%)</title><rect x="97.7013%" y="645" width="0.0124%" height="15" fill="rgb(244,222,10)" fg:x="210735041601" fg:w="26764069"/><text x="97.9513%" y="655.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (26,764,069 samples, 0.01%)</title><rect x="97.7013%" y="629" width="0.0124%" height="15" fill="rgb(236,179,52)" fg:x="210735041601" fg:w="26764069"/><text x="97.9513%" y="639.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (22,308,502 samples, 0.01%)</title><rect x="97.7179%" y="677" width="0.0103%" height="15" fill="rgb(213,23,39)" fg:x="210770738960" fg:w="22308502"/><text x="97.9679%" y="687.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (62,521,586 samples, 0.03%)</title><rect x="97.7179%" y="693" width="0.0290%" height="15" fill="rgb(238,48,10)" fg:x="210770738960" fg:w="62521586"/><text x="97.9679%" y="703.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (71,928,255 samples, 0.03%)</title><rect x="97.7469%" y="693" width="0.0333%" height="15" fill="rgb(251,196,23)" fg:x="210833260546" fg:w="71928255"/><text x="97.9969%" y="703.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (71,928,255 samples, 0.03%)</title><rect x="97.7469%" y="677" width="0.0333%" height="15" fill="rgb(250,152,24)" fg:x="210833260546" fg:w="71928255"/><text x="97.9969%" y="687.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (62,929,116 samples, 0.03%)</title><rect x="97.7511%" y="661" width="0.0292%" height="15" fill="rgb(209,150,17)" fg:x="210842259685" fg:w="62929116"/><text x="98.0011%" y="671.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (44,870,904 samples, 0.02%)</title><rect x="97.7594%" y="645" width="0.0208%" height="15" fill="rgb(234,202,34)" fg:x="210860317897" fg:w="44870904"/><text x="98.0094%" y="655.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (44,626,681 samples, 0.02%)</title><rect x="97.7844%" y="677" width="0.0207%" height="15" fill="rgb(253,148,53)" fg:x="210914120304" fg:w="44626681"/><text x="98.0344%" y="687.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (62,690,664 samples, 0.03%)</title><rect x="97.8051%" y="677" width="0.0291%" height="15" fill="rgb(218,129,16)" fg:x="210958746985" fg:w="62690664"/><text x="98.0551%" y="687.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (58,239,571 samples, 0.03%)</title><rect x="97.8071%" y="661" width="0.0270%" height="15" fill="rgb(216,85,19)" fg:x="210963198078" fg:w="58239571"/><text x="98.0571%" y="671.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (58,239,571 samples, 0.03%)</title><rect x="97.8071%" y="645" width="0.0270%" height="15" fill="rgb(235,228,7)" fg:x="210963198078" fg:w="58239571"/><text x="98.0571%" y="655.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (53,804,955 samples, 0.02%)</title><rect x="97.8092%" y="629" width="0.0249%" height="15" fill="rgb(245,175,0)" fg:x="210967632694" fg:w="53804955"/><text x="98.0592%" y="639.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (49,171,850 samples, 0.02%)</title><rect x="97.8341%" y="661" width="0.0228%" height="15" fill="rgb(208,168,36)" fg:x="211021437649" fg:w="49171850"/><text x="98.0841%" y="671.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (35,860,985 samples, 0.02%)</title><rect x="97.8652%" y="645" width="0.0166%" height="15" fill="rgb(246,171,24)" fg:x="211088493326" fg:w="35860985"/><text x="98.1152%" y="655.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (26,831,958 samples, 0.01%)</title><rect x="97.8694%" y="629" width="0.0124%" height="15" fill="rgb(215,142,24)" fg:x="211097522353" fg:w="26831958"/><text x="98.1194%" y="639.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (26,831,958 samples, 0.01%)</title><rect x="97.8694%" y="613" width="0.0124%" height="15" fill="rgb(250,187,7)" fg:x="211097522353" fg:w="26831958"/><text x="98.1194%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (2,519,583,706 samples, 1.17%)</title><rect x="96.7448%" y="901" width="1.1681%" height="15" fill="rgb(228,66,33)" fg:x="208671924980" fg:w="2519583706"/><text x="96.9948%" y="911.50"></text></g><g><title>core::slice::sort::unstable::sort (2,519,583,706 samples, 1.17%)</title><rect x="96.7448%" y="885" width="1.1681%" height="15" fill="rgb(234,215,21)" fg:x="208671924980" fg:w="2519583706"/><text x="96.9948%" y="895.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,519,583,706 samples, 1.17%)</title><rect x="96.7448%" y="869" width="1.1681%" height="15" fill="rgb(222,191,20)" fg:x="208671924980" fg:w="2519583706"/><text x="96.9948%" y="879.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,319,085,047 samples, 1.08%)</title><rect x="96.8378%" y="853" width="1.0752%" height="15" fill="rgb(245,79,54)" fg:x="208872423639" fg:w="2319085047"/><text x="97.0878%" y="863.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,063,926,441 samples, 0.96%)</title><rect x="96.9561%" y="837" width="0.9569%" height="15" fill="rgb(240,10,37)" fg:x="209127582245" fg:w="2063926441"/><text x="97.2061%" y="847.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,795,947,402 samples, 0.83%)</title><rect x="97.0803%" y="821" width="0.8326%" height="15" fill="rgb(214,192,32)" fg:x="209395561284" fg:w="1795947402"/><text x="97.3303%" y="831.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,608,415,100 samples, 0.75%)</title><rect x="97.1673%" y="805" width="0.7457%" height="15" fill="rgb(209,36,54)" fg:x="209583093586" fg:w="1608415100"/><text x="97.4173%" y="815.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,380,416,731 samples, 0.64%)</title><rect x="97.2730%" y="789" width="0.6400%" height="15" fill="rgb(220,10,11)" fg:x="209811091955" fg:w="1380416731"/><text x="97.5230%" y="799.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,224,135,904 samples, 0.57%)</title><rect x="97.3454%" y="773" width="0.5675%" height="15" fill="rgb(221,106,17)" fg:x="209967372782" fg:w="1224135904"/><text x="97.5954%" y="783.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,054,563,249 samples, 0.49%)</title><rect x="97.4241%" y="757" width="0.4889%" height="15" fill="rgb(251,142,44)" fg:x="210136945437" fg:w="1054563249"/><text x="97.6741%" y="767.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (822,971,767 samples, 0.38%)</title><rect x="97.5314%" y="741" width="0.3815%" height="15" fill="rgb(238,13,15)" fg:x="210368536919" fg:w="822971767"/><text x="97.7814%" y="751.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (612,844,441 samples, 0.28%)</title><rect x="97.6288%" y="725" width="0.2841%" height="15" fill="rgb(208,107,27)" fg:x="210578664245" fg:w="612844441"/><text x="97.8788%" y="735.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (429,703,016 samples, 0.20%)</title><rect x="97.7138%" y="709" width="0.1992%" height="15" fill="rgb(205,136,37)" fg:x="210761805670" fg:w="429703016"/><text x="97.9638%" y="719.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (286,319,885 samples, 0.13%)</title><rect x="97.7802%" y="693" width="0.1327%" height="15" fill="rgb(250,205,27)" fg:x="210905188801" fg:w="286319885"/><text x="98.0302%" y="703.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (170,071,037 samples, 0.08%)</title><rect x="97.8341%" y="677" width="0.0788%" height="15" fill="rgb(210,80,43)" fg:x="211021437649" fg:w="170071037"/><text x="98.0841%" y="687.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (103,015,360 samples, 0.05%)</title><rect x="97.8652%" y="661" width="0.0478%" height="15" fill="rgb(247,160,36)" fg:x="211088493326" fg:w="103015360"/><text x="98.1152%" y="671.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (53,817,092 samples, 0.02%)</title><rect x="97.8880%" y="645" width="0.0250%" height="15" fill="rgb(234,13,49)" fg:x="211137691594" fg:w="53817092"/><text x="98.1380%" y="655.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (26,975,647 samples, 0.01%)</title><rect x="97.9005%" y="629" width="0.0125%" height="15" fill="rgb(234,122,0)" fg:x="211164533039" fg:w="26975647"/><text x="98.1505%" y="639.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (194,711,035 samples, 0.09%)</title><rect x="97.9213%" y="901" width="0.0903%" height="15" fill="rgb(207,146,38)" fg:x="211209477510" fg:w="194711035"/><text x="98.1713%" y="911.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets (3,299,369,321 samples, 1.53%)</title><rect x="96.4945%" y="933" width="1.5297%" height="15" fill="rgb(207,177,25)" fg:x="208132055364" fg:w="3299369321"/><text x="96.7445%" y="943.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl (3,042,365,293 samples, 1.41%)</title><rect x="96.6137%" y="917" width="1.4105%" height="15" fill="rgb(211,178,42)" fg:x="208389059392" fg:w="3042365293"/><text x="96.8637%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (45,986,550 samples, 0.02%)</title><rect x="98.0298%" y="901" width="0.0213%" height="15" fill="rgb(230,69,54)" fg:x="211443448586" fg:w="45986550"/><text x="98.2798%" y="911.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (283,683,463 samples, 0.13%)</title><rect x="98.1122%" y="725" width="0.1315%" height="15" fill="rgb(214,135,41)" fg:x="211621114530" fg:w="283683463"/><text x="98.3622%" y="735.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (283,683,463 samples, 0.13%)</title><rect x="98.1122%" y="709" width="0.1315%" height="15" fill="rgb(237,67,25)" fg:x="211621114530" fg:w="283683463"/><text x="98.3622%" y="719.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (283,683,463 samples, 0.13%)</title><rect x="98.1122%" y="693" width="0.1315%" height="15" fill="rgb(222,189,50)" fg:x="211621114530" fg:w="283683463"/><text x="98.3622%" y="703.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (283,683,463 samples, 0.13%)</title><rect x="98.1122%" y="677" width="0.1315%" height="15" fill="rgb(245,148,34)" fg:x="211621114530" fg:w="283683463"/><text x="98.3622%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (560,030,880 samples, 0.26%)</title><rect x="98.1005%" y="885" width="0.2596%" height="15" fill="rgb(222,29,6)" fg:x="211595981869" fg:w="560030880"/><text x="98.3505%" y="895.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (560,030,880 samples, 0.26%)</title><rect x="98.1005%" y="869" width="0.2596%" height="15" fill="rgb(221,189,43)" fg:x="211595981869" fg:w="560030880"/><text x="98.3505%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (560,030,880 samples, 0.26%)</title><rect x="98.1005%" y="853" width="0.2596%" height="15" fill="rgb(207,36,27)" fg:x="211595981869" fg:w="560030880"/><text x="98.3505%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (560,030,880 samples, 0.26%)</title><rect x="98.1005%" y="837" width="0.2596%" height="15" fill="rgb(217,90,24)" fg:x="211595981869" fg:w="560030880"/><text x="98.3505%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (560,030,880 samples, 0.26%)</title><rect x="98.1005%" y="821" width="0.2596%" height="15" fill="rgb(224,66,35)" fg:x="211595981869" fg:w="560030880"/><text x="98.3505%" y="831.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (539,059,102 samples, 0.25%)</title><rect x="98.1102%" y="805" width="0.2499%" height="15" fill="rgb(221,13,50)" fg:x="211616953647" fg:w="539059102"/><text x="98.3602%" y="815.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (539,059,102 samples, 0.25%)</title><rect x="98.1102%" y="789" width="0.2499%" height="15" fill="rgb(236,68,49)" fg:x="211616953647" fg:w="539059102"/><text x="98.3602%" y="799.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (534,898,219 samples, 0.25%)</title><rect x="98.1122%" y="773" width="0.2480%" height="15" fill="rgb(229,146,28)" fg:x="211621114530" fg:w="534898219"/><text x="98.3622%" y="783.50"></text></g><g><title>core::str::pattern::Searcher::next_match (534,898,219 samples, 0.25%)</title><rect x="98.1122%" y="757" width="0.2480%" height="15" fill="rgb(225,31,38)" fg:x="211621114530" fg:w="534898219"/><text x="98.3622%" y="767.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (534,898,219 samples, 0.25%)</title><rect x="98.1122%" y="741" width="0.2480%" height="15" fill="rgb(250,208,3)" fg:x="211621114530" fg:w="534898219"/><text x="98.3622%" y="751.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (251,214,756 samples, 0.12%)</title><rect x="98.2437%" y="725" width="0.1165%" height="15" fill="rgb(246,54,23)" fg:x="211904797993" fg:w="251214756"/><text x="98.4937%" y="735.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (251,214,756 samples, 0.12%)</title><rect x="98.2437%" y="709" width="0.1165%" height="15" fill="rgb(243,76,11)" fg:x="211904797993" fg:w="251214756"/><text x="98.4937%" y="719.50"></text></g><g><title>core::str::validations::next_code_point (251,214,756 samples, 0.12%)</title><rect x="98.2437%" y="693" width="0.1165%" height="15" fill="rgb(245,21,50)" fg:x="211904797993" fg:w="251214756"/><text x="98.4937%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24,866,146 samples, 0.01%)</title><rect x="98.3486%" y="677" width="0.0115%" height="15" fill="rgb(228,9,43)" fg:x="212131146603" fg:w="24866146"/><text x="98.5986%" y="687.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (47,389,909 samples, 0.02%)</title><rect x="98.4061%" y="805" width="0.0220%" height="15" fill="rgb(208,100,47)" fg:x="212255060703" fg:w="47389909"/><text x="98.6561%" y="815.50"></text></g><g><title>core::num::dec2flt::decimal::Decimal::try_fast_path (89,763,599 samples, 0.04%)</title><rect x="98.3923%" y="821" width="0.0416%" height="15" fill="rgb(232,26,8)" fg:x="212225371492" fg:w="89763599"/><text x="98.6423%" y="831.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (89,739,509 samples, 0.04%)</title><rect x="98.5198%" y="773" width="0.0416%" height="15" fill="rgb(216,166,38)" fg:x="212500321026" fg:w="89739509"/><text x="98.7698%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (60,224,293 samples, 0.03%)</title><rect x="98.5335%" y="757" width="0.0279%" height="15" fill="rgb(251,202,51)" fg:x="212529836242" fg:w="60224293"/><text x="98.7835%" y="767.50"></text></g><g><title>core::num::dec2flt::common::is_8digits (29,336,421 samples, 0.01%)</title><rect x="98.5732%" y="773" width="0.0136%" height="15" fill="rgb(254,216,34)" fg:x="212615499515" fg:w="29336421"/><text x="98.8232%" y="783.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (231,344,668 samples, 0.11%)</title><rect x="98.5002%" y="789" width="0.1073%" height="15" fill="rgb(251,32,27)" fg:x="212458112078" fg:w="231344668"/><text x="98.7502%" y="799.50"></text></g><g><title>core::num::dec2flt::parse::parse_8digits (44,620,810 samples, 0.02%)</title><rect x="98.5868%" y="773" width="0.0207%" height="15" fill="rgb(208,127,28)" fg:x="212644835936" fg:w="44620810"/><text x="98.8368%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (24,518,209 samples, 0.01%)</title><rect x="98.5961%" y="757" width="0.0114%" height="15" fill="rgb(224,137,22)" fg:x="212664938537" fg:w="24518209"/><text x="98.8461%" y="767.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (533,478,134 samples, 0.25%)</title><rect x="98.3640%" y="853" width="0.2473%" height="15" fill="rgb(254,70,32)" fg:x="212164412986" fg:w="533478134"/><text x="98.6140%" y="863.50"></text></g><g><title>core::num::dec2flt::dec2flt (510,418,264 samples, 0.24%)</title><rect x="98.3747%" y="837" width="0.2366%" height="15" fill="rgb(229,75,37)" fg:x="212187472856" fg:w="510418264"/><text x="98.6247%" y="847.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (370,192,684 samples, 0.17%)</title><rect x="98.4397%" y="821" width="0.1716%" height="15" fill="rgb(252,64,23)" fg:x="212327698436" fg:w="370192684"/><text x="98.6897%" y="831.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (298,887,467 samples, 0.14%)</title><rect x="98.4728%" y="805" width="0.1386%" height="15" fill="rgb(232,162,48)" fg:x="212399003653" fg:w="298887467"/><text x="98.7228%" y="815.50"></text></g><g><title>&lt;f64 as num_traits::Num&gt;::from_str_radix (546,078,871 samples, 0.25%)</title><rect x="98.3601%" y="885" width="0.2532%" height="15" fill="rgb(246,160,12)" fg:x="212156012749" fg:w="546078871"/><text x="98.6101%" y="895.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (537,678,634 samples, 0.25%)</title><rect x="98.3640%" y="869" width="0.2493%" height="15" fill="rgb(247,166,0)" fg:x="212164412986" fg:w="537678634"/><text x="98.6140%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (84,306,369 samples, 0.04%)</title><rect x="98.6133%" y="805" width="0.0391%" height="15" fill="rgb(249,219,21)" fg:x="212702091620" fg:w="84306369"/><text x="98.8633%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (84,306,369 samples, 0.04%)</title><rect x="98.6133%" y="789" width="0.0391%" height="15" fill="rgb(205,209,3)" fg:x="212702091620" fg:w="84306369"/><text x="98.8633%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (84,306,369 samples, 0.04%)</title><rect x="98.6133%" y="773" width="0.0391%" height="15" fill="rgb(243,44,1)" fg:x="212702091620" fg:w="84306369"/><text x="98.8633%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (84,306,369 samples, 0.04%)</title><rect x="98.6133%" y="757" width="0.0391%" height="15" fill="rgb(206,159,16)" fg:x="212702091620" fg:w="84306369"/><text x="98.8633%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (71,580,257 samples, 0.03%)</title><rect x="98.6192%" y="741" width="0.0332%" height="15" fill="rgb(244,77,30)" fg:x="212714817732" fg:w="71580257"/><text x="98.8692%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (71,580,257 samples, 0.03%)</title><rect x="98.6192%" y="725" width="0.0332%" height="15" fill="rgb(218,69,12)" fg:x="212714817732" fg:w="71580257"/><text x="98.8692%" y="735.50"></text></g><g><title>alloc::alloc::alloc (71,580,257 samples, 0.03%)</title><rect x="98.6192%" y="709" width="0.0332%" height="15" fill="rgb(212,87,7)" fg:x="212714817732" fg:w="71580257"/><text x="98.8692%" y="719.50"></text></g><g><title>malloc (54,709,255 samples, 0.03%)</title><rect x="98.6270%" y="693" width="0.0254%" height="15" fill="rgb(245,114,25)" fg:x="212731688734" fg:w="54709255"/><text x="98.8770%" y="703.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (96,968,036 samples, 0.04%)</title><rect x="98.6133%" y="885" width="0.0450%" height="15" fill="rgb(210,61,42)" fg:x="212702091620" fg:w="96968036"/><text x="98.8633%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (96,968,036 samples, 0.04%)</title><rect x="98.6133%" y="869" width="0.0450%" height="15" fill="rgb(211,52,33)" fg:x="212702091620" fg:w="96968036"/><text x="98.8633%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (96,968,036 samples, 0.04%)</title><rect x="98.6133%" y="853" width="0.0450%" height="15" fill="rgb(234,58,33)" fg:x="212702091620" fg:w="96968036"/><text x="98.8633%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (96,968,036 samples, 0.04%)</title><rect x="98.6133%" y="837" width="0.0450%" height="15" fill="rgb(220,115,36)" fg:x="212702091620" fg:w="96968036"/><text x="98.8633%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (96,968,036 samples, 0.04%)</title><rect x="98.6133%" y="821" width="0.0450%" height="15" fill="rgb(243,153,54)" fg:x="212702091620" fg:w="96968036"/><text x="98.8633%" y="831.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (109,509,682 samples, 0.05%)</title><rect x="98.6583%" y="885" width="0.0508%" height="15" fill="rgb(251,47,18)" fg:x="212799059656" fg:w="109509682"/><text x="98.9083%" y="895.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (109,509,682 samples, 0.05%)</title><rect x="98.6583%" y="869" width="0.0508%" height="15" fill="rgb(242,102,42)" fg:x="212799059656" fg:w="109509682"/><text x="98.9083%" y="879.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (109,509,682 samples, 0.05%)</title><rect x="98.6583%" y="853" width="0.0508%" height="15" fill="rgb(234,31,38)" fg:x="212799059656" fg:w="109509682"/><text x="98.9083%" y="863.50"></text></g><g><title>cfree (76,460,185 samples, 0.04%)</title><rect x="98.7130%" y="853" width="0.0354%" height="15" fill="rgb(221,117,51)" fg:x="212917018633" fg:w="76460185"/><text x="98.9630%" y="863.50"></text></g><g><title>matrix_market_rs::parse_coords_val (1,556,336,040 samples, 0.72%)</title><rect x="98.0531%" y="901" width="0.7216%" height="15" fill="rgb(212,20,18)" fg:x="211493641417" fg:w="1556336040"/><text x="98.3031%" y="911.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or (141,408,119 samples, 0.07%)</title><rect x="98.7090%" y="885" width="0.0656%" height="15" fill="rgb(245,133,36)" fg:x="212908569338" fg:w="141408119"/><text x="98.9590%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;f64,matrix_market_rs::MtxError&gt;&gt; (141,408,119 samples, 0.07%)</title><rect x="98.7090%" y="869" width="0.0656%" height="15" fill="rgb(212,6,19)" fg:x="212908569338" fg:w="141408119"/><text x="98.9590%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;matrix_market_rs::MtxError&gt; (56,498,639 samples, 0.03%)</title><rect x="98.7484%" y="853" width="0.0262%" height="15" fill="rgb(218,1,36)" fg:x="212993478818" fg:w="56498639"/><text x="98.9984%" y="863.50"></text></g><g><title>core::str::converts::from_utf8 (124,443,443 samples, 0.06%)</title><rect x="98.7951%" y="869" width="0.0577%" height="15" fill="rgb(246,84,54)" fg:x="213094249765" fg:w="124443443"/><text x="99.0451%" y="879.50"></text></g><g><title>core::str::validations::run_utf8_validation (107,736,719 samples, 0.05%)</title><rect x="98.8029%" y="853" width="0.0499%" height="15" fill="rgb(242,110,6)" fg:x="213110956489" fg:w="107736719"/><text x="99.0529%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (39,240,468 samples, 0.02%)</title><rect x="98.8781%" y="837" width="0.0182%" height="15" fill="rgb(214,47,5)" fg:x="213273304009" fg:w="39240468"/><text x="99.1281%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (39,240,468 samples, 0.02%)</title><rect x="98.8781%" y="821" width="0.0182%" height="15" fill="rgb(218,159,25)" fg:x="213273304009" fg:w="39240468"/><text x="99.1281%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (39,240,468 samples, 0.02%)</title><rect x="98.8781%" y="805" width="0.0182%" height="15" fill="rgb(215,211,28)" fg:x="213273304009" fg:w="39240468"/><text x="99.1281%" y="815.50"></text></g><g><title>matrix_market_rs::MtxData&lt;T,_&gt;::from_file (2,109,504,012 samples, 0.98%)</title><rect x="98.0257%" y="933" width="0.9780%" height="15" fill="rgb(238,59,32)" fg:x="211434604258" fg:w="2109504012"/><text x="98.2757%" y="943.50"></text></g><g><title>matrix_market_rs::parse_sparse_coo (2,109,504,012 samples, 0.98%)</title><rect x="98.0257%" y="917" width="0.9780%" height="15" fill="rgb(226,82,3)" fg:x="211434604258" fg:w="2109504012"/><text x="98.2757%" y="927.50"></text></g><g><title>std::io::BufRead::read_line (494,130,813 samples, 0.23%)</title><rect x="98.7746%" y="901" width="0.2291%" height="15" fill="rgb(240,164,32)" fg:x="213049977457" fg:w="494130813"/><text x="99.0246%" y="911.50"></text></g><g><title>std::io::append_to_string (481,486,800 samples, 0.22%)</title><rect x="98.7805%" y="885" width="0.2232%" height="15" fill="rgb(232,46,7)" fg:x="213062621470" fg:w="481486800"/><text x="99.0305%" y="895.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (325,415,062 samples, 0.15%)</title><rect x="98.8528%" y="869" width="0.1509%" height="15" fill="rgb(229,129,53)" fg:x="213218693208" fg:w="325415062"/><text x="99.1028%" y="879.50"></text></g><g><title>std::io::read_until (325,415,062 samples, 0.15%)</title><rect x="98.8528%" y="853" width="0.1509%" height="15" fill="rgb(234,188,29)" fg:x="213218693208" fg:w="325415062"/><text x="99.1028%" y="863.50"></text></g><g><title>core::slice::memchr::memchr (231,563,793 samples, 0.11%)</title><rect x="98.8963%" y="837" width="0.1074%" height="15" fill="rgb(246,141,4)" fg:x="213312544477" fg:w="231563793"/><text x="99.1463%" y="847.50"></text></g><g><title>core::slice::memchr::memchr_aligned (218,907,263 samples, 0.10%)</title><rect x="98.9022%" y="821" width="0.1015%" height="15" fill="rgb(229,23,39)" fg:x="213325201007" fg:w="218907263"/><text x="99.1522%" y="831.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (197,913,325 samples, 0.09%)</title><rect x="98.9119%" y="805" width="0.0918%" height="15" fill="rgb(206,12,3)" fg:x="213346194945" fg:w="197913325"/><text x="99.1619%" y="815.50"></text></g><g><title>core::slice::memchr::memchr_naive (101,071,213 samples, 0.05%)</title><rect x="98.9568%" y="789" width="0.0469%" height="15" fill="rgb(252,226,20)" fg:x="213443037057" fg:w="101071213"/><text x="99.2068%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (113,410,603 samples, 0.05%)</title><rect x="99.0175%" y="917" width="0.0526%" height="15" fill="rgb(216,123,35)" fg:x="213573940447" fg:w="113410603"/><text x="99.2675%" y="927.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market (5,685,654,915 samples, 2.64%)</title><rect x="96.4578%" y="949" width="2.6360%" height="15" fill="rgb(212,68,40)" fg:x="208052805650" fg:w="5685654915"/><text x="96.7078%" y="959.50">pa..</text></g><g><title>par_matvec::test_utils::mtx_data_to_nalgebra_coo (194,352,295 samples, 0.09%)</title><rect x="99.0037%" y="933" width="0.0901%" height="15" fill="rgb(254,125,32)" fg:x="213544108270" fg:w="194352295"/><text x="99.2537%" y="943.50"></text></g><g><title>nalgebra_sparse::coo::CooMatrix&lt;T&gt;::try_from_triplets (51,109,515 samples, 0.02%)</title><rect x="99.0701%" y="917" width="0.0237%" height="15" fill="rgb(253,97,22)" fg:x="213687351050" fg:w="51109515"/><text x="99.3201%" y="927.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (51,109,515 samples, 0.02%)</title><rect x="99.0701%" y="901" width="0.0237%" height="15" fill="rgb(241,101,14)" fg:x="213687351050" fg:w="51109515"/><text x="99.3201%" y="911.50"></text></g><g><title>faer::linalg::temp_mat_zeroed (1,336,939,058 samples, 0.62%)</title><rect x="99.0956%" y="901" width="0.6198%" height="15" fill="rgb(238,103,29)" fg:x="213742289575" fg:w="1336939058"/><text x="99.3456%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1,333,351,886 samples, 0.62%)</title><rect x="99.0972%" y="885" width="0.6182%" height="15" fill="rgb(233,195,47)" fg:x="213745876747" fg:w="1333351886"/><text x="99.3472%" y="895.50"></text></g><g><title>core::ptr::write (1,333,351,886 samples, 0.62%)</title><rect x="99.0972%" y="869" width="0.6182%" height="15" fill="rgb(246,218,30)" fg:x="213745876747" fg:w="1333351886"/><text x="99.3472%" y="879.50"></text></g><g><title>[libc.so.6] (1,333,351,886 samples, 0.62%)</title><rect x="99.0972%" y="853" width="0.6182%" height="15" fill="rgb(219,145,47)" fg:x="213745876747" fg:w="1333351886"/><text x="99.3472%" y="863.50"></text></g><g><title>faer::col::colmut::&lt;impl faer::col::generic::Col&lt;Inner&gt;&gt;::fill (276,792,576 samples, 0.13%)</title><rect x="99.7215%" y="789" width="0.1283%" height="15" fill="rgb(243,12,26)" fg:x="215092293532" fg:w="276792576"/><text x="99.9715%" y="799.50"></text></g><g><title>faer::linalg::zip::LastEq&lt;Rows,(),M&gt;::for_each (276,792,576 samples, 0.13%)</title><rect x="99.7215%" y="773" width="0.1283%" height="15" fill="rgb(214,87,16)" fg:x="215092293532" fg:w="276792576"/><text x="99.9715%" y="783.50"></text></g><g><title>faer::linalg::zip::for_each_col (276,792,576 samples, 0.13%)</title><rect x="99.7215%" y="757" width="0.1283%" height="15" fill="rgb(208,99,42)" fg:x="215092293532" fg:w="276792576"/><text x="99.9715%" y="767.50"></text></g><g><title>faer::linalg::zip::annotate_noalias_col (276,792,576 samples, 0.13%)</title><rect x="99.7215%" y="741" width="0.1283%" height="15" fill="rgb(253,99,2)" fg:x="215092293532" fg:w="276792576"/><text x="99.9715%" y="751.50"></text></g><g><title>faer::col::colmut::_&lt;impl faer::col::generic::Col&lt;Inner&gt;&gt;::fill::cloner::_{{closure}} (276,792,576 samples, 0.13%)</title><rect x="99.7215%" y="725" width="0.1283%" height="15" fill="rgb(220,168,23)" fg:x="215092293532" fg:w="276792576"/><text x="99.9715%" y="735.50"></text></g><g><title>[libc.so.6] (276,792,576 samples, 0.13%)</title><rect x="99.7215%" y="709" width="0.1283%" height="15" fill="rgb(242,38,24)" fg:x="215092293532" fg:w="276792576"/><text x="99.9715%" y="719.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (27,985,267 samples, 0.01%)</title><rect x="99.8531%" y="741" width="0.0130%" height="15" fill="rgb(225,182,9)" fg:x="215376152581" fg:w="27985267"/><text x="100.1031%" y="751.50"></text></g><g><title>pthread_create (21,789,996 samples, 0.01%)</title><rect x="99.8559%" y="725" width="0.0101%" height="15" fill="rgb(243,178,37)" fg:x="215382347852" fg:w="21789996"/><text x="100.1059%" y="735.50"></text></g><g><title>std::panic::catch_unwind (313,760,235 samples, 0.15%)</title><rect x="99.7215%" y="885" width="0.1455%" height="15" fill="rgb(232,139,19)" fg:x="215092293532" fg:w="313760235"/><text x="99.9715%" y="895.50"></text></g><g><title>std::panicking::try (313,760,235 samples, 0.15%)</title><rect x="99.7215%" y="869" width="0.1455%" height="15" fill="rgb(225,201,24)" fg:x="215092293532" fg:w="313760235"/><text x="99.9715%" y="879.50"></text></g><g><title>std::panicking::try::do_call (313,760,235 samples, 0.15%)</title><rect x="99.7215%" y="853" width="0.1455%" height="15" fill="rgb(221,47,46)" fg:x="215092293532" fg:w="313760235"/><text x="99.9715%" y="863.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (313,760,235 samples, 0.15%)</title><rect x="99.7215%" y="837" width="0.1455%" height="15" fill="rgb(249,23,13)" fg:x="215092293532" fg:w="313760235"/><text x="99.9715%" y="847.50"></text></g><g><title>std::thread::scoped::scope::_{{closure}} (313,760,235 samples, 0.15%)</title><rect x="99.7215%" y="821" width="0.1455%" height="15" fill="rgb(219,9,5)" fg:x="215092293532" fg:w="313760235"/><text x="99.9715%" y="831.50"></text></g><g><title>par_matvec::sparse_dense_impl::simple::par_sparse_dense::_{{closure}} (313,760,235 samples, 0.15%)</title><rect x="99.7215%" y="805" width="0.1455%" height="15" fill="rgb(254,171,16)" fg:x="215092293532" fg:w="313760235"/><text x="99.9715%" y="815.50"></text></g><g><title>std::thread::scoped::Scope::spawn (36,967,659 samples, 0.02%)</title><rect x="99.8498%" y="789" width="0.0171%" height="15" fill="rgb(230,171,20)" fg:x="215369086108" fg:w="36967659"/><text x="100.0998%" y="799.50"></text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (36,466,155 samples, 0.02%)</title><rect x="99.8500%" y="773" width="0.0169%" height="15" fill="rgb(210,71,41)" fg:x="215369587612" fg:w="36466155"/><text x="100.1000%" y="783.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (36,466,155 samples, 0.02%)</title><rect x="99.8500%" y="757" width="0.0169%" height="15" fill="rgb(206,173,20)" fg:x="215369587612" fg:w="36466155"/><text x="100.1000%" y="767.50"></text></g><g><title>par_matvec::spmv_drivers::sparse_dense_matmul (1,673,902,541 samples, 0.78%)</title><rect x="99.0944%" y="933" width="0.7761%" height="15" fill="rgb(233,88,34)" fg:x="213739813787" fg:w="1673902541"/><text x="99.3444%" y="943.50"></text></g><g><title>par_matvec::sparse_dense_impl::simple::par_sparse_dense (1,671,426,753 samples, 0.77%)</title><rect x="99.0956%" y="917" width="0.7749%" height="15" fill="rgb(223,209,46)" fg:x="213742289575" fg:w="1671426753"/><text x="99.3456%" y="927.50"></text></g><g><title>std::thread::scoped::scope (321,422,796 samples, 0.15%)</title><rect x="99.7215%" y="901" width="0.1490%" height="15" fill="rgb(250,43,18)" fg:x="215092293532" fg:w="321422796"/><text x="99.9715%" y="911.50"></text></g><g><title>_start (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1221" width="3.4135%" height="15" fill="rgb(208,13,10)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1231.50">_st..</text></g><g><title>__libc_start_main (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1205" width="3.4135%" height="15" fill="rgb(212,200,36)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1215.50">__l..</text></g><g><title>[libc.so.6] (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1189" width="3.4135%" height="15" fill="rgb(225,90,30)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1199.50">[li..</text></g><g><title>main (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1173" width="3.4135%" height="15" fill="rgb(236,182,39)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1183.50">main</text></g><g><title>std::rt::lang_start_internal (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1157" width="3.4135%" height="15" fill="rgb(212,144,35)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1167.50">std..</text></g><g><title>std::panic::catch_unwind (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1141" width="3.4135%" height="15" fill="rgb(228,63,44)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1151.50">std..</text></g><g><title>std::panicking::try (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1125" width="3.4135%" height="15" fill="rgb(228,109,6)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1135.50">std..</text></g><g><title>std::panicking::try::do_call (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1109" width="3.4135%" height="15" fill="rgb(238,117,24)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1119.50">std..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1093" width="3.4135%" height="15" fill="rgb(242,26,26)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1103.50">std..</text></g><g><title>std::panic::catch_unwind (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1077" width="3.4135%" height="15" fill="rgb(221,92,48)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1087.50">std..</text></g><g><title>std::panicking::try (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1061" width="3.4135%" height="15" fill="rgb(209,209,32)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1071.50">std..</text></g><g><title>std::panicking::try::do_call (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1045" width="3.4135%" height="15" fill="rgb(221,70,22)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1055.50">std..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1029" width="3.4135%" height="15" fill="rgb(248,145,5)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1039.50">cor..</text></g><g><title>std::rt::lang_start::_{{closure}} (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="1013" width="3.4135%" height="15" fill="rgb(226,116,26)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1023.50">std..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="997" width="3.4135%" height="15" fill="rgb(244,5,17)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="1007.50">std..</text></g><g><title>core::ops::function::FnOnce::call_once (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="981" width="3.4135%" height="15" fill="rgb(252,159,33)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="991.50">cor..</text></g><g><title>profile_spmv::main (7,362,723,595 samples, 3.41%)</title><rect x="96.4578%" y="965" width="3.4135%" height="15" fill="rgb(206,71,0)" fg:x="208052805650" fg:w="7362723595"/><text x="96.7078%" y="975.50">pro..</text></g><g><title>profile_spmv::profile_sparse_dense_simple (1,677,068,680 samples, 0.78%)</title><rect x="99.0938%" y="949" width="0.7775%" height="15" fill="rgb(233,118,54)" fg:x="213738460565" fg:w="1677068680"/><text x="99.3438%" y="959.50"></text></g><g><title>core::slice::memchr::memchr_aligned (29,350,803 samples, 0.01%)</title><rect x="99.8807%" y="1221" width="0.0136%" height="15" fill="rgb(234,83,48)" fg:x="215435739421" fg:w="29350803"/><text x="100.1307%" y="1231.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (49,719,825 samples, 0.02%)</title><rect x="99.9115%" y="1221" width="0.0231%" height="15" fill="rgb(228,3,54)" fg:x="215502230861" fg:w="49719825"/><text x="100.1615%" y="1231.50"></text></g><g><title>crossbeam_epoch::default::with_handle (47,684,375 samples, 0.02%)</title><rect x="99.9368%" y="1221" width="0.0221%" height="15" fill="rgb(226,155,13)" fg:x="215556685598" fg:w="47684375"/><text x="100.1868%" y="1231.50"></text></g><g><title>std::io::append_to_string (46,427,517 samples, 0.02%)</title><rect x="99.9723%" y="1221" width="0.0215%" height="15" fill="rgb(241,28,37)" fg:x="215633382353" fg:w="46427517"/><text x="100.2223%" y="1231.50"></text></g><g><title>all (215,693,071,492 samples, 100%)</title><rect x="0.0000%" y="1253" width="100.0000%" height="15" fill="rgb(233,93,10)" fg:x="0" fg:w="215693071492"/><text x="0.2500%" y="1263.50"></text></g><g><title>profile_spmv (215,581,462,976 samples, 99.95%)</title><rect x="0.0517%" y="1237" width="99.9483%" height="15" fill="rgb(225,113,19)" fg:x="111608516" fg:w="215581462976"/><text x="0.3017%" y="1247.50">profile_spmv</text></g></svg></svg>