<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="236048573783"><g><title>&lt;f64 as num_traits::Num&gt;::from_str_radix (23,785,011 samples, 0.01%)</title><rect x="0.0000%" y="645" width="0.0101%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="23785011"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (1,477,299,587 samples, 0.63%)</title><rect x="31.2093%" y="421" width="0.6258%" height="15" fill="rgb(217,0,24)" fg:x="73669166890" fg:w="1477299587"/><text x="31.4593%" y="431.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (1,477,299,587 samples, 0.63%)</title><rect x="31.2093%" y="405" width="0.6258%" height="15" fill="rgb(221,193,54)" fg:x="73669166890" fg:w="1477299587"/><text x="31.4593%" y="415.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (1,477,299,587 samples, 0.63%)</title><rect x="31.2093%" y="389" width="0.6258%" height="15" fill="rgb(248,212,6)" fg:x="73669166890" fg:w="1477299587"/><text x="31.4593%" y="399.50"></text></g><g><title>&lt;Lhs as faer_traits::MulByRef&lt;Rhs&gt;&gt;::mul_by_ref (4,874,995,752 samples, 2.07%)</title><rect x="31.8352%" y="421" width="2.0653%" height="15" fill="rgb(208,68,35)" fg:x="75146466477" fg:w="4874995752"/><text x="32.0852%" y="431.50">&lt;..</text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&gt;::mul (4,874,995,752 samples, 2.07%)</title><rect x="31.8352%" y="405" width="2.0653%" height="15" fill="rgb(232,128,0)" fg:x="75146466477" fg:w="4874995752"/><text x="32.0852%" y="415.50">&lt;..</text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (4,874,995,752 samples, 2.07%)</title><rect x="31.8352%" y="389" width="2.0653%" height="15" fill="rgb(207,160,47)" fg:x="75146466477" fg:w="4874995752"/><text x="32.0852%" y="399.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (283,203,087 samples, 0.12%)</title><rect x="33.9004%" y="421" width="0.1200%" height="15" fill="rgb(228,23,34)" fg:x="80021462229" fg:w="283203087"/><text x="34.1504%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (283,203,087 samples, 0.12%)</title><rect x="33.9004%" y="405" width="0.1200%" height="15" fill="rgb(218,30,26)" fg:x="80021462229" fg:w="283203087"/><text x="34.1504%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (253,968,396 samples, 0.11%)</title><rect x="34.0204%" y="421" width="0.1076%" height="15" fill="rgb(220,122,19)" fg:x="80304665316" fg:w="253968396"/><text x="34.2704%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (253,968,396 samples, 0.11%)</title><rect x="34.0204%" y="405" width="0.1076%" height="15" fill="rgb(250,228,42)" fg:x="80304665316" fg:w="253968396"/><text x="34.2704%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (253,968,396 samples, 0.11%)</title><rect x="34.0204%" y="389" width="0.1076%" height="15" fill="rgb(240,193,28)" fg:x="80304665316" fg:w="253968396"/><text x="34.2704%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (136,729,801 samples, 0.06%)</title><rect x="34.1303%" y="421" width="0.0579%" height="15" fill="rgb(216,20,37)" fg:x="80564054685" fg:w="136729801"/><text x="34.3803%" y="431.50"></text></g><g><title>core::ptr::write (99,819,484 samples, 0.04%)</title><rect x="34.1459%" y="405" width="0.0423%" height="15" fill="rgb(206,188,39)" fg:x="80600965002" fg:w="99819484"/><text x="34.3959%" y="415.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (11,175,130,381 samples, 4.73%)</title><rect x="34.1910%" y="421" width="4.7343%" height="15" fill="rgb(217,207,13)" fg:x="80707305895" fg:w="11175130381"/><text x="34.4410%" y="431.50">core::..</text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::current_len (28,715,036 samples, 0.01%)</title><rect x="38.9317%" y="181" width="0.0122%" height="15" fill="rgb(231,73,38)" fg:x="91897613747" fg:w="28715036"/><text x="39.1817%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (85,749,680 samples, 0.04%)</title><rect x="38.9306%" y="213" width="0.0363%" height="15" fill="rgb(225,20,46)" fg:x="91895106227" fg:w="85749680"/><text x="39.1806%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (85,749,680 samples, 0.04%)</title><rect x="38.9306%" y="197" width="0.0363%" height="15" fill="rgb(210,31,41)" fg:x="91895106227" fg:w="85749680"/><text x="39.1806%" y="207.50"></text></g><g><title>core::ptr::write (42,730,380 samples, 0.02%)</title><rect x="38.9488%" y="181" width="0.0181%" height="15" fill="rgb(221,200,47)" fg:x="91938125527" fg:w="42730380"/><text x="39.1988%" y="191.50"></text></g><g><title>&lt;Lhs as faer_traits::MulByRef&lt;Rhs&gt;&gt;::mul_by_ref (41,929,950 samples, 0.02%)</title><rect x="38.9721%" y="197" width="0.0178%" height="15" fill="rgb(226,26,5)" fg:x="91993148993" fg:w="41929950"/><text x="39.2221%" y="207.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&gt;::mul (41,929,950 samples, 0.02%)</title><rect x="38.9721%" y="181" width="0.0178%" height="15" fill="rgb(249,33,26)" fg:x="91993148993" fg:w="41929950"/><text x="39.2221%" y="191.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (41,929,950 samples, 0.02%)</title><rect x="38.9721%" y="165" width="0.0178%" height="15" fill="rgb(235,183,28)" fg:x="91993148993" fg:w="41929950"/><text x="39.2221%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (218,588,938 samples, 0.09%)</title><rect x="38.9252%" y="421" width="0.0926%" height="15" fill="rgb(221,5,38)" fg:x="91882436276" fg:w="218588938"/><text x="39.1752%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (218,588,938 samples, 0.09%)</title><rect x="38.9252%" y="405" width="0.0926%" height="15" fill="rgb(247,18,42)" fg:x="91882436276" fg:w="218588938"/><text x="39.1752%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (218,588,938 samples, 0.09%)</title><rect x="38.9252%" y="389" width="0.0926%" height="15" fill="rgb(241,131,45)" fg:x="91882436276" fg:w="218588938"/><text x="39.1752%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (218,588,938 samples, 0.09%)</title><rect x="38.9252%" y="373" width="0.0926%" height="15" fill="rgb(249,31,29)" fg:x="91882436276" fg:w="218588938"/><text x="39.1752%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (218,588,938 samples, 0.09%)</title><rect x="38.9252%" y="357" width="0.0926%" height="15" fill="rgb(225,111,53)" fg:x="91882436276" fg:w="218588938"/><text x="39.1752%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (218,588,938 samples, 0.09%)</title><rect x="38.9252%" y="341" width="0.0926%" height="15" fill="rgb(238,160,17)" fg:x="91882436276" fg:w="218588938"/><text x="39.1752%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (218,588,938 samples, 0.09%)</title><rect x="38.9252%" y="325" width="0.0926%" height="15" fill="rgb(214,148,48)" fg:x="91882436276" fg:w="218588938"/><text x="39.1752%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (218,588,938 samples, 0.09%)</title><rect x="38.9252%" y="309" width="0.0926%" height="15" fill="rgb(232,36,49)" fg:x="91882436276" fg:w="218588938"/><text x="39.1752%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (218,588,938 samples, 0.09%)</title><rect x="38.9252%" y="293" width="0.0926%" height="15" fill="rgb(209,103,24)" fg:x="91882436276" fg:w="218588938"/><text x="39.1752%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (218,588,938 samples, 0.09%)</title><rect x="38.9252%" y="277" width="0.0926%" height="15" fill="rgb(229,88,8)" fg:x="91882436276" fg:w="218588938"/><text x="39.1752%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (218,588,938 samples, 0.09%)</title><rect x="38.9252%" y="261" width="0.0926%" height="15" fill="rgb(213,181,19)" fg:x="91882436276" fg:w="218588938"/><text x="39.1752%" y="271.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (205,918,987 samples, 0.09%)</title><rect x="38.9306%" y="245" width="0.0872%" height="15" fill="rgb(254,191,54)" fg:x="91895106227" fg:w="205918987"/><text x="39.1806%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (205,918,987 samples, 0.09%)</title><rect x="38.9306%" y="229" width="0.0872%" height="15" fill="rgb(241,83,37)" fg:x="91895106227" fg:w="205918987"/><text x="39.1806%" y="239.50"></text></g><g><title>par_matvec::sparse_dense_impl::merge::par_sparse_dense::_{{closure}}::_{{closure}}::_{{closure}} (120,169,307 samples, 0.05%)</title><rect x="38.9669%" y="213" width="0.0509%" height="15" fill="rgb(233,36,39)" fg:x="91980855907" fg:w="120169307"/><text x="39.2169%" y="223.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::col_range (48,320,735 samples, 0.02%)</title><rect x="38.9974%" y="197" width="0.0205%" height="15" fill="rgb(226,3,54)" fg:x="92052704479" fg:w="48320735"/><text x="39.2474%" y="207.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::col_range_unchecked (47,819,231 samples, 0.02%)</title><rect x="38.9976%" y="181" width="0.0203%" height="15" fill="rgb(245,192,40)" fg:x="92053205983" fg:w="47819231"/><text x="39.2476%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (86,939,708 samples, 0.04%)</title><rect x="39.0178%" y="421" width="0.0368%" height="15" fill="rgb(238,167,29)" fg:x="92101025214" fg:w="86939708"/><text x="39.2678%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (106,194,101 samples, 0.04%)</title><rect x="39.0563%" y="421" width="0.0450%" height="15" fill="rgb(232,182,51)" fg:x="92191740899" fg:w="106194101"/><text x="39.3063%" y="431.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialOrd&gt;::partial_cmp (446,461,683 samples, 0.19%)</title><rect x="39.1559%" y="373" width="0.1891%" height="15" fill="rgb(231,60,39)" fg:x="92426909958" fg:w="446461683"/><text x="39.4059%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::gt (451,675,272 samples, 0.19%)</title><rect x="39.1559%" y="389" width="0.1913%" height="15" fill="rgb(208,69,12)" fg:x="92426909958" fg:w="451675272"/><text x="39.4059%" y="399.50"></text></g><g><title>par_matvec::sparse_dense_impl::merge::LoserTree&lt;T&gt;::new (587,438,120 samples, 0.25%)</title><rect x="39.1012%" y="421" width="0.2489%" height="15" fill="rgb(235,93,37)" fg:x="92297935000" fg:w="587438120"/><text x="39.3512%" y="431.50"></text></g><g><title>par_matvec::sparse_dense_impl::merge::LoserTree&lt;T&gt;::build_tournament (582,291,560 samples, 0.25%)</title><rect x="39.1034%" y="405" width="0.2467%" height="15" fill="rgb(213,116,39)" fg:x="92303081560" fg:w="582291560"/><text x="39.3534%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1,154,826,245 samples, 0.49%)</title><rect x="43.5713%" y="405" width="0.4892%" height="15" fill="rgb(222,207,29)" fg:x="102849475864" fg:w="1154826245"/><text x="43.8213%" y="415.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialOrd&gt;::partial_cmp (19,122,931,916 samples, 8.10%)</title><rect x="78.5512%" y="373" width="8.1013%" height="15" fill="rgb(206,96,30)" fg:x="185418893911" fg:w="19122931916"/><text x="78.8012%" y="383.50">&lt;core::opti..</text></g><g><title>&lt;par_matvec::sparse_dense_impl::merge::Contender&lt;T&gt; as core::cmp::PartialOrd&gt;::partial_cmp (629,654,839 samples, 0.27%)</title><rect x="86.3857%" y="357" width="0.2667%" height="15" fill="rgb(218,138,4)" fg:x="203912170988" fg:w="629654839"/><text x="86.6357%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (629,654,839 samples, 0.27%)</title><rect x="86.3857%" y="341" width="0.2667%" height="15" fill="rgb(250,191,14)" fg:x="203912170988" fg:w="629654839"/><text x="86.6357%" y="351.50"></text></g><g><title>par_matvec::sparse_dense_impl::merge::LoserTree&lt;T&gt;::push (126,607,037,857 samples, 53.64%)</title><rect x="39.3501%" y="421" width="53.6360%" height="15" fill="rgb(239,60,40)" fg:x="92885373120" fg:w="126607037857"/><text x="39.6001%" y="431.50">par_matvec::sparse_dense_impl::merge::LoserTree&lt;T&gt;::push</text></g><g><title>par_matvec::sparse_dense_impl::merge::LoserTree&lt;T&gt;::adjust_from_leaf (115,488,108,868 samples, 48.93%)</title><rect x="44.0606%" y="405" width="48.9256%" height="15" fill="rgb(206,27,48)" fg:x="104004302109" fg:w="115488108868"/><text x="44.3106%" y="415.50">par_matvec::sparse_dense_impl::merge::LoserTree&lt;T&gt;::adjust_from_leaf</text></g><g><title>core::cmp::PartialOrd::lt (34,073,517,066 samples, 14.43%)</title><rect x="78.5512%" y="389" width="14.4350%" height="15" fill="rgb(225,35,8)" fg:x="185418893911" fg:w="34073517066"/><text x="78.8012%" y="399.50">core::cmp::PartialOrd:..</text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (14,950,585,150 samples, 6.33%)</title><rect x="86.6524%" y="373" width="6.3337%" height="15" fill="rgb(250,213,24)" fg:x="204541825827" fg:w="14950585150"/><text x="86.9024%" y="383.50">core::op..</text></g><g><title>core::ops::function::FnOnce::call_once (14,950,585,150 samples, 6.33%)</title><rect x="86.6524%" y="357" width="6.3337%" height="15" fill="rgb(247,123,22)" fg:x="204541825827" fg:w="14950585150"/><text x="86.9024%" y="367.50">core::op..</text></g><g><title>core::cmp::Ordering::is_lt (14,950,585,150 samples, 6.33%)</title><rect x="86.6524%" y="341" width="6.3337%" height="15" fill="rgb(231,138,38)" fg:x="204541825827" fg:w="14950585150"/><text x="86.9024%" y="351.50">core::cm..</text></g><g><title>[libc.so.6] (224,764,242,952 samples, 95.22%)</title><rect x="0.0101%" y="645" width="95.2195%" height="15" fill="rgb(231,145,46)" fg:x="23785011" fg:w="224764242952"/><text x="0.2601%" y="655.50">[libc.so.6]</text></g><g><title>[libc.so.6] (224,755,765,059 samples, 95.22%)</title><rect x="0.0137%" y="629" width="95.2159%" height="15" fill="rgb(251,118,11)" fg:x="32262904" fg:w="224755765059"/><text x="0.2637%" y="639.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (224,747,859,900 samples, 95.21%)</title><rect x="0.0170%" y="613" width="95.2125%" height="15" fill="rgb(217,147,25)" fg:x="40168063" fg:w="224747859900"/><text x="0.2670%" y="623.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (224,747,859,900 samples, 95.21%)</title><rect x="0.0170%" y="597" width="95.2125%" height="15" fill="rgb(247,81,37)" fg:x="40168063" fg:w="224747859900"/><text x="0.2670%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (224,747,859,900 samples, 95.21%)</title><rect x="0.0170%" y="581" width="95.2125%" height="15" fill="rgb(209,12,38)" fg:x="40168063" fg:w="224747859900"/><text x="0.2670%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (224,747,859,900 samples, 95.21%)</title><rect x="0.0170%" y="565" width="95.2125%" height="15" fill="rgb(227,1,9)" fg:x="40168063" fg:w="224747859900"/><text x="0.2670%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (224,747,859,900 samples, 95.21%)</title><rect x="0.0170%" y="549" width="95.2125%" height="15" fill="rgb(248,47,43)" fg:x="40168063" fg:w="224747859900"/><text x="0.2670%" y="559.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (224,747,859,900 samples, 95.21%)</title><rect x="0.0170%" y="533" width="95.2125%" height="15" fill="rgb(221,10,30)" fg:x="40168063" fg:w="224747859900"/><text x="0.2670%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (224,747,859,900 samples, 95.21%)</title><rect x="0.0170%" y="517" width="95.2125%" height="15" fill="rgb(210,229,1)" fg:x="40168063" fg:w="224747859900"/><text x="0.2670%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (224,747,859,900 samples, 95.21%)</title><rect x="0.0170%" y="501" width="95.2125%" height="15" fill="rgb(222,148,37)" fg:x="40168063" fg:w="224747859900"/><text x="0.2670%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (224,747,859,900 samples, 95.21%)</title><rect x="0.0170%" y="485" width="95.2125%" height="15" fill="rgb(234,67,33)" fg:x="40168063" fg:w="224747859900"/><text x="0.2670%" y="495.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (224,747,859,900 samples, 95.21%)</title><rect x="0.0170%" y="469" width="95.2125%" height="15" fill="rgb(247,98,35)" fg:x="40168063" fg:w="224747859900"/><text x="0.2670%" y="479.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (224,747,859,900 samples, 95.21%)</title><rect x="0.0170%" y="453" width="95.2125%" height="15" fill="rgb(247,138,52)" fg:x="40168063" fg:w="224747859900"/><text x="0.2670%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>par_matvec::sparse_dense_impl::merge::par_sparse_dense::_{{closure}}::_{{closure}} (224,747,859,900 samples, 95.21%)</title><rect x="0.0170%" y="437" width="95.2125%" height="15" fill="rgb(213,79,30)" fg:x="40168063" fg:w="224747859900"/><text x="0.2670%" y="447.50">par_matvec::sparse_dense_impl::merge::par_sparse_dense::_{{closure}}::_{{closure}}</text></g><g><title>par_matvec::sparse_dense_impl::merge::LoserTree&lt;T&gt;::winner (5,295,616,986 samples, 2.24%)</title><rect x="92.9861%" y="421" width="2.2434%" height="15" fill="rgb(246,177,23)" fg:x="219492410977" fg:w="5295616986"/><text x="93.2361%" y="431.50">p..</text></g><g><title>core::option::Option&lt;T&gt;::take (4,370,097,408 samples, 1.85%)</title><rect x="93.3782%" y="405" width="1.8514%" height="15" fill="rgb(230,62,27)" fg:x="220417930555" fg:w="4370097408"/><text x="93.6282%" y="415.50">c..</text></g><g><title>core::mem::replace (4,370,097,408 samples, 1.85%)</title><rect x="93.3782%" y="389" width="1.8514%" height="15" fill="rgb(216,154,8)" fg:x="220417930555" fg:w="4370097408"/><text x="93.6282%" y="399.50">c..</text></g><g><title>matrix_market_rs::parse_coords_val (43,725,427 samples, 0.02%)</title><rect x="95.3454%" y="613" width="0.0185%" height="15" fill="rgb(244,35,45)" fg:x="225061398896" fg:w="43725427"/><text x="95.5954%" y="623.50"></text></g><g><title>matrix_market_rs::parse_sparse_coo (47,697,050 samples, 0.02%)</title><rect x="95.3454%" y="629" width="0.0202%" height="15" fill="rgb(251,115,12)" fg:x="225061398896" fg:w="47697050"/><text x="95.5954%" y="639.50"></text></g><g><title>par_matvec::sparse_dense_impl::merge::LoserTree&lt;T&gt;::push (1,133,595,386 samples, 0.48%)</title><rect x="95.3656%" y="629" width="0.4802%" height="15" fill="rgb(240,54,50)" fg:x="225109095946" fg:w="1133595386"/><text x="95.6156%" y="639.50"></text></g><g><title>[unknown] (2,361,015,892 samples, 1.00%)</title><rect x="95.2296%" y="645" width="1.0002%" height="15" fill="rgb(233,84,52)" fg:x="224788027963" fg:w="2361015892"/><text x="95.4796%" y="655.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (891,136,800 samples, 0.38%)</title><rect x="95.8523%" y="629" width="0.3775%" height="15" fill="rgb(207,117,47)" fg:x="226257907055" fg:w="891136800"/><text x="96.1023%" y="639.50"></text></g><g><title>par_matvec::sparse_dense_impl::merge::par_sparse_dense::_{{closure}}::_{{closure}} (891,136,800 samples, 0.38%)</title><rect x="95.8523%" y="613" width="0.3775%" height="15" fill="rgb(249,43,39)" fg:x="226257907055" fg:w="891136800"/><text x="96.1023%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (37,237,665 samples, 0.02%)</title><rect x="96.2298%" y="181" width="0.0158%" height="15" fill="rgb(209,38,44)" fg:x="227149043855" fg:w="37237665"/><text x="96.4798%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (37,237,665 samples, 0.02%)</title><rect x="96.2298%" y="165" width="0.0158%" height="15" fill="rgb(236,212,23)" fg:x="227149043855" fg:w="37237665"/><text x="96.4798%" y="175.50"></text></g><g><title>core::ptr::write (37,237,665 samples, 0.02%)</title><rect x="96.2298%" y="149" width="0.0158%" height="15" fill="rgb(242,79,21)" fg:x="227149043855" fg:w="37237665"/><text x="96.4798%" y="159.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (88,752,112 samples, 0.04%)</title><rect x="96.2298%" y="197" width="0.0376%" height="15" fill="rgb(211,96,35)" fg:x="227149043855" fg:w="88752112"/><text x="96.4798%" y="207.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market::_{{closure}} (51,514,447 samples, 0.02%)</title><rect x="96.2456%" y="181" width="0.0218%" height="15" fill="rgb(253,215,40)" fg:x="227186281520" fg:w="51514447"/><text x="96.4956%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (98,228,633 samples, 0.04%)</title><rect x="96.2298%" y="357" width="0.0416%" height="15" fill="rgb(211,81,21)" fg:x="227149043855" fg:w="98228633"/><text x="96.4798%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (98,228,633 samples, 0.04%)</title><rect x="96.2298%" y="341" width="0.0416%" height="15" fill="rgb(208,190,38)" fg:x="227149043855" fg:w="98228633"/><text x="96.4798%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (98,228,633 samples, 0.04%)</title><rect x="96.2298%" y="325" width="0.0416%" height="15" fill="rgb(235,213,38)" fg:x="227149043855" fg:w="98228633"/><text x="96.4798%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (98,228,633 samples, 0.04%)</title><rect x="96.2298%" y="309" width="0.0416%" height="15" fill="rgb(237,122,38)" fg:x="227149043855" fg:w="98228633"/><text x="96.4798%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (98,228,633 samples, 0.04%)</title><rect x="96.2298%" y="293" width="0.0416%" height="15" fill="rgb(244,218,35)" fg:x="227149043855" fg:w="98228633"/><text x="96.4798%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (98,228,633 samples, 0.04%)</title><rect x="96.2298%" y="277" width="0.0416%" height="15" fill="rgb(240,68,47)" fg:x="227149043855" fg:w="98228633"/><text x="96.4798%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (98,228,633 samples, 0.04%)</title><rect x="96.2298%" y="261" width="0.0416%" height="15" fill="rgb(210,16,53)" fg:x="227149043855" fg:w="98228633"/><text x="96.4798%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (98,228,633 samples, 0.04%)</title><rect x="96.2298%" y="245" width="0.0416%" height="15" fill="rgb(235,124,12)" fg:x="227149043855" fg:w="98228633"/><text x="96.4798%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (98,228,633 samples, 0.04%)</title><rect x="96.2298%" y="229" width="0.0416%" height="15" fill="rgb(224,169,11)" fg:x="227149043855" fg:w="98228633"/><text x="96.4798%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (98,228,633 samples, 0.04%)</title><rect x="96.2298%" y="213" width="0.0416%" height="15" fill="rgb(250,166,2)" fg:x="227149043855" fg:w="98228633"/><text x="96.4798%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (33,538,348 samples, 0.01%)</title><rect x="96.2850%" y="325" width="0.0142%" height="15" fill="rgb(242,216,29)" fg:x="227279293959" fg:w="33538348"/><text x="96.5350%" y="335.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::new_from_argsort_impl (254,145,934 samples, 0.11%)</title><rect x="96.2714%" y="341" width="0.1077%" height="15" fill="rgb(230,116,27)" fg:x="227247272488" fg:w="254145934"/><text x="96.5214%" y="351.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (185,200,567 samples, 0.08%)</title><rect x="96.3006%" y="325" width="0.0785%" height="15" fill="rgb(228,99,48)" fg:x="227316217855" fg:w="185200567"/><text x="96.5506%" y="335.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (178,512,083 samples, 0.08%)</title><rect x="96.3034%" y="309" width="0.0756%" height="15" fill="rgb(253,11,6)" fg:x="227322906339" fg:w="178512083"/><text x="96.5534%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (149,609,544 samples, 0.06%)</title><rect x="96.4239%" y="325" width="0.0634%" height="15" fill="rgb(247,143,39)" fg:x="227607306998" fg:w="149609544"/><text x="96.6739%" y="335.50"></text></g><g><title>core::intrinsics::copy (30,164,384 samples, 0.01%)</title><rect x="96.4963%" y="229" width="0.0128%" height="15" fill="rgb(236,97,10)" fg:x="227778143490" fg:w="30164384"/><text x="96.7463%" y="239.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (48,326,822 samples, 0.02%)</title><rect x="96.5091%" y="213" width="0.0205%" height="15" fill="rgb(233,208,19)" fg:x="227808307874" fg:w="48326822"/><text x="96.7591%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (36,217,985 samples, 0.02%)</title><rect x="96.5142%" y="197" width="0.0153%" height="15" fill="rgb(216,164,2)" fg:x="227820416711" fg:w="36217985"/><text x="96.7642%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (188,840,325 samples, 0.08%)</title><rect x="96.4912%" y="277" width="0.0800%" height="15" fill="rgb(220,129,5)" fg:x="227766038232" fg:w="188840325"/><text x="96.7412%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (188,840,325 samples, 0.08%)</title><rect x="96.4912%" y="261" width="0.0800%" height="15" fill="rgb(242,17,10)" fg:x="227766038232" fg:w="188840325"/><text x="96.7412%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (188,840,325 samples, 0.08%)</title><rect x="96.4912%" y="245" width="0.0800%" height="15" fill="rgb(242,107,0)" fg:x="227766038232" fg:w="188840325"/><text x="96.7412%" y="255.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (146,570,683 samples, 0.06%)</title><rect x="96.5091%" y="229" width="0.0621%" height="15" fill="rgb(251,28,31)" fg:x="227808307874" fg:w="146570683"/><text x="96.7591%" y="239.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (98,243,861 samples, 0.04%)</title><rect x="96.5296%" y="213" width="0.0416%" height="15" fill="rgb(233,223,10)" fg:x="227856634696" fg:w="98243861"/><text x="96.7796%" y="223.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (81,125,222 samples, 0.03%)</title><rect x="96.5368%" y="197" width="0.0344%" height="15" fill="rgb(215,21,27)" fg:x="227873753335" fg:w="81125222"/><text x="96.7868%" y="207.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (29,676,228 samples, 0.01%)</title><rect x="96.5893%" y="197" width="0.0126%" height="15" fill="rgb(232,23,21)" fg:x="227997608519" fg:w="29676228"/><text x="96.8393%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (251,545,628 samples, 0.11%)</title><rect x="96.5712%" y="261" width="0.1066%" height="15" fill="rgb(244,5,23)" fg:x="227954878557" fg:w="251545628"/><text x="96.8212%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (251,545,628 samples, 0.11%)</title><rect x="96.5712%" y="245" width="0.1066%" height="15" fill="rgb(226,81,46)" fg:x="227954878557" fg:w="251545628"/><text x="96.8212%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (251,545,628 samples, 0.11%)</title><rect x="96.5712%" y="229" width="0.1066%" height="15" fill="rgb(247,70,30)" fg:x="227954878557" fg:w="251545628"/><text x="96.8212%" y="239.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (208,815,666 samples, 0.09%)</title><rect x="96.5893%" y="213" width="0.0885%" height="15" fill="rgb(212,68,19)" fg:x="227997608519" fg:w="208815666"/><text x="96.8393%" y="223.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (179,139,438 samples, 0.08%)</title><rect x="96.6018%" y="197" width="0.0759%" height="15" fill="rgb(240,187,13)" fg:x="228027284747" fg:w="179139438"/><text x="96.8518%" y="207.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (161,957,968 samples, 0.07%)</title><rect x="96.6091%" y="181" width="0.0686%" height="15" fill="rgb(223,113,26)" fg:x="228044466217" fg:w="161957968"/><text x="96.8591%" y="191.50"></text></g><g><title>core::intrinsics::copy (41,906,070 samples, 0.02%)</title><rect x="96.6938%" y="197" width="0.0178%" height="15" fill="rgb(206,192,2)" fg:x="228244331613" fg:w="41906070"/><text x="96.9438%" y="207.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (34,617,591 samples, 0.01%)</title><rect x="96.7133%" y="181" width="0.0147%" height="15" fill="rgb(241,108,4)" fg:x="228290427342" fg:w="34617591"/><text x="96.9633%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (216,069,053 samples, 0.09%)</title><rect x="96.6813%" y="245" width="0.0915%" height="15" fill="rgb(247,173,49)" fg:x="228214757088" fg:w="216069053"/><text x="96.9313%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (216,069,053 samples, 0.09%)</title><rect x="96.6813%" y="229" width="0.0915%" height="15" fill="rgb(224,114,35)" fg:x="228214757088" fg:w="216069053"/><text x="96.9313%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (211,835,383 samples, 0.09%)</title><rect x="96.6831%" y="213" width="0.0897%" height="15" fill="rgb(245,159,27)" fg:x="228218990758" fg:w="211835383"/><text x="96.9331%" y="223.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (144,588,458 samples, 0.06%)</title><rect x="96.7116%" y="197" width="0.0613%" height="15" fill="rgb(245,172,44)" fg:x="228286237683" fg:w="144588458"/><text x="96.9616%" y="207.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (105,781,208 samples, 0.04%)</title><rect x="96.7280%" y="181" width="0.0448%" height="15" fill="rgb(236,23,11)" fg:x="228325044933" fg:w="105781208"/><text x="96.9780%" y="191.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (101,552,964 samples, 0.04%)</title><rect x="96.7298%" y="165" width="0.0430%" height="15" fill="rgb(205,117,38)" fg:x="228329273177" fg:w="101552964"/><text x="96.9798%" y="175.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (59,258,851 samples, 0.03%)</title><rect x="96.7835%" y="165" width="0.0251%" height="15" fill="rgb(237,72,25)" fg:x="228456166697" fg:w="59258851"/><text x="97.0335%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (207,345,861 samples, 0.09%)</title><rect x="96.7728%" y="229" width="0.0878%" height="15" fill="rgb(244,70,9)" fg:x="228430826141" fg:w="207345861"/><text x="97.0228%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (207,345,861 samples, 0.09%)</title><rect x="96.7728%" y="213" width="0.0878%" height="15" fill="rgb(217,125,39)" fg:x="228430826141" fg:w="207345861"/><text x="97.0228%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (207,345,861 samples, 0.09%)</title><rect x="96.7728%" y="197" width="0.0878%" height="15" fill="rgb(235,36,10)" fg:x="228430826141" fg:w="207345861"/><text x="97.0228%" y="207.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (182,005,305 samples, 0.08%)</title><rect x="96.7835%" y="181" width="0.0771%" height="15" fill="rgb(251,123,47)" fg:x="228456166697" fg:w="182005305"/><text x="97.0335%" y="191.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (122,746,454 samples, 0.05%)</title><rect x="96.8086%" y="165" width="0.0520%" height="15" fill="rgb(221,13,13)" fg:x="228515425548" fg:w="122746454"/><text x="97.0586%" y="175.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (93,450,130 samples, 0.04%)</title><rect x="96.8211%" y="149" width="0.0396%" height="15" fill="rgb(238,131,9)" fg:x="228544721872" fg:w="93450130"/><text x="97.0711%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (25,414,855 samples, 0.01%)</title><rect x="96.8877%" y="133" width="0.0108%" height="15" fill="rgb(211,50,8)" fg:x="228702064559" fg:w="25414855"/><text x="97.1377%" y="143.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (51,060,598 samples, 0.02%)</title><rect x="96.8804%" y="149" width="0.0216%" height="15" fill="rgb(245,182,24)" fg:x="228684831544" fg:w="51060598"/><text x="97.1304%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (170,260,593 samples, 0.07%)</title><rect x="96.8642%" y="213" width="0.0721%" height="15" fill="rgb(242,14,37)" fg:x="228646614286" fg:w="170260593"/><text x="97.1142%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (170,260,593 samples, 0.07%)</title><rect x="96.8642%" y="197" width="0.0721%" height="15" fill="rgb(246,228,12)" fg:x="228646614286" fg:w="170260593"/><text x="97.1142%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (170,260,593 samples, 0.07%)</title><rect x="96.8642%" y="181" width="0.0721%" height="15" fill="rgb(213,55,15)" fg:x="228646614286" fg:w="170260593"/><text x="97.1142%" y="191.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (132,043,335 samples, 0.06%)</title><rect x="96.8804%" y="165" width="0.0559%" height="15" fill="rgb(209,9,3)" fg:x="228684831544" fg:w="132043335"/><text x="97.1304%" y="175.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (80,982,737 samples, 0.03%)</title><rect x="96.9020%" y="149" width="0.0343%" height="15" fill="rgb(230,59,30)" fg:x="228735892142" fg:w="80982737"/><text x="97.1520%" y="159.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (55,416,296 samples, 0.02%)</title><rect x="96.9129%" y="133" width="0.0235%" height="15" fill="rgb(209,121,21)" fg:x="228761458583" fg:w="55416296"/><text x="97.1629%" y="143.50"></text></g><g><title>core::intrinsics::copy (33,702,527 samples, 0.01%)</title><rect x="96.9578%" y="149" width="0.0143%" height="15" fill="rgb(220,109,13)" fg:x="228867451402" fg:w="33702527"/><text x="97.2078%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (131,636,466 samples, 0.06%)</title><rect x="96.9488%" y="197" width="0.0558%" height="15" fill="rgb(232,18,1)" fg:x="228846371310" fg:w="131636466"/><text x="97.1988%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (131,636,466 samples, 0.06%)</title><rect x="96.9488%" y="181" width="0.0558%" height="15" fill="rgb(215,41,42)" fg:x="228846371310" fg:w="131636466"/><text x="97.1988%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (131,636,466 samples, 0.06%)</title><rect x="96.9488%" y="165" width="0.0558%" height="15" fill="rgb(224,123,36)" fg:x="228846371310" fg:w="131636466"/><text x="97.1988%" y="175.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (76,853,847 samples, 0.03%)</title><rect x="96.9721%" y="149" width="0.0326%" height="15" fill="rgb(240,125,3)" fg:x="228901153929" fg:w="76853847"/><text x="97.2221%" y="159.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (42,805,937 samples, 0.02%)</title><rect x="96.9865%" y="133" width="0.0181%" height="15" fill="rgb(205,98,50)" fg:x="228935201839" fg:w="42805937"/><text x="97.2365%" y="143.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (30,100,092 samples, 0.01%)</title><rect x="96.9919%" y="117" width="0.0128%" height="15" fill="rgb(205,185,37)" fg:x="228947907684" fg:w="30100092"/><text x="97.2419%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (37,708,259 samples, 0.02%)</title><rect x="97.0136%" y="181" width="0.0160%" height="15" fill="rgb(238,207,15)" fg:x="228999223384" fg:w="37708259"/><text x="97.2636%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (25,280,549 samples, 0.01%)</title><rect x="97.0656%" y="101" width="0.0107%" height="15" fill="rgb(213,199,42)" fg:x="229122057697" fg:w="25280549"/><text x="97.3156%" y="111.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (47,077,224 samples, 0.02%)</title><rect x="97.0601%" y="117" width="0.0199%" height="15" fill="rgb(235,201,11)" fg:x="229109040504" fg:w="47077224"/><text x="97.3101%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (178,515,789 samples, 0.08%)</title><rect x="97.0296%" y="181" width="0.0756%" height="15" fill="rgb(207,46,11)" fg:x="229036931643" fg:w="178515789"/><text x="97.2796%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (178,515,789 samples, 0.08%)</title><rect x="97.0296%" y="165" width="0.0756%" height="15" fill="rgb(241,35,35)" fg:x="229036931643" fg:w="178515789"/><text x="97.2796%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (178,515,789 samples, 0.08%)</title><rect x="97.0296%" y="149" width="0.0756%" height="15" fill="rgb(243,32,47)" fg:x="229036931643" fg:w="178515789"/><text x="97.2796%" y="159.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (136,046,042 samples, 0.06%)</title><rect x="97.0476%" y="133" width="0.0576%" height="15" fill="rgb(247,202,23)" fg:x="229079401390" fg:w="136046042"/><text x="97.2976%" y="143.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (59,329,704 samples, 0.03%)</title><rect x="97.0801%" y="117" width="0.0251%" height="15" fill="rgb(219,102,11)" fg:x="229156117728" fg:w="59329704"/><text x="97.3301%" y="127.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (33,935,195 samples, 0.01%)</title><rect x="97.0908%" y="101" width="0.0144%" height="15" fill="rgb(243,110,44)" fg:x="229181512237" fg:w="33935195"/><text x="97.3408%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (46,301,990 samples, 0.02%)</title><rect x="97.1070%" y="165" width="0.0196%" height="15" fill="rgb(222,74,54)" fg:x="229219702724" fg:w="46301990"/><text x="97.3570%" y="175.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (46,817,633 samples, 0.02%)</title><rect x="97.1498%" y="101" width="0.0198%" height="15" fill="rgb(216,99,12)" fg:x="229320639662" fg:w="46817633"/><text x="97.3998%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (152,224,669 samples, 0.06%)</title><rect x="97.1266%" y="165" width="0.0645%" height="15" fill="rgb(226,22,26)" fg:x="229266004714" fg:w="152224669"/><text x="97.3766%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (152,224,669 samples, 0.06%)</title><rect x="97.1266%" y="149" width="0.0645%" height="15" fill="rgb(217,163,10)" fg:x="229266004714" fg:w="152224669"/><text x="97.3766%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (152,224,669 samples, 0.06%)</title><rect x="97.1266%" y="133" width="0.0645%" height="15" fill="rgb(213,25,53)" fg:x="229266004714" fg:w="152224669"/><text x="97.3766%" y="143.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (122,771,492 samples, 0.05%)</title><rect x="97.1391%" y="117" width="0.0520%" height="15" fill="rgb(252,105,26)" fg:x="229295457891" fg:w="122771492"/><text x="97.3891%" y="127.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (50,772,088 samples, 0.02%)</title><rect x="97.1696%" y="101" width="0.0215%" height="15" fill="rgb(220,39,43)" fg:x="229367457295" fg:w="50772088"/><text x="97.4196%" y="111.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (33,989,965 samples, 0.01%)</title><rect x="97.1767%" y="85" width="0.0144%" height="15" fill="rgb(229,68,48)" fg:x="229384239418" fg:w="33989965"/><text x="97.4267%" y="95.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (25,296,259 samples, 0.01%)</title><rect x="97.1929%" y="101" width="0.0107%" height="15" fill="rgb(252,8,32)" fg:x="229422405785" fg:w="25296259"/><text x="97.4429%" y="111.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (25,296,259 samples, 0.01%)</title><rect x="97.1929%" y="85" width="0.0107%" height="15" fill="rgb(223,20,43)" fg:x="229422405785" fg:w="25296259"/><text x="97.4429%" y="95.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (33,670,381 samples, 0.01%)</title><rect x="97.1911%" y="149" width="0.0143%" height="15" fill="rgb(229,81,49)" fg:x="229418229383" fg:w="33670381"/><text x="97.4411%" y="159.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (29,493,979 samples, 0.01%)</title><rect x="97.1929%" y="133" width="0.0125%" height="15" fill="rgb(236,28,36)" fg:x="229422405785" fg:w="29493979"/><text x="97.4429%" y="143.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (29,493,979 samples, 0.01%)</title><rect x="97.1929%" y="117" width="0.0125%" height="15" fill="rgb(249,185,26)" fg:x="229422405785" fg:w="29493979"/><text x="97.4429%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (58,886,112 samples, 0.02%)</title><rect x="97.2054%" y="149" width="0.0249%" height="15" fill="rgb(249,174,33)" fg:x="229451899764" fg:w="58886112"/><text x="97.4554%" y="159.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (30,277,905 samples, 0.01%)</title><rect x="97.2501%" y="85" width="0.0128%" height="15" fill="rgb(233,201,37)" fg:x="229557378603" fg:w="30277905"/><text x="97.5001%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (93,860,341 samples, 0.04%)</title><rect x="97.2303%" y="149" width="0.0398%" height="15" fill="rgb(221,78,26)" fg:x="229510785876" fg:w="93860341"/><text x="97.4803%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (93,860,341 samples, 0.04%)</title><rect x="97.2303%" y="133" width="0.0398%" height="15" fill="rgb(250,127,30)" fg:x="229510785876" fg:w="93860341"/><text x="97.4803%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (93,860,341 samples, 0.04%)</title><rect x="97.2303%" y="117" width="0.0398%" height="15" fill="rgb(230,49,44)" fg:x="229510785876" fg:w="93860341"/><text x="97.4803%" y="127.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (68,366,534 samples, 0.03%)</title><rect x="97.2411%" y="101" width="0.0290%" height="15" fill="rgb(229,67,23)" fg:x="229536279683" fg:w="68366534"/><text x="97.4911%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (46,600,328 samples, 0.02%)</title><rect x="97.2844%" y="117" width="0.0197%" height="15" fill="rgb(249,83,47)" fg:x="229638472548" fg:w="46600328"/><text x="97.5344%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (46,600,328 samples, 0.02%)</title><rect x="97.2844%" y="101" width="0.0197%" height="15" fill="rgb(215,43,3)" fg:x="229638472548" fg:w="46600328"/><text x="97.5344%" y="111.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (29,620,214 samples, 0.01%)</title><rect x="97.2916%" y="85" width="0.0125%" height="15" fill="rgb(238,154,13)" fg:x="229655452662" fg:w="29620214"/><text x="97.5416%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (76,241,096 samples, 0.03%)</title><rect x="97.2754%" y="133" width="0.0323%" height="15" fill="rgb(219,56,2)" fg:x="229617294440" fg:w="76241096"/><text x="97.5254%" y="143.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (33,818,867 samples, 0.01%)</title><rect x="97.3238%" y="69" width="0.0143%" height="15" fill="rgb(233,0,4)" fg:x="229731502664" fg:w="33818867"/><text x="97.5738%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (97,340,942 samples, 0.04%)</title><rect x="97.3077%" y="133" width="0.0412%" height="15" fill="rgb(235,30,7)" fg:x="229693535536" fg:w="97340942"/><text x="97.5577%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (97,340,942 samples, 0.04%)</title><rect x="97.3077%" y="117" width="0.0412%" height="15" fill="rgb(250,79,13)" fg:x="229693535536" fg:w="97340942"/><text x="97.5577%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (97,340,942 samples, 0.04%)</title><rect x="97.3077%" y="101" width="0.0412%" height="15" fill="rgb(211,146,34)" fg:x="229693535536" fg:w="97340942"/><text x="97.5577%" y="111.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (71,868,887 samples, 0.03%)</title><rect x="97.3185%" y="85" width="0.0304%" height="15" fill="rgb(228,22,38)" fg:x="229719007591" fg:w="71868887"/><text x="97.5685%" y="95.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (25,554,947 samples, 0.01%)</title><rect x="97.3382%" y="69" width="0.0108%" height="15" fill="rgb(235,168,5)" fg:x="229765321531" fg:w="25554947"/><text x="97.5882%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (38,554,945 samples, 0.02%)</title><rect x="97.3544%" y="117" width="0.0163%" height="15" fill="rgb(221,155,16)" fg:x="229803555088" fg:w="38554945"/><text x="97.6044%" y="127.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (29,676,333 samples, 0.01%)</title><rect x="97.3814%" y="53" width="0.0126%" height="15" fill="rgb(215,215,53)" fg:x="229867473258" fg:w="29676333"/><text x="97.6314%" y="63.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (76,510,564 samples, 0.03%)</title><rect x="97.3707%" y="117" width="0.0324%" height="15" fill="rgb(223,4,10)" fg:x="229842110033" fg:w="76510564"/><text x="97.6207%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (76,510,564 samples, 0.03%)</title><rect x="97.3707%" y="101" width="0.0324%" height="15" fill="rgb(234,103,6)" fg:x="229842110033" fg:w="76510564"/><text x="97.6207%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (76,510,564 samples, 0.03%)</title><rect x="97.3707%" y="85" width="0.0324%" height="15" fill="rgb(227,97,0)" fg:x="229842110033" fg:w="76510564"/><text x="97.6207%" y="95.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (63,733,958 samples, 0.03%)</title><rect x="97.3761%" y="69" width="0.0270%" height="15" fill="rgb(234,150,53)" fg:x="229854886639" fg:w="63733958"/><text x="97.6261%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (29,480,477 samples, 0.01%)</title><rect x="97.4066%" y="85" width="0.0125%" height="15" fill="rgb(228,201,54)" fg:x="229926990866" fg:w="29480477"/><text x="97.6566%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (76,154,092 samples, 0.03%)</title><rect x="97.4049%" y="101" width="0.0323%" height="15" fill="rgb(222,22,37)" fg:x="229922808981" fg:w="76154092"/><text x="97.6549%" y="111.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (29,765,903 samples, 0.01%)</title><rect x="97.4481%" y="37" width="0.0126%" height="15" fill="rgb(237,53,32)" fg:x="230024891272" fg:w="29765903"/><text x="97.6981%" y="47.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (81,001,415 samples, 0.03%)</title><rect x="97.4371%" y="101" width="0.0343%" height="15" fill="rgb(233,25,53)" fg:x="229998963073" fg:w="81001415"/><text x="97.6871%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (81,001,415 samples, 0.03%)</title><rect x="97.4371%" y="85" width="0.0343%" height="15" fill="rgb(210,40,34)" fg:x="229998963073" fg:w="81001415"/><text x="97.6871%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (76,490,856 samples, 0.03%)</title><rect x="97.4390%" y="69" width="0.0324%" height="15" fill="rgb(241,220,44)" fg:x="230003473632" fg:w="76490856"/><text x="97.6890%" y="79.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (67,712,768 samples, 0.03%)</title><rect x="97.4428%" y="53" width="0.0287%" height="15" fill="rgb(235,28,35)" fg:x="230012251720" fg:w="67712768"/><text x="97.6928%" y="63.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (25,307,313 samples, 0.01%)</title><rect x="97.4607%" y="37" width="0.0107%" height="15" fill="rgb(210,56,17)" fg:x="230054657175" fg:w="25307313"/><text x="97.7107%" y="47.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (33,663,610 samples, 0.01%)</title><rect x="97.4751%" y="85" width="0.0143%" height="15" fill="rgb(224,130,29)" fg:x="230088472050" fg:w="33663610"/><text x="97.7251%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (2,440,736,062 samples, 1.03%)</title><rect x="96.4912%" y="325" width="1.0340%" height="15" fill="rgb(235,212,8)" fg:x="227766038232" fg:w="2440736062"/><text x="96.7412%" y="335.50"></text></g><g><title>core::slice::sort::unstable::sort (2,440,736,062 samples, 1.03%)</title><rect x="96.4912%" y="309" width="1.0340%" height="15" fill="rgb(223,33,50)" fg:x="227766038232" fg:w="2440736062"/><text x="96.7412%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,440,736,062 samples, 1.03%)</title><rect x="96.4912%" y="293" width="1.0340%" height="15" fill="rgb(219,149,13)" fg:x="227766038232" fg:w="2440736062"/><text x="96.7412%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,251,895,737 samples, 0.95%)</title><rect x="96.5712%" y="277" width="0.9540%" height="15" fill="rgb(250,156,29)" fg:x="227954878557" fg:w="2251895737"/><text x="96.8212%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,000,350,109 samples, 0.85%)</title><rect x="96.6777%" y="261" width="0.8474%" height="15" fill="rgb(216,193,19)" fg:x="228206424185" fg:w="2000350109"/><text x="96.9277%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,775,948,153 samples, 0.75%)</title><rect x="96.7728%" y="245" width="0.7524%" height="15" fill="rgb(216,135,14)" fg:x="228430826141" fg:w="1775948153"/><text x="97.0228%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,568,602,292 samples, 0.66%)</title><rect x="96.8606%" y="229" width="0.6645%" height="15" fill="rgb(241,47,5)" fg:x="228638172002" fg:w="1568602292"/><text x="97.1106%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,389,899,415 samples, 0.59%)</title><rect x="96.9364%" y="213" width="0.5888%" height="15" fill="rgb(233,42,35)" fg:x="228816874879" fg:w="1389899415"/><text x="97.1864%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,228,766,518 samples, 0.52%)</title><rect x="97.0046%" y="197" width="0.5206%" height="15" fill="rgb(231,13,6)" fg:x="228978007776" fg:w="1228766518"/><text x="97.2546%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (991,326,862 samples, 0.42%)</title><rect x="97.1052%" y="181" width="0.4200%" height="15" fill="rgb(207,181,40)" fg:x="229215447432" fg:w="991326862"/><text x="97.3552%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (788,544,911 samples, 0.33%)</title><rect x="97.1911%" y="165" width="0.3341%" height="15" fill="rgb(254,173,49)" fg:x="229418229383" fg:w="788544911"/><text x="97.4411%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (602,128,077 samples, 0.26%)</title><rect x="97.2701%" y="149" width="0.2551%" height="15" fill="rgb(221,1,38)" fg:x="229604646217" fg:w="602128077"/><text x="97.5201%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (415,897,816 samples, 0.18%)</title><rect x="97.3490%" y="133" width="0.1762%" height="15" fill="rgb(206,124,46)" fg:x="229790876478" fg:w="415897816"/><text x="97.5990%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (288,153,697 samples, 0.12%)</title><rect x="97.4031%" y="117" width="0.1221%" height="15" fill="rgb(249,21,11)" fg:x="229918620597" fg:w="288153697"/><text x="97.6531%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (126,809,806 samples, 0.05%)</title><rect x="97.4714%" y="101" width="0.0537%" height="15" fill="rgb(222,201,40)" fg:x="230079964488" fg:w="126809806"/><text x="97.7214%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (71,824,510 samples, 0.03%)</title><rect x="97.4947%" y="85" width="0.0304%" height="15" fill="rgb(235,61,29)" fg:x="230134949784" fg:w="71824510"/><text x="97.7447%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (37,904,872 samples, 0.02%)</title><rect x="97.5091%" y="69" width="0.0161%" height="15" fill="rgb(219,207,3)" fg:x="230168869422" fg:w="37904872"/><text x="97.7591%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (29,340,020 samples, 0.01%)</title><rect x="97.5127%" y="53" width="0.0124%" height="15" fill="rgb(222,56,46)" fg:x="230177434274" fg:w="29340020"/><text x="97.7627%" y="63.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (192,788,240 samples, 0.08%)</title><rect x="97.5308%" y="325" width="0.0817%" height="15" fill="rgb(239,76,54)" fg:x="230220054160" fg:w="192788240"/><text x="97.7808%" y="335.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets (3,210,640,249 samples, 1.36%)</title><rect x="96.2714%" y="357" width="1.3602%" height="15" fill="rgb(231,124,27)" fg:x="227247272488" fg:w="3210640249"/><text x="96.5214%" y="367.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl (2,956,494,315 samples, 1.25%)</title><rect x="96.3791%" y="341" width="1.2525%" height="15" fill="rgb(249,195,6)" fg:x="227501418422" fg:w="2956494315"/><text x="96.6291%" y="351.50"></text></g><g><title>faer::sparse::try_zeroed (26,719,979 samples, 0.01%)</title><rect x="97.6202%" y="325" width="0.0113%" height="15" fill="rgb(237,174,47)" fg:x="230431192758" fg:w="26719979"/><text x="97.8702%" y="335.50"></text></g><g><title>core::intrinsics::write_bytes (26,719,979 samples, 0.01%)</title><rect x="97.6202%" y="309" width="0.0113%" height="15" fill="rgb(206,201,31)" fg:x="230431192758" fg:w="26719979"/><text x="97.8702%" y="319.50"></text></g><g><title>[libc.so.6] (26,719,979 samples, 0.01%)</title><rect x="97.6202%" y="293" width="0.0113%" height="15" fill="rgb(231,57,52)" fg:x="230431192758" fg:w="26719979"/><text x="97.8702%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (23,781,199 samples, 0.01%)</title><rect x="97.6461%" y="309" width="0.0101%" height="15" fill="rgb(248,177,22)" fg:x="230492122209" fg:w="23781199"/><text x="97.8961%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (23,781,199 samples, 0.01%)</title><rect x="97.6461%" y="293" width="0.0101%" height="15" fill="rgb(215,211,37)" fg:x="230492122209" fg:w="23781199"/><text x="97.8961%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (23,781,199 samples, 0.01%)</title><rect x="97.6461%" y="277" width="0.0101%" height="15" fill="rgb(241,128,51)" fg:x="230492122209" fg:w="23781199"/><text x="97.8961%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (23,781,199 samples, 0.01%)</title><rect x="97.6461%" y="261" width="0.0101%" height="15" fill="rgb(227,165,31)" fg:x="230492122209" fg:w="23781199"/><text x="97.8961%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (55,648,967 samples, 0.02%)</title><rect x="97.6359%" y="325" width="0.0236%" height="15" fill="rgb(228,167,24)" fg:x="230468198429" fg:w="55648967"/><text x="97.8859%" y="335.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (263,880,736 samples, 0.11%)</title><rect x="97.7246%" y="149" width="0.1118%" height="15" fill="rgb(228,143,12)" fg:x="230677634069" fg:w="263880736"/><text x="97.9746%" y="159.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (263,880,736 samples, 0.11%)</title><rect x="97.7246%" y="133" width="0.1118%" height="15" fill="rgb(249,149,8)" fg:x="230677634069" fg:w="263880736"/><text x="97.9746%" y="143.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (263,880,736 samples, 0.11%)</title><rect x="97.7246%" y="117" width="0.1118%" height="15" fill="rgb(243,35,44)" fg:x="230677634069" fg:w="263880736"/><text x="97.9746%" y="127.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (263,880,736 samples, 0.11%)</title><rect x="97.7246%" y="101" width="0.1118%" height="15" fill="rgb(246,89,9)" fg:x="230677634069" fg:w="263880736"/><text x="97.9746%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (625,035,999 samples, 0.26%)</title><rect x="97.7093%" y="309" width="0.2648%" height="15" fill="rgb(233,213,13)" fg:x="230641465688" fg:w="625035999"/><text x="97.9593%" y="319.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (625,035,999 samples, 0.26%)</title><rect x="97.7093%" y="293" width="0.2648%" height="15" fill="rgb(233,141,41)" fg:x="230641465688" fg:w="625035999"/><text x="97.9593%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (625,035,999 samples, 0.26%)</title><rect x="97.7093%" y="277" width="0.2648%" height="15" fill="rgb(239,167,4)" fg:x="230641465688" fg:w="625035999"/><text x="97.9593%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (625,035,999 samples, 0.26%)</title><rect x="97.7093%" y="261" width="0.2648%" height="15" fill="rgb(209,217,16)" fg:x="230641465688" fg:w="625035999"/><text x="97.9593%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (625,035,999 samples, 0.26%)</title><rect x="97.7093%" y="245" width="0.2648%" height="15" fill="rgb(219,88,35)" fg:x="230641465688" fg:w="625035999"/><text x="97.9593%" y="255.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (588,867,618 samples, 0.25%)</title><rect x="97.7246%" y="229" width="0.2495%" height="15" fill="rgb(220,193,23)" fg:x="230677634069" fg:w="588867618"/><text x="97.9746%" y="239.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (588,867,618 samples, 0.25%)</title><rect x="97.7246%" y="213" width="0.2495%" height="15" fill="rgb(230,90,52)" fg:x="230677634069" fg:w="588867618"/><text x="97.9746%" y="223.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (588,867,618 samples, 0.25%)</title><rect x="97.7246%" y="197" width="0.2495%" height="15" fill="rgb(252,106,19)" fg:x="230677634069" fg:w="588867618"/><text x="97.9746%" y="207.50"></text></g><g><title>core::str::pattern::Searcher::next_match (588,867,618 samples, 0.25%)</title><rect x="97.7246%" y="181" width="0.2495%" height="15" fill="rgb(206,74,20)" fg:x="230677634069" fg:w="588867618"/><text x="97.9746%" y="191.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (588,867,618 samples, 0.25%)</title><rect x="97.7246%" y="165" width="0.2495%" height="15" fill="rgb(230,138,44)" fg:x="230677634069" fg:w="588867618"/><text x="97.9746%" y="175.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (324,986,882 samples, 0.14%)</title><rect x="97.8364%" y="149" width="0.1377%" height="15" fill="rgb(235,182,43)" fg:x="230941514805" fg:w="324986882"/><text x="98.0864%" y="159.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (324,986,882 samples, 0.14%)</title><rect x="97.8364%" y="133" width="0.1377%" height="15" fill="rgb(242,16,51)" fg:x="230941514805" fg:w="324986882"/><text x="98.0864%" y="143.50"></text></g><g><title>core::str::validations::next_code_point (324,986,882 samples, 0.14%)</title><rect x="97.8364%" y="117" width="0.1377%" height="15" fill="rgb(248,9,4)" fg:x="230941514805" fg:w="324986882"/><text x="98.0864%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29,982,858 samples, 0.01%)</title><rect x="97.9614%" y="101" width="0.0127%" height="15" fill="rgb(210,31,22)" fg:x="231236518829" fg:w="29982858"/><text x="98.2114%" y="111.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (24,006,270 samples, 0.01%)</title><rect x="97.9639%" y="85" width="0.0102%" height="15" fill="rgb(239,54,39)" fg:x="231242495417" fg:w="24006270"/><text x="98.2139%" y="95.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (23,889,878 samples, 0.01%)</title><rect x="97.9741%" y="293" width="0.0101%" height="15" fill="rgb(230,99,41)" fg:x="231266501687" fg:w="23889878"/><text x="98.2241%" y="303.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (23,618,689 samples, 0.01%)</title><rect x="98.0281%" y="229" width="0.0100%" height="15" fill="rgb(253,106,12)" fg:x="231393882548" fg:w="23618689"/><text x="98.2781%" y="239.50"></text></g><g><title>core::num::dec2flt::decimal::Decimal::try_fast_path (59,420,744 samples, 0.03%)</title><rect x="98.0196%" y="245" width="0.0252%" height="15" fill="rgb(213,46,41)" fg:x="231373968371" fg:w="59420744"/><text x="98.2696%" y="255.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (61,452,586 samples, 0.03%)</title><rect x="98.0952%" y="197" width="0.0260%" height="15" fill="rgb(215,133,35)" fg:x="231552426613" fg:w="61452586"/><text x="98.3452%" y="207.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::read_u64 (27,920,925 samples, 0.01%)</title><rect x="98.1213%" y="197" width="0.0118%" height="15" fill="rgb(213,28,5)" fg:x="231613879199" fg:w="27920925"/><text x="98.3713%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (27,920,925 samples, 0.01%)</title><rect x="98.1213%" y="181" width="0.0118%" height="15" fill="rgb(215,77,49)" fg:x="231613879199" fg:w="27920925"/><text x="98.3713%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27,920,925 samples, 0.01%)</title><rect x="98.1213%" y="165" width="0.0118%" height="15" fill="rgb(248,100,22)" fg:x="231613879199" fg:w="27920925"/><text x="98.3713%" y="175.50"></text></g><g><title>core::num::dec2flt::common::is_8digits (27,842,159 samples, 0.01%)</title><rect x="98.1348%" y="197" width="0.0118%" height="15" fill="rgb(208,67,9)" fg:x="231645699233" fg:w="27842159"/><text x="98.3848%" y="207.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (192,330,618 samples, 0.08%)</title><rect x="98.0868%" y="213" width="0.0815%" height="15" fill="rgb(219,133,21)" fg:x="231532591785" fg:w="192330618"/><text x="98.3368%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::parse_8digits (51,381,011 samples, 0.02%)</title><rect x="98.1466%" y="197" width="0.0218%" height="15" fill="rgb(246,46,29)" fg:x="231673541392" fg:w="51381011"/><text x="98.3966%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (31,579,776 samples, 0.01%)</title><rect x="98.1549%" y="181" width="0.0134%" height="15" fill="rgb(246,185,52)" fg:x="231693342627" fg:w="31579776"/><text x="98.4049%" y="191.50"></text></g><g><title>&lt;f64 as num_traits::Num&gt;::from_str_radix (466,344,097 samples, 0.20%)</title><rect x="97.9741%" y="309" width="0.1976%" height="15" fill="rgb(252,136,11)" fg:x="231266501687" fg:w="466344097"/><text x="98.2241%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (442,454,219 samples, 0.19%)</title><rect x="97.9842%" y="293" width="0.1874%" height="15" fill="rgb(219,138,53)" fg:x="231290391565" fg:w="442454219"/><text x="98.2342%" y="303.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (442,454,219 samples, 0.19%)</title><rect x="97.9842%" y="277" width="0.1874%" height="15" fill="rgb(211,51,23)" fg:x="231290391565" fg:w="442454219"/><text x="98.2342%" y="287.50"></text></g><g><title>core::num::dec2flt::dec2flt (402,893,311 samples, 0.17%)</title><rect x="98.0010%" y="261" width="0.1707%" height="15" fill="rgb(247,221,28)" fg:x="231329952473" fg:w="402893311"/><text x="98.2510%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (287,694,540 samples, 0.12%)</title><rect x="98.0498%" y="245" width="0.1219%" height="15" fill="rgb(251,222,45)" fg:x="231445151244" fg:w="287694540"/><text x="98.2998%" y="255.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (224,156,627 samples, 0.09%)</title><rect x="98.0767%" y="229" width="0.0950%" height="15" fill="rgb(217,162,53)" fg:x="231508689157" fg:w="224156627"/><text x="98.3267%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (80,867,294 samples, 0.03%)</title><rect x="98.1717%" y="229" width="0.0343%" height="15" fill="rgb(229,93,14)" fg:x="231732845784" fg:w="80867294"/><text x="98.4217%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (80,867,294 samples, 0.03%)</title><rect x="98.1717%" y="213" width="0.0343%" height="15" fill="rgb(209,67,49)" fg:x="231732845784" fg:w="80867294"/><text x="98.4217%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (80,867,294 samples, 0.03%)</title><rect x="98.1717%" y="197" width="0.0343%" height="15" fill="rgb(213,87,29)" fg:x="231732845784" fg:w="80867294"/><text x="98.4217%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (80,867,294 samples, 0.03%)</title><rect x="98.1717%" y="181" width="0.0343%" height="15" fill="rgb(205,151,52)" fg:x="231732845784" fg:w="80867294"/><text x="98.4217%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (80,867,294 samples, 0.03%)</title><rect x="98.1717%" y="165" width="0.0343%" height="15" fill="rgb(253,215,39)" fg:x="231732845784" fg:w="80867294"/><text x="98.4217%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (80,867,294 samples, 0.03%)</title><rect x="98.1717%" y="149" width="0.0343%" height="15" fill="rgb(221,220,41)" fg:x="231732845784" fg:w="80867294"/><text x="98.4217%" y="159.50"></text></g><g><title>alloc::alloc::alloc (80,867,294 samples, 0.03%)</title><rect x="98.1717%" y="133" width="0.0343%" height="15" fill="rgb(218,133,21)" fg:x="231732845784" fg:w="80867294"/><text x="98.4217%" y="143.50"></text></g><g><title>malloc (57,355,403 samples, 0.02%)</title><rect x="98.1816%" y="117" width="0.0243%" height="15" fill="rgb(221,193,43)" fg:x="231756357675" fg:w="57355403"/><text x="98.4316%" y="127.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (107,939,738 samples, 0.05%)</title><rect x="98.1717%" y="309" width="0.0457%" height="15" fill="rgb(240,128,52)" fg:x="231732845784" fg:w="107939738"/><text x="98.4217%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (107,939,738 samples, 0.05%)</title><rect x="98.1717%" y="293" width="0.0457%" height="15" fill="rgb(253,114,12)" fg:x="231732845784" fg:w="107939738"/><text x="98.4217%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (107,939,738 samples, 0.05%)</title><rect x="98.1717%" y="277" width="0.0457%" height="15" fill="rgb(215,223,47)" fg:x="231732845784" fg:w="107939738"/><text x="98.4217%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (107,939,738 samples, 0.05%)</title><rect x="98.1717%" y="261" width="0.0457%" height="15" fill="rgb(248,225,23)" fg:x="231732845784" fg:w="107939738"/><text x="98.4217%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (107,939,738 samples, 0.05%)</title><rect x="98.1717%" y="245" width="0.0457%" height="15" fill="rgb(250,108,0)" fg:x="231732845784" fg:w="107939738"/><text x="98.4217%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (27,072,444 samples, 0.01%)</title><rect x="98.2059%" y="229" width="0.0115%" height="15" fill="rgb(228,208,7)" fg:x="231813713078" fg:w="27072444"/><text x="98.4559%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27,072,444 samples, 0.01%)</title><rect x="98.2059%" y="213" width="0.0115%" height="15" fill="rgb(244,45,10)" fg:x="231813713078" fg:w="27072444"/><text x="98.4559%" y="223.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (132,684,593 samples, 0.06%)</title><rect x="98.2174%" y="309" width="0.0562%" height="15" fill="rgb(207,125,25)" fg:x="231840785522" fg:w="132684593"/><text x="98.4674%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (132,684,593 samples, 0.06%)</title><rect x="98.2174%" y="293" width="0.0562%" height="15" fill="rgb(210,195,18)" fg:x="231840785522" fg:w="132684593"/><text x="98.4674%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (132,684,593 samples, 0.06%)</title><rect x="98.2174%" y="277" width="0.0562%" height="15" fill="rgb(249,80,12)" fg:x="231840785522" fg:w="132684593"/><text x="98.4674%" y="287.50"></text></g><g><title>cfree (67,939,613 samples, 0.03%)</title><rect x="98.2787%" y="277" width="0.0288%" height="15" fill="rgb(221,65,9)" fg:x="231985576140" fg:w="67939613"/><text x="98.5287%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or (84,076,715 samples, 0.04%)</title><rect x="98.2736%" y="309" width="0.0356%" height="15" fill="rgb(235,49,36)" fg:x="231973470115" fg:w="84076715"/><text x="98.5236%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;f64,matrix_market_rs::MtxError&gt;&gt; (84,076,715 samples, 0.04%)</title><rect x="98.2736%" y="293" width="0.0356%" height="15" fill="rgb(225,32,20)" fg:x="231973470115" fg:w="84076715"/><text x="98.5236%" y="303.50"></text></g><g><title>matrix_market_rs::parse_coords_val (1,541,378,091 samples, 0.65%)</title><rect x="97.6613%" y="325" width="0.6530%" height="15" fill="rgb(215,141,46)" fg:x="230528034328" fg:w="1541378091"/><text x="97.9113%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (106,761,705 samples, 0.05%)</title><rect x="98.3277%" y="293" width="0.0452%" height="15" fill="rgb(250,160,47)" fg:x="232101111543" fg:w="106761705"/><text x="98.5777%" y="303.50"></text></g><g><title>core::str::validations::run_utf8_validation (86,927,417 samples, 0.04%)</title><rect x="98.3361%" y="277" width="0.0368%" height="15" fill="rgb(216,222,40)" fg:x="232120945831" fg:w="86927417"/><text x="98.5861%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (33,145,129 samples, 0.01%)</title><rect x="98.3999%" y="261" width="0.0140%" height="15" fill="rgb(234,217,39)" fg:x="232271567940" fg:w="33145129"/><text x="98.6499%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (33,145,129 samples, 0.01%)</title><rect x="98.3999%" y="245" width="0.0140%" height="15" fill="rgb(207,178,40)" fg:x="232271567940" fg:w="33145129"/><text x="98.6499%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (33,145,129 samples, 0.01%)</title><rect x="98.3999%" y="229" width="0.0140%" height="15" fill="rgb(221,136,13)" fg:x="232271567940" fg:w="33145129"/><text x="98.6499%" y="239.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (35,429,866 samples, 0.02%)</title><rect x="98.4461%" y="213" width="0.0150%" height="15" fill="rgb(249,199,10)" fg:x="232380665518" fg:w="35429866"/><text x="98.6961%" y="223.50"></text></g><g><title>matrix_market_rs::MtxData&lt;T,_&gt;::from_file (2,070,510,963 samples, 0.88%)</title><rect x="97.6342%" y="357" width="0.8772%" height="15" fill="rgb(249,222,13)" fg:x="230464191211" fg:w="2070510963"/><text x="97.8842%" y="367.50"></text></g><g><title>matrix_market_rs::parse_sparse_coo (2,070,510,963 samples, 0.88%)</title><rect x="97.6342%" y="341" width="0.8772%" height="15" fill="rgb(244,185,38)" fg:x="230464191211" fg:w="2070510963"/><text x="97.8842%" y="351.50"></text></g><g><title>std::io::BufRead::read_line (465,289,755 samples, 0.20%)</title><rect x="98.3143%" y="325" width="0.1971%" height="15" fill="rgb(236,202,9)" fg:x="232069412419" fg:w="465289755"/><text x="98.5643%" y="335.50"></text></g><g><title>std::io::append_to_string (461,313,265 samples, 0.20%)</title><rect x="98.3159%" y="309" width="0.1954%" height="15" fill="rgb(250,229,37)" fg:x="232073388909" fg:w="461313265"/><text x="98.5659%" y="319.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (326,828,926 samples, 0.14%)</title><rect x="98.3729%" y="293" width="0.1385%" height="15" fill="rgb(206,174,23)" fg:x="232207873248" fg:w="326828926"/><text x="98.6229%" y="303.50"></text></g><g><title>std::io::read_until (326,828,926 samples, 0.14%)</title><rect x="98.3729%" y="277" width="0.1385%" height="15" fill="rgb(211,33,43)" fg:x="232207873248" fg:w="326828926"/><text x="98.6229%" y="287.50"></text></g><g><title>core::slice::memchr::memchr (229,989,105 samples, 0.10%)</title><rect x="98.4139%" y="261" width="0.0974%" height="15" fill="rgb(245,58,50)" fg:x="232304713069" fg:w="229989105"/><text x="98.6639%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_aligned (209,996,424 samples, 0.09%)</title><rect x="98.4224%" y="245" width="0.0890%" height="15" fill="rgb(244,68,36)" fg:x="232324705750" fg:w="209996424"/><text x="98.6724%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (201,974,553 samples, 0.09%)</title><rect x="98.4258%" y="229" width="0.0856%" height="15" fill="rgb(232,229,15)" fg:x="232332727621" fg:w="201974553"/><text x="98.6758%" y="239.50"></text></g><g><title>core::slice::memchr::memchr_naive (118,606,790 samples, 0.05%)</title><rect x="98.4611%" y="213" width="0.0502%" height="15" fill="rgb(254,30,23)" fg:x="232416095384" fg:w="118606790"/><text x="98.7111%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (97,796,220 samples, 0.04%)</title><rect x="98.5255%" y="341" width="0.0414%" height="15" fill="rgb(235,160,14)" fg:x="232568032240" fg:w="97796220"/><text x="98.7755%" y="351.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market (5,563,941,802 samples, 2.36%)</title><rect x="96.2298%" y="373" width="2.3571%" height="15" fill="rgb(212,155,44)" fg:x="227149043855" fg:w="5563941802"/><text x="96.4798%" y="383.50">p..</text></g><g><title>par_matvec::test_utils::mtx_data_to_nalgebra_coo (178,283,483 samples, 0.08%)</title><rect x="98.5114%" y="357" width="0.0755%" height="15" fill="rgb(226,2,50)" fg:x="232534702174" fg:w="178283483"/><text x="98.7614%" y="367.50"></text></g><g><title>nalgebra_sparse::coo::CooMatrix&lt;T&gt;::try_from_triplets (47,157,197 samples, 0.02%)</title><rect x="98.5669%" y="341" width="0.0200%" height="15" fill="rgb(234,177,6)" fg:x="232665828460" fg:w="47157197"/><text x="98.8169%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (47,157,197 samples, 0.02%)</title><rect x="98.5669%" y="325" width="0.0200%" height="15" fill="rgb(217,24,9)" fg:x="232665828460" fg:w="47157197"/><text x="98.8169%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (55,871,672 samples, 0.02%)</title><rect x="98.5869%" y="277" width="0.0237%" height="15" fill="rgb(220,13,46)" fg:x="232712985657" fg:w="55871672"/><text x="98.8369%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (55,871,672 samples, 0.02%)</title><rect x="98.5869%" y="261" width="0.0237%" height="15" fill="rgb(239,221,27)" fg:x="232712985657" fg:w="55871672"/><text x="98.8369%" y="271.50"></text></g><g><title>dyn_stack::MemStack::make_with (137,190,533 samples, 0.06%)</title><rect x="98.5869%" y="325" width="0.0581%" height="15" fill="rgb(222,198,25)" fg:x="232712985657" fg:w="137190533"/><text x="98.8369%" y="335.50"></text></g><g><title>dyn_stack::MemStack::make_aligned_with (137,190,533 samples, 0.06%)</title><rect x="98.5869%" y="309" width="0.0581%" height="15" fill="rgb(211,99,13)" fg:x="232712985657" fg:w="137190533"/><text x="98.8369%" y="319.50"></text></g><g><title>dyn_stack::init_array_with (137,190,533 samples, 0.06%)</title><rect x="98.5869%" y="293" width="0.0581%" height="15" fill="rgb(232,111,31)" fg:x="232712985657" fg:w="137190533"/><text x="98.8369%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (81,318,861 samples, 0.03%)</title><rect x="98.6106%" y="277" width="0.0345%" height="15" fill="rgb(245,82,37)" fg:x="232768857329" fg:w="81318861"/><text x="98.8606%" y="287.50"></text></g><g><title>core::ptr::write (81,318,861 samples, 0.03%)</title><rect x="98.6106%" y="261" width="0.0345%" height="15" fill="rgb(227,149,46)" fg:x="232768857329" fg:w="81318861"/><text x="98.8606%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (81,689,254 samples, 0.03%)</title><rect x="98.6533%" y="213" width="0.0346%" height="15" fill="rgb(218,36,50)" fg:x="232869667261" fg:w="81689254"/><text x="98.9033%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (53,427,412 samples, 0.02%)</title><rect x="98.6653%" y="197" width="0.0226%" height="15" fill="rgb(226,80,48)" fg:x="232897929103" fg:w="53427412"/><text x="98.9153%" y="207.50"></text></g><g><title>core::ptr::read (53,427,412 samples, 0.02%)</title><rect x="98.6653%" y="181" width="0.0226%" height="15" fill="rgb(238,224,15)" fg:x="232897929103" fg:w="53427412"/><text x="98.9153%" y="191.50"></text></g><g><title>&lt;faer::col::generic::Col&lt;Inner&gt; as core::ops::index::Index&lt;&lt;Rows as faer::ShapeIdx&gt;::Idx&lt;usize&gt;&gt;&gt;::index (25,387,747 samples, 0.01%)</title><rect x="98.6879%" y="213" width="0.0108%" height="15" fill="rgb(241,136,10)" fg:x="232951356515" fg:w="25387747"/><text x="98.9379%" y="223.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::at (25,387,747 samples, 0.01%)</title><rect x="98.6879%" y="197" width="0.0108%" height="15" fill="rgb(208,32,45)" fg:x="232951356515" fg:w="25387747"/><text x="98.9379%" y="207.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::at_unchecked (25,387,747 samples, 0.01%)</title><rect x="98.6879%" y="181" width="0.0108%" height="15" fill="rgb(207,135,9)" fg:x="232951356515" fg:w="25387747"/><text x="98.9379%" y="191.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::ptr_inbounds_at (25,387,747 samples, 0.01%)</title><rect x="98.6879%" y="165" width="0.0108%" height="15" fill="rgb(206,86,44)" fg:x="232951356515" fg:w="25387747"/><text x="98.9379%" y="175.50"></text></g><g><title>std::panic::catch_unwind (5,852,157,635 samples, 2.48%)</title><rect x="96.2298%" y="501" width="2.4792%" height="15" fill="rgb(245,177,15)" fg:x="227149043855" fg:w="5852157635"/><text x="96.4798%" y="511.50">st..</text></g><g><title>std::panicking::try (5,852,157,635 samples, 2.48%)</title><rect x="96.2298%" y="485" width="2.4792%" height="15" fill="rgb(206,64,50)" fg:x="227149043855" fg:w="5852157635"/><text x="96.4798%" y="495.50">st..</text></g><g><title>std::panicking::try::do_call (5,852,157,635 samples, 2.48%)</title><rect x="96.2298%" y="469" width="2.4792%" height="15" fill="rgb(234,36,40)" fg:x="227149043855" fg:w="5852157635"/><text x="96.4798%" y="479.50">st..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5,852,157,635 samples, 2.48%)</title><rect x="96.2298%" y="453" width="2.4792%" height="15" fill="rgb(213,64,8)" fg:x="227149043855" fg:w="5852157635"/><text x="96.4798%" y="463.50">co..</text></g><g><title>std::rt::lang_start::_{{closure}} (5,852,157,635 samples, 2.48%)</title><rect x="96.2298%" y="437" width="2.4792%" height="15" fill="rgb(210,75,36)" fg:x="227149043855" fg:w="5852157635"/><text x="96.4798%" y="447.50">st..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (5,852,157,635 samples, 2.48%)</title><rect x="96.2298%" y="421" width="2.4792%" height="15" fill="rgb(229,88,21)" fg:x="227149043855" fg:w="5852157635"/><text x="96.4798%" y="431.50">st..</text></g><g><title>core::ops::function::FnOnce::call_once (5,852,157,635 samples, 2.48%)</title><rect x="96.2298%" y="405" width="2.4792%" height="15" fill="rgb(252,204,47)" fg:x="227149043855" fg:w="5852157635"/><text x="96.4798%" y="415.50">co..</text></g><g><title>profile_spmv::main (5,852,157,635 samples, 2.48%)</title><rect x="96.2298%" y="389" width="2.4792%" height="15" fill="rgb(208,77,27)" fg:x="227149043855" fg:w="5852157635"/><text x="96.4798%" y="399.50">pr..</text></g><g><title>profile_spmv::profile_sparse_dense_merge (288,215,833 samples, 0.12%)</title><rect x="98.5869%" y="373" width="0.1221%" height="15" fill="rgb(221,76,26)" fg:x="232712985657" fg:w="288215833"/><text x="98.8369%" y="383.50"></text></g><g><title>par_matvec::spmv_drivers::sparse_dense_matmul (288,215,833 samples, 0.12%)</title><rect x="98.5869%" y="357" width="0.1221%" height="15" fill="rgb(225,139,18)" fg:x="232712985657" fg:w="288215833"/><text x="98.8369%" y="367.50"></text></g><g><title>par_matvec::sparse_dense_impl::merge::par_sparse_dense (288,215,833 samples, 0.12%)</title><rect x="98.5869%" y="341" width="0.1221%" height="15" fill="rgb(230,137,11)" fg:x="232712985657" fg:w="288215833"/><text x="98.8369%" y="351.50"></text></g><g><title>std::thread::scoped::scope (151,025,300 samples, 0.06%)</title><rect x="98.6450%" y="325" width="0.0640%" height="15" fill="rgb(212,28,1)" fg:x="232850176190" fg:w="151025300"/><text x="98.8950%" y="335.50"></text></g><g><title>std::panic::catch_unwind (151,025,300 samples, 0.06%)</title><rect x="98.6450%" y="309" width="0.0640%" height="15" fill="rgb(248,164,17)" fg:x="232850176190" fg:w="151025300"/><text x="98.8950%" y="319.50"></text></g><g><title>std::panicking::try (151,025,300 samples, 0.06%)</title><rect x="98.6450%" y="293" width="0.0640%" height="15" fill="rgb(222,171,42)" fg:x="232850176190" fg:w="151025300"/><text x="98.8950%" y="303.50"></text></g><g><title>std::panicking::try::do_call (151,025,300 samples, 0.06%)</title><rect x="98.6450%" y="277" width="0.0640%" height="15" fill="rgb(243,84,45)" fg:x="232850176190" fg:w="151025300"/><text x="98.8950%" y="287.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (151,025,300 samples, 0.06%)</title><rect x="98.6450%" y="261" width="0.0640%" height="15" fill="rgb(252,49,23)" fg:x="232850176190" fg:w="151025300"/><text x="98.8950%" y="271.50"></text></g><g><title>std::thread::scoped::scope::_{{closure}} (151,025,300 samples, 0.06%)</title><rect x="98.6450%" y="245" width="0.0640%" height="15" fill="rgb(215,19,7)" fg:x="232850176190" fg:w="151025300"/><text x="98.8950%" y="255.50"></text></g><g><title>par_matvec::sparse_dense_impl::merge::par_sparse_dense::_{{closure}} (151,025,300 samples, 0.06%)</title><rect x="98.6450%" y="229" width="0.0640%" height="15" fill="rgb(238,81,41)" fg:x="232850176190" fg:w="151025300"/><text x="98.8950%" y="239.50"></text></g><g><title>faer::col::colmut::&lt;impl faer::col::generic::Col&lt;Inner&gt;&gt;::fill (24,457,228 samples, 0.01%)</title><rect x="98.6986%" y="213" width="0.0104%" height="15" fill="rgb(210,199,37)" fg:x="232976744262" fg:w="24457228"/><text x="98.9486%" y="223.50"></text></g><g><title>faer::linalg::zip::LastEq&lt;Rows,(),M&gt;::for_each (24,457,228 samples, 0.01%)</title><rect x="98.6986%" y="197" width="0.0104%" height="15" fill="rgb(244,192,49)" fg:x="232976744262" fg:w="24457228"/><text x="98.9486%" y="207.50"></text></g><g><title>faer::linalg::zip::for_each_col (24,457,228 samples, 0.01%)</title><rect x="98.6986%" y="181" width="0.0104%" height="15" fill="rgb(226,211,11)" fg:x="232976744262" fg:w="24457228"/><text x="98.9486%" y="191.50"></text></g><g><title>faer::linalg::zip::annotate_noalias_col (24,457,228 samples, 0.01%)</title><rect x="98.6986%" y="165" width="0.0104%" height="15" fill="rgb(236,162,54)" fg:x="232976744262" fg:w="24457228"/><text x="98.9486%" y="175.50"></text></g><g><title>faer::col::colmut::_&lt;impl faer::col::generic::Col&lt;Inner&gt;&gt;::fill::cloner::_{{closure}} (24,457,228 samples, 0.01%)</title><rect x="98.6986%" y="149" width="0.0104%" height="15" fill="rgb(220,229,9)" fg:x="232976744262" fg:w="24457228"/><text x="98.9486%" y="159.50"></text></g><g><title>[libc.so.6] (24,457,228 samples, 0.01%)</title><rect x="98.6986%" y="133" width="0.0104%" height="15" fill="rgb(250,87,22)" fg:x="232976744262" fg:w="24457228"/><text x="98.9486%" y="143.50"></text></g><g><title>_start (5,852,659,139 samples, 2.48%)</title><rect x="96.2298%" y="645" width="2.4794%" height="15" fill="rgb(239,43,17)" fg:x="227149043855" fg:w="5852659139"/><text x="96.4798%" y="655.50">_s..</text></g><g><title>__libc_start_main (5,852,659,139 samples, 2.48%)</title><rect x="96.2298%" y="629" width="2.4794%" height="15" fill="rgb(231,177,25)" fg:x="227149043855" fg:w="5852659139"/><text x="96.4798%" y="639.50">__..</text></g><g><title>[libc.so.6] (5,852,659,139 samples, 2.48%)</title><rect x="96.2298%" y="613" width="2.4794%" height="15" fill="rgb(219,179,1)" fg:x="227149043855" fg:w="5852659139"/><text x="96.4798%" y="623.50">[l..</text></g><g><title>main (5,852,659,139 samples, 2.48%)</title><rect x="96.2298%" y="597" width="2.4794%" height="15" fill="rgb(238,219,53)" fg:x="227149043855" fg:w="5852659139"/><text x="96.4798%" y="607.50">ma..</text></g><g><title>std::rt::lang_start_internal (5,852,659,139 samples, 2.48%)</title><rect x="96.2298%" y="581" width="2.4794%" height="15" fill="rgb(232,167,36)" fg:x="227149043855" fg:w="5852659139"/><text x="96.4798%" y="591.50">st..</text></g><g><title>std::panic::catch_unwind (5,852,659,139 samples, 2.48%)</title><rect x="96.2298%" y="565" width="2.4794%" height="15" fill="rgb(244,19,51)" fg:x="227149043855" fg:w="5852659139"/><text x="96.4798%" y="575.50">st..</text></g><g><title>std::panicking::try (5,852,659,139 samples, 2.48%)</title><rect x="96.2298%" y="549" width="2.4794%" height="15" fill="rgb(224,6,22)" fg:x="227149043855" fg:w="5852659139"/><text x="96.4798%" y="559.50">st..</text></g><g><title>std::panicking::try::do_call (5,852,659,139 samples, 2.48%)</title><rect x="96.2298%" y="533" width="2.4794%" height="15" fill="rgb(224,145,5)" fg:x="227149043855" fg:w="5852659139"/><text x="96.4798%" y="543.50">st..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (5,852,659,139 samples, 2.48%)</title><rect x="96.2298%" y="517" width="2.4794%" height="15" fill="rgb(234,130,49)" fg:x="227149043855" fg:w="5852659139"/><text x="96.4798%" y="527.50">st..</text></g><g><title>par_matvec::sparse_dense_impl::merge::LoserTree&lt;T&gt;::push (2,918,667,697 samples, 1.24%)</title><rect x="98.7365%" y="645" width="1.2365%" height="15" fill="rgb(254,6,2)" fg:x="233066076340" fg:w="2918667697"/><text x="98.9865%" y="655.50"></text></g><g><title>all (236,048,573,783 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(208,96,46)" fg:x="0" fg:w="236048573783"/><text x="0.2500%" y="687.50"></text></g><g><title>profile_spmv (236,048,573,783 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="236048573783"/><text x="0.2500%" y="671.50">profile_spmv</text></g><g><title>std::io::append_to_string (63,829,746 samples, 0.03%)</title><rect x="99.9730%" y="645" width="0.0270%" height="15" fill="rgb(233,210,1)" fg:x="235984744037" fg:w="63829746"/><text x="100.2230%" y="655.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (28,063,430 samples, 0.01%)</title><rect x="99.9881%" y="629" width="0.0119%" height="15" fill="rgb(244,137,37)" fg:x="236020510353" fg:w="28063430"/><text x="100.2381%" y="639.50"></text></g><g><title>std::io::read_until (28,063,430 samples, 0.01%)</title><rect x="99.9881%" y="613" width="0.0119%" height="15" fill="rgb(240,136,2)" fg:x="236020510353" fg:w="28063430"/><text x="100.2381%" y="623.50"></text></g></svg></svg>