<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="222106217466"><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (951,908,468 samples, 0.43%)</title><rect x="25.0740%" y="421" width="0.4286%" height="15" fill="rgb(227,0,7)" fg:x="55690983499" fg:w="951908468"/><text x="25.3240%" y="431.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (951,908,468 samples, 0.43%)</title><rect x="25.0740%" y="405" width="0.4286%" height="15" fill="rgb(217,0,24)" fg:x="55690983499" fg:w="951908468"/><text x="25.3240%" y="415.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (951,908,468 samples, 0.43%)</title><rect x="25.0740%" y="389" width="0.4286%" height="15" fill="rgb(221,193,54)" fg:x="55690983499" fg:w="951908468"/><text x="25.3240%" y="399.50"></text></g><g><title>&lt;Lhs as faer_traits::MulByRef&lt;Rhs&gt;&gt;::mul_by_ref (5,743,026,716 samples, 2.59%)</title><rect x="25.5026%" y="421" width="2.5857%" height="15" fill="rgb(248,212,6)" fg:x="56642891967" fg:w="5743026716"/><text x="25.7526%" y="431.50">&lt;L..</text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&gt;::mul (5,743,026,716 samples, 2.59%)</title><rect x="25.5026%" y="405" width="2.5857%" height="15" fill="rgb(208,68,35)" fg:x="56642891967" fg:w="5743026716"/><text x="25.7526%" y="415.50">&lt;&amp;..</text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (5,743,026,716 samples, 2.59%)</title><rect x="25.5026%" y="389" width="2.5857%" height="15" fill="rgb(232,128,0)" fg:x="56642891967" fg:w="5743026716"/><text x="25.7526%" y="399.50">&lt;f..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (546,136,943 samples, 0.25%)</title><rect x="28.0883%" y="421" width="0.2459%" height="15" fill="rgb(207,160,47)" fg:x="62385918683" fg:w="546136943"/><text x="28.3383%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (546,136,943 samples, 0.25%)</title><rect x="28.0883%" y="405" width="0.2459%" height="15" fill="rgb(228,23,34)" fg:x="62385918683" fg:w="546136943"/><text x="28.3383%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (94,367,669 samples, 0.04%)</title><rect x="28.3342%" y="421" width="0.0425%" height="15" fill="rgb(218,30,26)" fg:x="62932055626" fg:w="94367669"/><text x="28.5842%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (94,367,669 samples, 0.04%)</title><rect x="28.3342%" y="405" width="0.0425%" height="15" fill="rgb(220,122,19)" fg:x="62932055626" fg:w="94367669"/><text x="28.5842%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (94,367,669 samples, 0.04%)</title><rect x="28.3342%" y="389" width="0.0425%" height="15" fill="rgb(250,228,42)" fg:x="62932055626" fg:w="94367669"/><text x="28.5842%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1,672,254,153 samples, 0.75%)</title><rect x="28.3767%" y="405" width="0.7529%" height="15" fill="rgb(240,193,28)" fg:x="63026423295" fg:w="1672254153"/><text x="28.6267%" y="415.50"></text></g><g><title>core::ptr::read (823,663,906 samples, 0.37%)</title><rect x="28.7588%" y="389" width="0.3708%" height="15" fill="rgb(216,20,37)" fg:x="63875013542" fg:w="823663906"/><text x="29.0088%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (1,668,815,555 samples, 0.75%)</title><rect x="39.0466%" y="341" width="0.7514%" height="15" fill="rgb(206,188,39)" fg:x="86724841892" fg:w="1668815555"/><text x="39.2966%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1,668,815,555 samples, 0.75%)</title><rect x="39.0466%" y="325" width="0.7514%" height="15" fill="rgb(217,207,13)" fg:x="86724841892" fg:w="1668815555"/><text x="39.2966%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,668,815,555 samples, 0.75%)</title><rect x="39.0466%" y="309" width="0.7514%" height="15" fill="rgb(231,73,38)" fg:x="86724841892" fg:w="1668815555"/><text x="39.2966%" y="319.50"></text></g><g><title>core::slice::index::get_noubcheck (1,668,815,555 samples, 0.75%)</title><rect x="39.0466%" y="293" width="0.7514%" height="15" fill="rgb(225,20,46)" fg:x="86724841892" fg:w="1668815555"/><text x="39.2966%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,339,997,096 samples, 1.50%)</title><rect x="39.7979%" y="325" width="1.5038%" height="15" fill="rgb(210,31,41)" fg:x="88393657447" fg:w="3339997096"/><text x="40.0479%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (4,351,470,431 samples, 1.96%)</title><rect x="39.7979%" y="341" width="1.9592%" height="15" fill="rgb(221,200,47)" fg:x="88393657447" fg:w="4351470431"/><text x="40.0479%" y="351.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,011,473,335 samples, 0.46%)</title><rect x="41.3017%" y="325" width="0.4554%" height="15" fill="rgb(226,26,5)" fg:x="91733654543" fg:w="1011473335"/><text x="41.5517%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (381,288,208 samples, 0.17%)</title><rect x="41.7571%" y="341" width="0.1717%" height="15" fill="rgb(249,33,26)" fg:x="92745127878" fg:w="381288208"/><text x="42.0071%" y="351.50"></text></g><g><title>core::ptr::read (381,288,208 samples, 0.17%)</title><rect x="41.7571%" y="325" width="0.1717%" height="15" fill="rgb(235,183,28)" fg:x="92745127878" fg:w="381288208"/><text x="42.0071%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (456,499,693 samples, 0.21%)</title><rect x="41.9288%" y="341" width="0.2055%" height="15" fill="rgb(221,5,38)" fg:x="93126416086" fg:w="456499693"/><text x="42.1788%" y="351.50"></text></g><g><title>core::cmp::PartialOrd::le (456,499,693 samples, 0.21%)</title><rect x="41.9288%" y="325" width="0.2055%" height="15" fill="rgb(247,18,42)" fg:x="93126416086" fg:w="456499693"/><text x="42.1788%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (456,499,693 samples, 0.21%)</title><rect x="41.9288%" y="309" width="0.2055%" height="15" fill="rgb(241,131,45)" fg:x="93126416086" fg:w="456499693"/><text x="42.1788%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,302,760,310 samples, 1.04%)</title><rect x="42.1343%" y="309" width="1.0368%" height="15" fill="rgb(249,31,29)" fg:x="93582915779" fg:w="2302760310"/><text x="42.3843%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (15,039,240,364 samples, 6.77%)</title><rect x="36.9520%" y="357" width="6.7712%" height="15" fill="rgb(225,111,53)" fg:x="82072688626" fg:w="15039240364"/><text x="37.2020%" y="367.50">alloc::co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;par_matvec::sparse_dense_impl::merge::HeapEntry&lt;f64&gt;&gt;&gt; (3,529,013,211 samples, 1.59%)</title><rect x="42.1343%" y="341" width="1.5889%" height="15" fill="rgb(238,160,17)" fg:x="93582915779" fg:w="3529013211"/><text x="42.3843%" y="351.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,529,013,211 samples, 1.59%)</title><rect x="42.1343%" y="325" width="1.5889%" height="15" fill="rgb(214,148,48)" fg:x="93582915779" fg:w="3529013211"/><text x="42.3843%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1,226,252,901 samples, 0.55%)</title><rect x="43.1711%" y="309" width="0.5521%" height="15" fill="rgb(232,36,49)" fg:x="95885676089" fg:w="1226252901"/><text x="43.4211%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1,226,252,901 samples, 0.55%)</title><rect x="43.1711%" y="293" width="0.5521%" height="15" fill="rgb(209,103,24)" fg:x="95885676089" fg:w="1226252901"/><text x="43.4211%" y="303.50"></text></g><g><title>core::slice::index::get_mut_noubcheck (1,226,252,901 samples, 0.55%)</title><rect x="43.1711%" y="277" width="0.5521%" height="15" fill="rgb(229,88,8)" fg:x="95885676089" fg:w="1226252901"/><text x="43.4211%" y="287.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (539,955,870 samples, 0.24%)</title><rect x="43.7232%" y="357" width="0.2431%" height="15" fill="rgb(213,181,19)" fg:x="97111928990" fg:w="539955870"/><text x="43.9732%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (539,955,870 samples, 0.24%)</title><rect x="43.7232%" y="341" width="0.2431%" height="15" fill="rgb(254,191,54)" fg:x="97111928990" fg:w="539955870"/><text x="43.9732%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (539,955,870 samples, 0.24%)</title><rect x="43.7232%" y="325" width="0.2431%" height="15" fill="rgb(241,83,37)" fg:x="97111928990" fg:w="539955870"/><text x="43.9732%" y="335.50"></text></g><g><title>core::slice::index::get_noubcheck (539,955,870 samples, 0.24%)</title><rect x="43.7232%" y="309" width="0.2431%" height="15" fill="rgb(233,36,39)" fg:x="97111928990" fg:w="539955870"/><text x="43.9732%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34,982,731,060 samples, 15.75%)</title><rect x="43.9663%" y="341" width="15.7505%" height="15" fill="rgb(226,3,54)" fg:x="97651884860" fg:w="34982731060"/><text x="44.2163%" y="351.50">core::intrinsics::copy_n..</text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (45,048,685,146 samples, 20.28%)</title><rect x="43.9663%" y="357" width="20.2825%" height="15" fill="rgb(245,192,40)" fg:x="97651884860" fg:w="45048685146"/><text x="44.2163%" y="367.50">alloc::collections::binary_heap:..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (10,065,954,086 samples, 4.53%)</title><rect x="59.7168%" y="341" width="4.5320%" height="15" fill="rgb(238,167,29)" fg:x="132634615920" fg:w="10065954086"/><text x="59.9668%" y="351.50">core:..</text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (2,781,688,557 samples, 1.25%)</title><rect x="64.2488%" y="357" width="1.2524%" height="15" fill="rgb(232,182,51)" fg:x="142700570006" fg:w="2781688557"/><text x="64.4988%" y="367.50"></text></g><g><title>core::ptr::read (2,781,688,557 samples, 1.25%)</title><rect x="64.2488%" y="341" width="1.2524%" height="15" fill="rgb(231,60,39)" fg:x="142700570006" fg:w="2781688557"/><text x="64.4988%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (28,814,065,861 samples, 12.97%)</title><rect x="65.5012%" y="357" width="12.9731%" height="15" fill="rgb(208,69,12)" fg:x="145482258563" fg:w="28814065861"/><text x="65.7512%" y="367.50">core::cmp::impls::&lt;..</text></g><g><title>core::cmp::PartialOrd::le (14,187,524,407 samples, 6.39%)</title><rect x="72.0866%" y="341" width="6.3877%" height="15" fill="rgb(235,93,37)" fg:x="160108800017" fg:w="14187524407"/><text x="72.3366%" y="351.50">core::cm..</text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (14,187,524,407 samples, 6.39%)</title><rect x="72.0866%" y="325" width="6.3877%" height="15" fill="rgb(213,116,39)" fg:x="160108800017" fg:w="14187524407"/><text x="72.3366%" y="335.50">core::op..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3,867,864,755 samples, 1.74%)</title><rect x="78.4743%" y="309" width="1.7414%" height="15" fill="rgb(222,207,29)" fg:x="174296324424" fg:w="3867864755"/><text x="78.7243%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom (112,217,620,880 samples, 50.52%)</title><rect x="29.7371%" y="373" width="50.5243%" height="15" fill="rgb(206,96,30)" fg:x="66047932984" fg:w="112217620880"/><text x="29.9871%" y="383.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom</text></g><g><title>core::mem::drop (3,969,229,440 samples, 1.79%)</title><rect x="78.4743%" y="357" width="1.7871%" height="15" fill="rgb(218,138,4)" fg:x="174296324424" fg:w="3969229440"/><text x="78.7243%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;par_matvec::sparse_dense_impl::merge::HeapEntry&lt;f64&gt;&gt;&gt; (3,969,229,440 samples, 1.79%)</title><rect x="78.4743%" y="341" width="1.7871%" height="15" fill="rgb(250,191,14)" fg:x="174296324424" fg:w="3969229440"/><text x="78.7243%" y="351.50">c..</text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,969,229,440 samples, 1.79%)</title><rect x="78.4743%" y="325" width="1.7871%" height="15" fill="rgb(239,60,40)" fg:x="174296324424" fg:w="3969229440"/><text x="78.7243%" y="335.50">&lt;..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (101,364,685 samples, 0.05%)</title><rect x="80.2158%" y="309" width="0.0456%" height="15" fill="rgb(206,27,48)" fg:x="178164189179" fg:w="101364685"/><text x="80.4658%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (101,364,685 samples, 0.05%)</title><rect x="80.2158%" y="293" width="0.0456%" height="15" fill="rgb(225,35,8)" fg:x="178164189179" fg:w="101364685"/><text x="80.4658%" y="303.50"></text></g><g><title>core::slice::index::get_mut_noubcheck (101,364,685 samples, 0.05%)</title><rect x="80.2158%" y="277" width="0.0456%" height="15" fill="rgb(250,213,24)" fg:x="178164189179" fg:w="101364685"/><text x="80.4658%" y="287.50"></text></g><g><title>core::ptr::read (639,256,115 samples, 0.29%)</title><rect x="80.2614%" y="293" width="0.2878%" height="15" fill="rgb(247,123,22)" fg:x="178265553864" fg:w="639256115"/><text x="80.5114%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (117,072,983,349 samples, 52.71%)</title><rect x="28.3767%" y="421" width="52.7104%" height="15" fill="rgb(231,138,38)" fg:x="63026423295" fg:w="117072983349"/><text x="28.6267%" y="431.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop</text></g><g><title>core::option::Option&lt;T&gt;::map (115,400,729,196 samples, 51.96%)</title><rect x="29.1296%" y="405" width="51.9575%" height="15" fill="rgb(231,145,46)" fg:x="64698677448" fg:w="115400729196"/><text x="29.3796%" y="415.50">core::option::Option&lt;T&gt;::map</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}} (114,055,346,126 samples, 51.35%)</title><rect x="29.7353%" y="389" width="51.3517%" height="15" fill="rgb(251,118,11)" fg:x="66044060518" fg:w="114055346126"/><text x="29.9853%" y="399.50">alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}}</text></g><g><title>core::mem::swap (1,833,852,780 samples, 0.83%)</title><rect x="80.2614%" y="373" width="0.8257%" height="15" fill="rgb(217,147,25)" fg:x="178265553864" fg:w="1833852780"/><text x="80.5114%" y="383.50"></text></g><g><title>core::intrinsics::typed_swap_nonoverlapping (1,833,852,780 samples, 0.83%)</title><rect x="80.2614%" y="357" width="0.8257%" height="15" fill="rgb(247,81,37)" fg:x="178265553864" fg:w="1833852780"/><text x="80.5114%" y="367.50"></text></g><g><title>core::ptr::swap_nonoverlapping (1,833,852,780 samples, 0.83%)</title><rect x="80.2614%" y="341" width="0.8257%" height="15" fill="rgb(209,12,38)" fg:x="178265553864" fg:w="1833852780"/><text x="80.5114%" y="351.50"></text></g><g><title>core::ptr::swap_nonoverlapping::runtime (1,833,852,780 samples, 0.83%)</title><rect x="80.2614%" y="325" width="0.8257%" height="15" fill="rgb(227,1,9)" fg:x="178265553864" fg:w="1833852780"/><text x="80.5114%" y="335.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (1,833,852,780 samples, 0.83%)</title><rect x="80.2614%" y="309" width="0.8257%" height="15" fill="rgb(248,47,43)" fg:x="178265553864" fg:w="1833852780"/><text x="80.5114%" y="319.50"></text></g><g><title>core::ptr::write (1,194,596,665 samples, 0.54%)</title><rect x="80.5492%" y="293" width="0.5378%" height="15" fill="rgb(221,10,30)" fg:x="178904809979" fg:w="1194596665"/><text x="80.7992%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::len (450,892,785 samples, 0.20%)</title><rect x="81.2077%" y="405" width="0.2030%" height="15" fill="rgb(210,229,1)" fg:x="180367309249" fg:w="450892785"/><text x="81.4577%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (450,892,785 samples, 0.20%)</title><rect x="81.2077%" y="389" width="0.2030%" height="15" fill="rgb(222,148,37)" fg:x="180367309249" fg:w="450892785"/><text x="81.4577%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (730,699,063 samples, 0.33%)</title><rect x="82.9818%" y="389" width="0.3290%" height="15" fill="rgb(234,67,33)" fg:x="184307758464" fg:w="730699063"/><text x="83.2318%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (730,699,063 samples, 0.33%)</title><rect x="82.9818%" y="373" width="0.3290%" height="15" fill="rgb(247,98,35)" fg:x="184307758464" fg:w="730699063"/><text x="83.2318%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (730,699,063 samples, 0.33%)</title><rect x="82.9818%" y="357" width="0.3290%" height="15" fill="rgb(247,138,52)" fg:x="184307758464" fg:w="730699063"/><text x="83.2318%" y="367.50"></text></g><g><title>core::slice::index::get_noubcheck (730,699,063 samples, 0.33%)</title><rect x="82.9818%" y="341" width="0.3290%" height="15" fill="rgb(213,79,30)" fg:x="184307758464" fg:w="730699063"/><text x="83.2318%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,021,161,139 samples, 0.46%)</title><rect x="83.3108%" y="373" width="0.4598%" height="15" fill="rgb(246,177,23)" fg:x="185038457527" fg:w="1021161139"/><text x="83.5608%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (1,303,691,762 samples, 0.59%)</title><rect x="83.3108%" y="389" width="0.5870%" height="15" fill="rgb(230,62,27)" fg:x="185038457527" fg:w="1303691762"/><text x="83.5608%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (282,530,623 samples, 0.13%)</title><rect x="83.7706%" y="373" width="0.1272%" height="15" fill="rgb(216,154,8)" fg:x="186059618666" fg:w="282530623"/><text x="84.0206%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (10,842,902,757 samples, 4.88%)</title><rect x="83.8978%" y="389" width="4.8819%" height="15" fill="rgb(244,35,45)" fg:x="186342149289" fg:w="10842902757"/><text x="84.1478%" y="399.50">alloc:..</text></g><g><title>core::ptr::read (10,842,902,757 samples, 4.88%)</title><rect x="83.8978%" y="373" width="4.8819%" height="15" fill="rgb(251,115,12)" fg:x="186342149289" fg:w="10842902757"/><text x="84.1478%" y="383.50">core::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (115,846,255 samples, 0.05%)</title><rect x="88.7796%" y="389" width="0.0522%" height="15" fill="rgb(240,54,50)" fg:x="197185052046" fg:w="115846255"/><text x="89.0296%" y="399.50"></text></g><g><title>core::cmp::PartialOrd::le (115,846,255 samples, 0.05%)</title><rect x="88.7796%" y="373" width="0.0522%" height="15" fill="rgb(233,84,52)" fg:x="197185052046" fg:w="115846255"/><text x="89.0296%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (115,846,255 samples, 0.05%)</title><rect x="88.7796%" y="357" width="0.0522%" height="15" fill="rgb(207,117,47)" fg:x="197185052046" fg:w="115846255"/><text x="89.0296%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,428,172,015 samples, 0.64%)</title><rect x="88.8318%" y="357" width="0.6430%" height="15" fill="rgb(249,43,39)" fg:x="197300898301" fg:w="1428172015"/><text x="89.0818%" y="367.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (17,995,854,907 samples, 8.10%)</title><rect x="81.4107%" y="405" width="8.1024%" height="15" fill="rgb(209,38,44)" fg:x="180818202034" fg:w="17995854907"/><text x="81.6607%" y="415.50">alloc::coll..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;par_matvec::sparse_dense_impl::merge::HeapEntry&lt;f64&gt;&gt;&gt; (1,513,158,640 samples, 0.68%)</title><rect x="88.8318%" y="389" width="0.6813%" height="15" fill="rgb(236,212,23)" fg:x="197300898301" fg:w="1513158640"/><text x="89.0818%" y="399.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,513,158,640 samples, 0.68%)</title><rect x="88.8318%" y="373" width="0.6813%" height="15" fill="rgb(242,79,21)" fg:x="197300898301" fg:w="1513158640"/><text x="89.0818%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (84,986,625 samples, 0.04%)</title><rect x="89.4748%" y="357" width="0.0383%" height="15" fill="rgb(211,96,35)" fg:x="198729070316" fg:w="84986625"/><text x="89.7248%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (84,986,625 samples, 0.04%)</title><rect x="89.4748%" y="341" width="0.0383%" height="15" fill="rgb(253,215,40)" fg:x="198729070316" fg:w="84986625"/><text x="89.7248%" y="351.50"></text></g><g><title>core::slice::index::get_mut_noubcheck (84,986,625 samples, 0.04%)</title><rect x="89.4748%" y="325" width="0.0383%" height="15" fill="rgb(211,81,21)" fg:x="198729070316" fg:w="84986625"/><text x="89.7248%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (22,397,753,663 samples, 10.08%)</title><rect x="81.0871%" y="421" width="10.0843%" height="15" fill="rgb(208,190,38)" fg:x="180099406644" fg:w="22397753663"/><text x="81.3371%" y="431.50">alloc::collecti..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,683,103,366 samples, 1.66%)</title><rect x="89.5131%" y="405" width="1.6583%" height="15" fill="rgb(235,213,38)" fg:x="198814056941" fg:w="3683103366"/><text x="89.7631%" y="415.50"></text></g><g><title>core::ptr::write (2,433,016,912 samples, 1.10%)</title><rect x="90.0759%" y="389" width="1.0954%" height="15" fill="rgb(237,122,38)" fg:x="200064143395" fg:w="2433016912"/><text x="90.3259%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (145,910,201 samples, 0.07%)</title><rect x="91.1713%" y="421" width="0.0657%" height="15" fill="rgb(244,218,35)" fg:x="202497160307" fg:w="145910201"/><text x="91.4213%" y="431.50"></text></g><g><title>core::ptr::write (111,303,027 samples, 0.05%)</title><rect x="91.1869%" y="405" width="0.0501%" height="15" fill="rgb(240,68,47)" fg:x="202531767481" fg:w="111303027"/><text x="91.4369%" y="415.50"></text></g><g><title>alloc::vec::from_elem (45,341,013 samples, 0.02%)</title><rect x="91.2370%" y="421" width="0.0204%" height="15" fill="rgb(210,16,53)" fg:x="202643070508" fg:w="45341013"/><text x="91.4870%" y="431.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (45,341,013 samples, 0.02%)</title><rect x="91.2370%" y="405" width="0.0204%" height="15" fill="rgb(235,124,12)" fg:x="202643070508" fg:w="45341013"/><text x="91.4870%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (45,341,013 samples, 0.02%)</title><rect x="91.2370%" y="389" width="0.0204%" height="15" fill="rgb(224,169,11)" fg:x="202643070508" fg:w="45341013"/><text x="91.4870%" y="399.50"></text></g><g><title>core::ptr::write (45,341,013 samples, 0.02%)</title><rect x="91.2370%" y="373" width="0.0204%" height="15" fill="rgb(250,166,2)" fg:x="202643070508" fg:w="45341013"/><text x="91.4870%" y="383.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (9,818,946,949 samples, 4.42%)</title><rect x="91.2574%" y="421" width="4.4208%" height="15" fill="rgb(242,216,29)" fg:x="202688411521" fg:w="9818946949"/><text x="91.5074%" y="431.50">core:..</text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::current_len (27,300,491 samples, 0.01%)</title><rect x="95.6855%" y="181" width="0.0123%" height="15" fill="rgb(230,116,27)" fg:x="212523335559" fg:w="27300491"/><text x="95.9355%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (91,092,548 samples, 0.04%)</title><rect x="95.6848%" y="213" width="0.0410%" height="15" fill="rgb(228,99,48)" fg:x="212521831047" fg:w="91092548"/><text x="95.9348%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (91,092,548 samples, 0.04%)</title><rect x="95.6848%" y="197" width="0.0410%" height="15" fill="rgb(253,11,6)" fg:x="212521831047" fg:w="91092548"/><text x="95.9348%" y="207.50"></text></g><g><title>core::ptr::write (56,750,186 samples, 0.03%)</title><rect x="95.7002%" y="181" width="0.0256%" height="15" fill="rgb(247,143,39)" fg:x="212556173409" fg:w="56750186"/><text x="95.9502%" y="191.50"></text></g><g><title>&lt;Lhs as faer_traits::MulByRef&lt;Rhs&gt;&gt;::mul_by_ref (32,343,366 samples, 0.01%)</title><rect x="95.7333%" y="197" width="0.0146%" height="15" fill="rgb(236,97,10)" fg:x="212629645269" fg:w="32343366"/><text x="95.9833%" y="207.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&gt;::mul (32,343,366 samples, 0.01%)</title><rect x="95.7333%" y="181" width="0.0146%" height="15" fill="rgb(233,208,19)" fg:x="212629645269" fg:w="32343366"/><text x="95.9833%" y="191.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (32,343,366 samples, 0.01%)</title><rect x="95.7333%" y="165" width="0.0146%" height="15" fill="rgb(216,164,2)" fg:x="212629645269" fg:w="32343366"/><text x="95.9833%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (212,467,531 samples, 0.10%)</title><rect x="95.6783%" y="421" width="0.0957%" height="15" fill="rgb(220,129,5)" fg:x="212507358470" fg:w="212467531"/><text x="95.9283%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (212,467,531 samples, 0.10%)</title><rect x="95.6783%" y="405" width="0.0957%" height="15" fill="rgb(242,17,10)" fg:x="212507358470" fg:w="212467531"/><text x="95.9283%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (212,467,531 samples, 0.10%)</title><rect x="95.6783%" y="389" width="0.0957%" height="15" fill="rgb(242,107,0)" fg:x="212507358470" fg:w="212467531"/><text x="95.9283%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (212,467,531 samples, 0.10%)</title><rect x="95.6783%" y="373" width="0.0957%" height="15" fill="rgb(251,28,31)" fg:x="212507358470" fg:w="212467531"/><text x="95.9283%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (212,467,531 samples, 0.10%)</title><rect x="95.6783%" y="357" width="0.0957%" height="15" fill="rgb(233,223,10)" fg:x="212507358470" fg:w="212467531"/><text x="95.9283%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (212,467,531 samples, 0.10%)</title><rect x="95.6783%" y="341" width="0.0957%" height="15" fill="rgb(215,21,27)" fg:x="212507358470" fg:w="212467531"/><text x="95.9283%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (212,467,531 samples, 0.10%)</title><rect x="95.6783%" y="325" width="0.0957%" height="15" fill="rgb(232,23,21)" fg:x="212507358470" fg:w="212467531"/><text x="95.9283%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (212,467,531 samples, 0.10%)</title><rect x="95.6783%" y="309" width="0.0957%" height="15" fill="rgb(244,5,23)" fg:x="212507358470" fg:w="212467531"/><text x="95.9283%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (212,467,531 samples, 0.10%)</title><rect x="95.6783%" y="293" width="0.0957%" height="15" fill="rgb(226,81,46)" fg:x="212507358470" fg:w="212467531"/><text x="95.9283%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (212,467,531 samples, 0.10%)</title><rect x="95.6783%" y="277" width="0.0957%" height="15" fill="rgb(247,70,30)" fg:x="212507358470" fg:w="212467531"/><text x="95.9283%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (212,467,531 samples, 0.10%)</title><rect x="95.6783%" y="261" width="0.0957%" height="15" fill="rgb(212,68,19)" fg:x="212507358470" fg:w="212467531"/><text x="95.9283%" y="271.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (197,994,954 samples, 0.09%)</title><rect x="95.6848%" y="245" width="0.0891%" height="15" fill="rgb(240,187,13)" fg:x="212521831047" fg:w="197994954"/><text x="95.9348%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (197,994,954 samples, 0.09%)</title><rect x="95.6848%" y="229" width="0.0891%" height="15" fill="rgb(223,113,26)" fg:x="212521831047" fg:w="197994954"/><text x="95.9348%" y="239.50"></text></g><g><title>par_matvec::sparse_dense_impl::merge::par_sparse_dense::_{{closure}}::_{{closure}}::_{{closure}} (106,902,406 samples, 0.05%)</title><rect x="95.7258%" y="213" width="0.0481%" height="15" fill="rgb(206,192,2)" fg:x="212612923595" fg:w="106902406"/><text x="95.9758%" y="223.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::col_range (37,017,557 samples, 0.02%)</title><rect x="95.7573%" y="197" width="0.0167%" height="15" fill="rgb(241,108,4)" fg:x="212682808444" fg:w="37017557"/><text x="96.0073%" y="207.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::col_range_unchecked (37,017,557 samples, 0.02%)</title><rect x="95.7573%" y="181" width="0.0167%" height="15" fill="rgb(247,173,49)" fg:x="212682808444" fg:w="37017557"/><text x="96.0073%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (203,416,502 samples, 0.09%)</title><rect x="95.7739%" y="421" width="0.0916%" height="15" fill="rgb(224,114,35)" fg:x="212719826001" fg:w="203416502"/><text x="96.0239%" y="431.50"></text></g><g><title>[libc.so.6] (212,940,615,760 samples, 95.87%)</title><rect x="0.0072%" y="645" width="95.8733%" height="15" fill="rgb(245,159,27)" fg:x="16085822" fg:w="212940615760"/><text x="0.2572%" y="655.50">[libc.so.6]</text></g><g><title>[libc.so.6] (212,940,615,760 samples, 95.87%)</title><rect x="0.0072%" y="629" width="95.8733%" height="15" fill="rgb(245,172,44)" fg:x="16085822" fg:w="212940615760"/><text x="0.2572%" y="639.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (212,932,411,480 samples, 95.87%)</title><rect x="0.0109%" y="613" width="95.8696%" height="15" fill="rgb(236,23,11)" fg:x="24290102" fg:w="212932411480"/><text x="0.2609%" y="623.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (212,932,411,480 samples, 95.87%)</title><rect x="0.0109%" y="597" width="95.8696%" height="15" fill="rgb(205,117,38)" fg:x="24290102" fg:w="212932411480"/><text x="0.2609%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (212,932,411,480 samples, 95.87%)</title><rect x="0.0109%" y="581" width="95.8696%" height="15" fill="rgb(237,72,25)" fg:x="24290102" fg:w="212932411480"/><text x="0.2609%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (212,932,411,480 samples, 95.87%)</title><rect x="0.0109%" y="565" width="95.8696%" height="15" fill="rgb(244,70,9)" fg:x="24290102" fg:w="212932411480"/><text x="0.2609%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (212,932,411,480 samples, 95.87%)</title><rect x="0.0109%" y="549" width="95.8696%" height="15" fill="rgb(217,125,39)" fg:x="24290102" fg:w="212932411480"/><text x="0.2609%" y="559.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (212,932,411,480 samples, 95.87%)</title><rect x="0.0109%" y="533" width="95.8696%" height="15" fill="rgb(235,36,10)" fg:x="24290102" fg:w="212932411480"/><text x="0.2609%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (212,932,411,480 samples, 95.87%)</title><rect x="0.0109%" y="517" width="95.8696%" height="15" fill="rgb(251,123,47)" fg:x="24290102" fg:w="212932411480"/><text x="0.2609%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (212,932,411,480 samples, 95.87%)</title><rect x="0.0109%" y="501" width="95.8696%" height="15" fill="rgb(221,13,13)" fg:x="24290102" fg:w="212932411480"/><text x="0.2609%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (212,932,411,480 samples, 95.87%)</title><rect x="0.0109%" y="485" width="95.8696%" height="15" fill="rgb(238,131,9)" fg:x="24290102" fg:w="212932411480"/><text x="0.2609%" y="495.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (212,932,411,480 samples, 95.87%)</title><rect x="0.0109%" y="469" width="95.8696%" height="15" fill="rgb(211,50,8)" fg:x="24290102" fg:w="212932411480"/><text x="0.2609%" y="479.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (212,932,411,480 samples, 95.87%)</title><rect x="0.0109%" y="453" width="95.8696%" height="15" fill="rgb(245,182,24)" fg:x="24290102" fg:w="212932411480"/><text x="0.2609%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>par_matvec::sparse_dense_impl::merge::par_sparse_dense::_{{closure}}::_{{closure}} (212,932,411,480 samples, 95.87%)</title><rect x="0.0109%" y="437" width="95.8696%" height="15" fill="rgb(242,14,37)" fg:x="24290102" fg:w="212932411480"/><text x="0.2609%" y="447.50">par_matvec::sparse_dense_impl::merge::par_sparse_dense::_{{closure}}::_{{closure}}</text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (33,459,079 samples, 0.02%)</title><rect x="95.8655%" y="421" width="0.0151%" height="15" fill="rgb(246,228,12)" fg:x="212923242503" fg:w="33459079"/><text x="96.1155%" y="431.50"></text></g><g><title>[libc.so.6] (23,171,976 samples, 0.01%)</title><rect x="95.9886%" y="629" width="0.0104%" height="15" fill="rgb(213,55,15)" fg:x="213196635502" fg:w="23171976"/><text x="96.2386%" y="639.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (1,196,949,376 samples, 0.54%)</title><rect x="95.9990%" y="629" width="0.5389%" height="15" fill="rgb(209,9,3)" fg:x="213219807478" fg:w="1196949376"/><text x="96.2490%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1,196,949,376 samples, 0.54%)</title><rect x="95.9990%" y="613" width="0.5389%" height="15" fill="rgb(230,59,30)" fg:x="213219807478" fg:w="1196949376"/><text x="96.2490%" y="623.50"></text></g><g><title>matrix_market_rs::parse_sparse_coo (44,253,204 samples, 0.02%)</title><rect x="96.5589%" y="629" width="0.0199%" height="15" fill="rgb(209,121,21)" fg:x="214463233652" fg:w="44253204"/><text x="96.8089%" y="639.50"></text></g><g><title>matrix_market_rs::parse_coords_val (44,253,204 samples, 0.02%)</title><rect x="96.5589%" y="613" width="0.0199%" height="15" fill="rgb(220,109,13)" fg:x="214463233652" fg:w="44253204"/><text x="96.8089%" y="623.50"></text></g><g><title>[unknown] (2,281,360,033 samples, 1.03%)</title><rect x="95.8806%" y="645" width="1.0271%" height="15" fill="rgb(232,18,1)" fg:x="212956701582" fg:w="2281360033"/><text x="96.1306%" y="655.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (714,478,172 samples, 0.32%)</title><rect x="96.5860%" y="629" width="0.3217%" height="15" fill="rgb(215,41,42)" fg:x="214523583443" fg:w="714478172"/><text x="96.8360%" y="639.50"></text></g><g><title>par_matvec::sparse_dense_impl::merge::par_sparse_dense::_{{closure}}::_{{closure}} (714,478,172 samples, 0.32%)</title><rect x="96.5860%" y="613" width="0.3217%" height="15" fill="rgb(224,123,36)" fg:x="214523583443" fg:w="714478172"/><text x="96.8360%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (43,784,022 samples, 0.02%)</title><rect x="96.9116%" y="181" width="0.0197%" height="15" fill="rgb(240,125,3)" fg:x="215246743748" fg:w="43784022"/><text x="97.1616%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (43,784,022 samples, 0.02%)</title><rect x="96.9116%" y="165" width="0.0197%" height="15" fill="rgb(205,98,50)" fg:x="215246743748" fg:w="43784022"/><text x="97.1616%" y="175.50"></text></g><g><title>core::ptr::write (43,784,022 samples, 0.02%)</title><rect x="96.9116%" y="149" width="0.0197%" height="15" fill="rgb(205,185,37)" fg:x="215246743748" fg:w="43784022"/><text x="97.1616%" y="159.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (86,287,593 samples, 0.04%)</title><rect x="96.9116%" y="197" width="0.0388%" height="15" fill="rgb(238,207,15)" fg:x="215246743748" fg:w="86287593"/><text x="97.1616%" y="207.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market::_{{closure}} (42,503,571 samples, 0.02%)</title><rect x="96.9313%" y="181" width="0.0191%" height="15" fill="rgb(213,199,42)" fg:x="215290527770" fg:w="42503571"/><text x="97.1813%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (98,428,017 samples, 0.04%)</title><rect x="96.9116%" y="357" width="0.0443%" height="15" fill="rgb(235,201,11)" fg:x="215246743748" fg:w="98428017"/><text x="97.1616%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (98,428,017 samples, 0.04%)</title><rect x="96.9116%" y="341" width="0.0443%" height="15" fill="rgb(207,46,11)" fg:x="215246743748" fg:w="98428017"/><text x="97.1616%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (98,428,017 samples, 0.04%)</title><rect x="96.9116%" y="325" width="0.0443%" height="15" fill="rgb(241,35,35)" fg:x="215246743748" fg:w="98428017"/><text x="97.1616%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (98,428,017 samples, 0.04%)</title><rect x="96.9116%" y="309" width="0.0443%" height="15" fill="rgb(243,32,47)" fg:x="215246743748" fg:w="98428017"/><text x="97.1616%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (98,428,017 samples, 0.04%)</title><rect x="96.9116%" y="293" width="0.0443%" height="15" fill="rgb(247,202,23)" fg:x="215246743748" fg:w="98428017"/><text x="97.1616%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (98,428,017 samples, 0.04%)</title><rect x="96.9116%" y="277" width="0.0443%" height="15" fill="rgb(219,102,11)" fg:x="215246743748" fg:w="98428017"/><text x="97.1616%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (98,428,017 samples, 0.04%)</title><rect x="96.9116%" y="261" width="0.0443%" height="15" fill="rgb(243,110,44)" fg:x="215246743748" fg:w="98428017"/><text x="97.1616%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (98,428,017 samples, 0.04%)</title><rect x="96.9116%" y="245" width="0.0443%" height="15" fill="rgb(222,74,54)" fg:x="215246743748" fg:w="98428017"/><text x="97.1616%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (98,428,017 samples, 0.04%)</title><rect x="96.9116%" y="229" width="0.0443%" height="15" fill="rgb(216,99,12)" fg:x="215246743748" fg:w="98428017"/><text x="97.1616%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (98,428,017 samples, 0.04%)</title><rect x="96.9116%" y="213" width="0.0443%" height="15" fill="rgb(226,22,26)" fg:x="215246743748" fg:w="98428017"/><text x="97.1616%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (38,596,985 samples, 0.02%)</title><rect x="96.9655%" y="325" width="0.0174%" height="15" fill="rgb(217,163,10)" fg:x="215366399357" fg:w="38596985"/><text x="97.2155%" y="335.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::new_from_argsort_impl (256,845,756 samples, 0.12%)</title><rect x="96.9559%" y="341" width="0.1156%" height="15" fill="rgb(213,25,53)" fg:x="215345171765" fg:w="256845756"/><text x="97.2059%" y="351.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (192,821,043 samples, 0.09%)</title><rect x="96.9848%" y="325" width="0.0868%" height="15" fill="rgb(252,105,26)" fg:x="215409196478" fg:w="192821043"/><text x="97.2348%" y="335.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (188,608,077 samples, 0.08%)</title><rect x="96.9867%" y="309" width="0.0849%" height="15" fill="rgb(220,39,43)" fg:x="215413409444" fg:w="188608077"/><text x="97.2367%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (148,973,594 samples, 0.07%)</title><rect x="97.1223%" y="325" width="0.0671%" height="15" fill="rgb(229,68,48)" fg:x="215714704802" fg:w="148973594"/><text x="97.3723%" y="335.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (59,945,074 samples, 0.03%)</title><rect x="97.2082%" y="213" width="0.0270%" height="15" fill="rgb(252,8,32)" fg:x="215905446609" fg:w="59945074"/><text x="97.4582%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (44,567,270 samples, 0.02%)</title><rect x="97.2151%" y="197" width="0.0201%" height="15" fill="rgb(223,20,43)" fg:x="215920824413" fg:w="44567270"/><text x="97.4651%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (194,067,771 samples, 0.09%)</title><rect x="97.1894%" y="277" width="0.0874%" height="15" fill="rgb(229,81,49)" fg:x="215863678396" fg:w="194067771"/><text x="97.4394%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (194,067,771 samples, 0.09%)</title><rect x="97.1894%" y="261" width="0.0874%" height="15" fill="rgb(236,28,36)" fg:x="215863678396" fg:w="194067771"/><text x="97.4394%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (194,067,771 samples, 0.09%)</title><rect x="97.1894%" y="245" width="0.0874%" height="15" fill="rgb(249,185,26)" fg:x="215863678396" fg:w="194067771"/><text x="97.4394%" y="255.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (152,299,558 samples, 0.07%)</title><rect x="97.2082%" y="229" width="0.0686%" height="15" fill="rgb(249,174,33)" fg:x="215905446609" fg:w="152299558"/><text x="97.4582%" y="239.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (92,354,484 samples, 0.04%)</title><rect x="97.2352%" y="213" width="0.0416%" height="15" fill="rgb(233,201,37)" fg:x="215965391683" fg:w="92354484"/><text x="97.4852%" y="223.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (79,099,976 samples, 0.04%)</title><rect x="97.2412%" y="197" width="0.0356%" height="15" fill="rgb(221,78,26)" fg:x="215978646191" fg:w="79099976"/><text x="97.4912%" y="207.50"></text></g><g><title>core::intrinsics::copy (34,180,678 samples, 0.02%)</title><rect x="97.2808%" y="213" width="0.0154%" height="15" fill="rgb(250,127,30)" fg:x="216066681364" fg:w="34180678"/><text x="97.5308%" y="223.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (59,512,855 samples, 0.03%)</title><rect x="97.2962%" y="197" width="0.0268%" height="15" fill="rgb(230,49,44)" fg:x="216100862042" fg:w="59512855"/><text x="97.5462%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (38,228,447 samples, 0.02%)</title><rect x="97.3058%" y="181" width="0.0172%" height="15" fill="rgb(229,67,23)" fg:x="216122146450" fg:w="38228447"/><text x="97.5558%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (244,356,949 samples, 0.11%)</title><rect x="97.2768%" y="261" width="0.1100%" height="15" fill="rgb(249,83,47)" fg:x="216057746167" fg:w="244356949"/><text x="97.5268%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (244,356,949 samples, 0.11%)</title><rect x="97.2768%" y="245" width="0.1100%" height="15" fill="rgb(215,43,3)" fg:x="216057746167" fg:w="244356949"/><text x="97.5268%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (244,356,949 samples, 0.11%)</title><rect x="97.2768%" y="229" width="0.1100%" height="15" fill="rgb(238,154,13)" fg:x="216057746167" fg:w="244356949"/><text x="97.5268%" y="239.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (201,241,074 samples, 0.09%)</title><rect x="97.2962%" y="213" width="0.0906%" height="15" fill="rgb(219,56,2)" fg:x="216100862042" fg:w="201241074"/><text x="97.5462%" y="223.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (141,728,219 samples, 0.06%)</title><rect x="97.3230%" y="197" width="0.0638%" height="15" fill="rgb(233,0,4)" fg:x="216160374897" fg:w="141728219"/><text x="97.5730%" y="207.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (133,066,208 samples, 0.06%)</title><rect x="97.3269%" y="181" width="0.0599%" height="15" fill="rgb(235,30,7)" fg:x="216169036908" fg:w="133066208"/><text x="97.5769%" y="191.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (89,439,661 samples, 0.04%)</title><rect x="97.4003%" y="181" width="0.0403%" height="15" fill="rgb(250,79,13)" fg:x="216332070534" fg:w="89439661"/><text x="97.6503%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (46,910,230 samples, 0.02%)</title><rect x="97.4194%" y="165" width="0.0211%" height="15" fill="rgb(211,146,34)" fg:x="216374599965" fg:w="46910230"/><text x="97.6694%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (237,095,321 samples, 0.11%)</title><rect x="97.3887%" y="245" width="0.1067%" height="15" fill="rgb(228,22,38)" fg:x="216306399275" fg:w="237095321"/><text x="97.6387%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (237,095,321 samples, 0.11%)</title><rect x="97.3887%" y="229" width="0.1067%" height="15" fill="rgb(235,168,5)" fg:x="216306399275" fg:w="237095321"/><text x="97.6387%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (237,095,321 samples, 0.11%)</title><rect x="97.3887%" y="213" width="0.1067%" height="15" fill="rgb(221,155,16)" fg:x="216306399275" fg:w="237095321"/><text x="97.6387%" y="223.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (211,424,062 samples, 0.10%)</title><rect x="97.4003%" y="197" width="0.0952%" height="15" fill="rgb(215,215,53)" fg:x="216332070534" fg:w="211424062"/><text x="97.6503%" y="207.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (121,984,401 samples, 0.05%)</title><rect x="97.4405%" y="181" width="0.0549%" height="15" fill="rgb(223,4,10)" fg:x="216421510195" fg:w="121984401"/><text x="97.6905%" y="191.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (117,535,311 samples, 0.05%)</title><rect x="97.4425%" y="165" width="0.0529%" height="15" fill="rgb(234,103,6)" fg:x="216425959285" fg:w="117535311"/><text x="97.6925%" y="175.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (80,993,602 samples, 0.04%)</title><rect x="97.5179%" y="165" width="0.0365%" height="15" fill="rgb(227,97,0)" fg:x="216593382760" fg:w="80993602"/><text x="97.7679%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (29,733,691 samples, 0.01%)</title><rect x="97.5410%" y="149" width="0.0134%" height="15" fill="rgb(234,150,53)" fg:x="216644642671" fg:w="29733691"/><text x="97.7910%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (195,949,410 samples, 0.09%)</title><rect x="97.4970%" y="229" width="0.0882%" height="15" fill="rgb(228,201,54)" fg:x="216546933269" fg:w="195949410"/><text x="97.7470%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (195,949,410 samples, 0.09%)</title><rect x="97.4970%" y="213" width="0.0882%" height="15" fill="rgb(222,22,37)" fg:x="216546933269" fg:w="195949410"/><text x="97.7470%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (195,949,410 samples, 0.09%)</title><rect x="97.4970%" y="197" width="0.0882%" height="15" fill="rgb(237,53,32)" fg:x="216546933269" fg:w="195949410"/><text x="97.7470%" y="207.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (149,499,919 samples, 0.07%)</title><rect x="97.5179%" y="181" width="0.0673%" height="15" fill="rgb(233,25,53)" fg:x="216593382760" fg:w="149499919"/><text x="97.7679%" y="191.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (68,506,317 samples, 0.03%)</title><rect x="97.5544%" y="165" width="0.0308%" height="15" fill="rgb(210,40,34)" fg:x="216674376362" fg:w="68506317"/><text x="97.8044%" y="175.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (68,506,317 samples, 0.03%)</title><rect x="97.5544%" y="149" width="0.0308%" height="15" fill="rgb(241,220,44)" fg:x="216674376362" fg:w="68506317"/><text x="97.8044%" y="159.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (50,412,559 samples, 0.02%)</title><rect x="97.6160%" y="149" width="0.0227%" height="15" fill="rgb(235,28,35)" fg:x="216811232590" fg:w="50412559"/><text x="97.8660%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (174,820,913 samples, 0.08%)</title><rect x="97.5968%" y="213" width="0.0787%" height="15" fill="rgb(210,56,17)" fg:x="216768478123" fg:w="174820913"/><text x="97.8468%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (174,820,913 samples, 0.08%)</title><rect x="97.5968%" y="197" width="0.0787%" height="15" fill="rgb(224,130,29)" fg:x="216768478123" fg:w="174820913"/><text x="97.8468%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (166,148,583 samples, 0.07%)</title><rect x="97.6007%" y="181" width="0.0748%" height="15" fill="rgb(235,212,8)" fg:x="216777150453" fg:w="166148583"/><text x="97.8507%" y="191.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (144,800,433 samples, 0.07%)</title><rect x="97.6103%" y="165" width="0.0652%" height="15" fill="rgb(223,33,50)" fg:x="216798498603" fg:w="144800433"/><text x="97.8603%" y="175.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (81,653,887 samples, 0.04%)</title><rect x="97.6387%" y="149" width="0.0368%" height="15" fill="rgb(219,149,13)" fg:x="216861645149" fg:w="81653887"/><text x="97.8887%" y="159.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (64,348,093 samples, 0.03%)</title><rect x="97.6465%" y="133" width="0.0290%" height="15" fill="rgb(250,156,29)" fg:x="216878950943" fg:w="64348093"/><text x="97.8965%" y="143.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (42,817,892 samples, 0.02%)</title><rect x="97.7003%" y="133" width="0.0193%" height="15" fill="rgb(216,193,19)" fg:x="216998334462" fg:w="42817892"/><text x="97.9503%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (30,066,929 samples, 0.01%)</title><rect x="97.7060%" y="117" width="0.0135%" height="15" fill="rgb(216,135,14)" fg:x="217011085425" fg:w="30066929"/><text x="97.9560%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (162,229,156 samples, 0.07%)</title><rect x="97.6792%" y="197" width="0.0730%" height="15" fill="rgb(241,47,5)" fg:x="216951615669" fg:w="162229156"/><text x="97.9292%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (162,229,156 samples, 0.07%)</title><rect x="97.6792%" y="181" width="0.0730%" height="15" fill="rgb(233,42,35)" fg:x="216951615669" fg:w="162229156"/><text x="97.9292%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (162,229,156 samples, 0.07%)</title><rect x="97.6792%" y="165" width="0.0730%" height="15" fill="rgb(231,13,6)" fg:x="216951615669" fg:w="162229156"/><text x="97.9292%" y="175.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (124,107,342 samples, 0.06%)</title><rect x="97.6964%" y="149" width="0.0559%" height="15" fill="rgb(207,181,40)" fg:x="216989737483" fg:w="124107342"/><text x="97.9464%" y="159.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (72,692,471 samples, 0.03%)</title><rect x="97.7195%" y="133" width="0.0327%" height="15" fill="rgb(254,173,49)" fg:x="217041152354" fg:w="72692471"/><text x="97.9695%" y="143.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (55,303,650 samples, 0.02%)</title><rect x="97.7274%" y="117" width="0.0249%" height="15" fill="rgb(221,1,38)" fg:x="217058541175" fg:w="55303650"/><text x="97.9774%" y="127.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (46,614,477 samples, 0.02%)</title><rect x="97.7851%" y="117" width="0.0210%" height="15" fill="rgb(206,124,46)" fg:x="217186794441" fg:w="46614477"/><text x="98.0351%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (136,415,410 samples, 0.06%)</title><rect x="97.7599%" y="181" width="0.0614%" height="15" fill="rgb(249,21,11)" fg:x="217130821827" fg:w="136415410"/><text x="98.0099%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (136,415,410 samples, 0.06%)</title><rect x="97.7599%" y="165" width="0.0614%" height="15" fill="rgb(222,201,40)" fg:x="217130821827" fg:w="136415410"/><text x="98.0099%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (136,415,410 samples, 0.06%)</title><rect x="97.7599%" y="149" width="0.0614%" height="15" fill="rgb(235,61,29)" fg:x="217130821827" fg:w="136415410"/><text x="98.0099%" y="159.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (93,353,563 samples, 0.04%)</title><rect x="97.7793%" y="133" width="0.0420%" height="15" fill="rgb(219,207,3)" fg:x="217173883674" fg:w="93353563"/><text x="98.0293%" y="143.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (33,828,319 samples, 0.02%)</title><rect x="97.8061%" y="117" width="0.0152%" height="15" fill="rgb(222,56,46)" fg:x="217233408918" fg:w="33828319"/><text x="98.0561%" y="127.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (25,372,890 samples, 0.01%)</title><rect x="97.8099%" y="101" width="0.0114%" height="15" fill="rgb(239,76,54)" fg:x="217241864347" fg:w="25372890"/><text x="98.0599%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (29,669,702 samples, 0.01%)</title><rect x="97.8404%" y="149" width="0.0134%" height="15" fill="rgb(231,124,27)" fg:x="217309570480" fg:w="29669702"/><text x="98.0904%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (29,669,702 samples, 0.01%)</title><rect x="97.8404%" y="133" width="0.0134%" height="15" fill="rgb(249,195,6)" fg:x="217309570480" fg:w="29669702"/><text x="98.0904%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (72,093,974 samples, 0.03%)</title><rect x="97.8308%" y="165" width="0.0325%" height="15" fill="rgb(237,174,47)" fg:x="217288368471" fg:w="72093974"/><text x="98.0808%" y="175.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (46,055,410 samples, 0.02%)</title><rect x="97.8904%" y="101" width="0.0207%" height="15" fill="rgb(206,201,31)" fg:x="217420748412" fg:w="46055410"/><text x="98.1404%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (149,100,259 samples, 0.07%)</title><rect x="97.8633%" y="165" width="0.0671%" height="15" fill="rgb(231,57,52)" fg:x="217360462445" fg:w="149100259"/><text x="98.1133%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (149,100,259 samples, 0.07%)</title><rect x="97.8633%" y="149" width="0.0671%" height="15" fill="rgb(248,177,22)" fg:x="217360462445" fg:w="149100259"/><text x="98.1133%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (144,840,137 samples, 0.07%)</title><rect x="97.8652%" y="133" width="0.0652%" height="15" fill="rgb(215,211,37)" fg:x="217364722567" fg:w="144840137"/><text x="98.1152%" y="143.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (106,172,701 samples, 0.05%)</title><rect x="97.8826%" y="117" width="0.0478%" height="15" fill="rgb(241,128,51)" fg:x="217403390003" fg:w="106172701"/><text x="98.1326%" y="127.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (42,758,882 samples, 0.02%)</title><rect x="97.9112%" y="101" width="0.0193%" height="15" fill="rgb(227,165,31)" fg:x="217466803822" fg:w="42758882"/><text x="98.1612%" y="111.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (34,264,966 samples, 0.02%)</title><rect x="97.9150%" y="85" width="0.0154%" height="15" fill="rgb(228,167,24)" fg:x="217475297738" fg:w="34264966"/><text x="98.1650%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (54,735,780 samples, 0.02%)</title><rect x="97.9362%" y="149" width="0.0246%" height="15" fill="rgb(228,143,12)" fg:x="217522454382" fg:w="54735780"/><text x="98.1862%" y="159.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (33,612,430 samples, 0.02%)</title><rect x="97.9762%" y="85" width="0.0151%" height="15" fill="rgb(249,149,8)" fg:x="217611249124" fg:w="33612430"/><text x="98.2262%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (97,496,624 samples, 0.04%)</title><rect x="97.9609%" y="149" width="0.0439%" height="15" fill="rgb(243,35,44)" fg:x="217577190162" fg:w="97496624"/><text x="98.2109%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (97,496,624 samples, 0.04%)</title><rect x="97.9609%" y="133" width="0.0439%" height="15" fill="rgb(246,89,9)" fg:x="217577190162" fg:w="97496624"/><text x="98.2109%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (97,496,624 samples, 0.04%)</title><rect x="97.9609%" y="117" width="0.0439%" height="15" fill="rgb(233,213,13)" fg:x="217577190162" fg:w="97496624"/><text x="98.2109%" y="127.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (71,981,563 samples, 0.03%)</title><rect x="97.9724%" y="101" width="0.0324%" height="15" fill="rgb(233,141,41)" fg:x="217602705223" fg:w="71981563"/><text x="98.2224%" y="111.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (29,825,232 samples, 0.01%)</title><rect x="97.9913%" y="85" width="0.0134%" height="15" fill="rgb(239,167,4)" fg:x="217644861554" fg:w="29825232"/><text x="98.2413%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (25,309,452 samples, 0.01%)</title><rect x="98.0105%" y="117" width="0.0114%" height="15" fill="rgb(209,217,16)" fg:x="217687381960" fg:w="25309452"/><text x="98.2605%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (34,012,887 samples, 0.02%)</title><rect x="98.0238%" y="117" width="0.0153%" height="15" fill="rgb(219,88,35)" fg:x="217717037659" fg:w="34012887"/><text x="98.2738%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (34,012,887 samples, 0.02%)</title><rect x="98.0238%" y="101" width="0.0153%" height="15" fill="rgb(220,193,23)" fg:x="217717037659" fg:w="34012887"/><text x="98.2738%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (76,398,080 samples, 0.03%)</title><rect x="98.0086%" y="133" width="0.0344%" height="15" fill="rgb(230,90,52)" fg:x="217683112742" fg:w="76398080"/><text x="98.2586%" y="143.50"></text></g><g><title>core::intrinsics::copy (38,202,276 samples, 0.02%)</title><rect x="98.0509%" y="85" width="0.0172%" height="15" fill="rgb(252,106,19)" fg:x="217777074127" fg:w="38202276"/><text x="98.3009%" y="95.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (30,231,894 samples, 0.01%)</title><rect x="98.0814%" y="69" width="0.0136%" height="15" fill="rgb(206,74,20)" fg:x="217844934028" fg:w="30231894"/><text x="98.3314%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (132,670,076 samples, 0.06%)</title><rect x="98.0430%" y="133" width="0.0597%" height="15" fill="rgb(230,138,44)" fg:x="217759510822" fg:w="132670076"/><text x="98.2930%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (132,670,076 samples, 0.06%)</title><rect x="98.0430%" y="117" width="0.0597%" height="15" fill="rgb(235,182,43)" fg:x="217759510822" fg:w="132670076"/><text x="98.2930%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (128,405,400 samples, 0.06%)</title><rect x="98.0449%" y="101" width="0.0578%" height="15" fill="rgb(242,16,51)" fg:x="217763775498" fg:w="128405400"/><text x="98.2949%" y="111.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (76,904,495 samples, 0.03%)</title><rect x="98.0681%" y="85" width="0.0346%" height="15" fill="rgb(248,9,4)" fg:x="217815276403" fg:w="76904495"/><text x="98.3181%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (24,227,530 samples, 0.01%)</title><rect x="98.1220%" y="101" width="0.0109%" height="15" fill="rgb(210,31,22)" fg:x="217935030098" fg:w="24227530"/><text x="98.3720%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (24,227,530 samples, 0.01%)</title><rect x="98.1220%" y="85" width="0.0109%" height="15" fill="rgb(239,54,39)" fg:x="217935030098" fg:w="24227530"/><text x="98.3720%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (58,534,140 samples, 0.03%)</title><rect x="98.1123%" y="117" width="0.0264%" height="15" fill="rgb(230,99,41)" fg:x="217913482803" fg:w="58534140"/><text x="98.3623%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (63,752,646 samples, 0.03%)</title><rect x="98.1386%" y="117" width="0.0287%" height="15" fill="rgb(253,106,12)" fg:x="217972016943" fg:w="63752646"/><text x="98.3886%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (63,752,646 samples, 0.03%)</title><rect x="98.1386%" y="101" width="0.0287%" height="15" fill="rgb(213,46,41)" fg:x="217972016943" fg:w="63752646"/><text x="98.3886%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (63,752,646 samples, 0.03%)</title><rect x="98.1386%" y="85" width="0.0287%" height="15" fill="rgb(215,133,35)" fg:x="217972016943" fg:w="63752646"/><text x="98.3886%" y="95.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (50,788,840 samples, 0.02%)</title><rect x="98.1445%" y="69" width="0.0229%" height="15" fill="rgb(213,28,5)" fg:x="217984980749" fg:w="50788840"/><text x="98.3945%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (28,162,975 samples, 0.01%)</title><rect x="98.1791%" y="85" width="0.0127%" height="15" fill="rgb(215,77,49)" fg:x="218061794494" fg:w="28162975"/><text x="98.4291%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (28,162,975 samples, 0.01%)</title><rect x="98.1791%" y="69" width="0.0127%" height="15" fill="rgb(248,100,22)" fg:x="218061794494" fg:w="28162975"/><text x="98.4291%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (58,453,168 samples, 0.03%)</title><rect x="98.1673%" y="101" width="0.0263%" height="15" fill="rgb(208,67,9)" fg:x="218035769589" fg:w="58453168"/><text x="98.4173%" y="111.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (25,427,379 samples, 0.01%)</title><rect x="98.2035%" y="37" width="0.0114%" height="15" fill="rgb(219,133,21)" fg:x="218116019543" fg:w="25427379"/><text x="98.4535%" y="47.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (64,306,252 samples, 0.03%)</title><rect x="98.1937%" y="101" width="0.0290%" height="15" fill="rgb(246,46,29)" fg:x="218094222757" fg:w="64306252"/><text x="98.4437%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (64,306,252 samples, 0.03%)</title><rect x="98.1937%" y="85" width="0.0290%" height="15" fill="rgb(246,185,52)" fg:x="218094222757" fg:w="64306252"/><text x="98.4437%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (64,306,252 samples, 0.03%)</title><rect x="98.1937%" y="69" width="0.0290%" height="15" fill="rgb(252,136,11)" fg:x="218094222757" fg:w="64306252"/><text x="98.4437%" y="79.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (60,023,399 samples, 0.03%)</title><rect x="98.1956%" y="53" width="0.0270%" height="15" fill="rgb(219,138,53)" fg:x="218098505610" fg:w="60023399"/><text x="98.4456%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (33,708,979 samples, 0.02%)</title><rect x="98.2284%" y="85" width="0.0152%" height="15" fill="rgb(211,51,23)" fg:x="218171443809" fg:w="33708979"/><text x="98.4784%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (25,604,207 samples, 0.01%)</title><rect x="98.2436%" y="85" width="0.0115%" height="15" fill="rgb(247,221,28)" fg:x="218205152788" fg:w="25604207"/><text x="98.4936%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (25,604,207 samples, 0.01%)</title><rect x="98.2436%" y="69" width="0.0115%" height="15" fill="rgb(251,222,45)" fg:x="218205152788" fg:w="25604207"/><text x="98.4936%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (25,604,207 samples, 0.01%)</title><rect x="98.2436%" y="53" width="0.0115%" height="15" fill="rgb(217,162,53)" fg:x="218205152788" fg:w="25604207"/><text x="98.4936%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (25,536,435 samples, 0.01%)</title><rect x="98.2551%" y="69" width="0.0115%" height="15" fill="rgb(229,93,14)" fg:x="218230756995" fg:w="25536435"/><text x="98.5051%" y="79.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (2,443,611,034 samples, 1.10%)</title><rect x="97.1894%" y="325" width="1.1002%" height="15" fill="rgb(209,67,49)" fg:x="215863678396" fg:w="2443611034"/><text x="97.4394%" y="335.50"></text></g><g><title>core::slice::sort::unstable::sort (2,443,611,034 samples, 1.10%)</title><rect x="97.1894%" y="309" width="1.1002%" height="15" fill="rgb(213,87,29)" fg:x="215863678396" fg:w="2443611034"/><text x="97.4394%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,443,611,034 samples, 1.10%)</title><rect x="97.1894%" y="293" width="1.1002%" height="15" fill="rgb(205,151,52)" fg:x="215863678396" fg:w="2443611034"/><text x="97.4394%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,249,543,263 samples, 1.01%)</title><rect x="97.2768%" y="277" width="1.0128%" height="15" fill="rgb(253,215,39)" fg:x="216057746167" fg:w="2249543263"/><text x="97.5268%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,005,186,314 samples, 0.90%)</title><rect x="97.3868%" y="261" width="0.9028%" height="15" fill="rgb(221,220,41)" fg:x="216302103116" fg:w="2005186314"/><text x="97.6368%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,763,794,834 samples, 0.79%)</title><rect x="97.4955%" y="245" width="0.7941%" height="15" fill="rgb(218,133,21)" fg:x="216543494596" fg:w="1763794834"/><text x="97.7455%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,564,406,751 samples, 0.70%)</title><rect x="97.5852%" y="229" width="0.7044%" height="15" fill="rgb(221,193,43)" fg:x="216742882679" fg:w="1564406751"/><text x="97.8352%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,363,990,394 samples, 0.61%)</title><rect x="97.6755%" y="213" width="0.6141%" height="15" fill="rgb(240,128,52)" fg:x="216943299036" fg:w="1363990394"/><text x="97.9255%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,193,444,605 samples, 0.54%)</title><rect x="97.7523%" y="197" width="0.5373%" height="15" fill="rgb(253,114,12)" fg:x="217113844825" fg:w="1193444605"/><text x="98.0023%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,040,052,193 samples, 0.47%)</title><rect x="97.8213%" y="181" width="0.4683%" height="15" fill="rgb(215,223,47)" fg:x="217267237237" fg:w="1040052193"/><text x="98.0713%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (797,726,726 samples, 0.36%)</title><rect x="97.9304%" y="165" width="0.3592%" height="15" fill="rgb(248,225,23)" fg:x="217509562704" fg:w="797726726"/><text x="98.1804%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (632,602,644 samples, 0.28%)</title><rect x="98.0048%" y="149" width="0.2848%" height="15" fill="rgb(250,108,0)" fg:x="217674686786" fg:w="632602644"/><text x="98.2548%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (415,108,532 samples, 0.19%)</title><rect x="98.1027%" y="133" width="0.1869%" height="15" fill="rgb(228,208,7)" fg:x="217892180898" fg:w="415108532"/><text x="98.3527%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (271,519,841 samples, 0.12%)</title><rect x="98.1673%" y="117" width="0.1222%" height="15" fill="rgb(244,45,10)" fg:x="218035769589" fg:w="271519841"/><text x="98.4173%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (148,760,421 samples, 0.07%)</title><rect x="98.2226%" y="101" width="0.0670%" height="15" fill="rgb(207,125,25)" fg:x="218158529009" fg:w="148760421"/><text x="98.4726%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (76,532,435 samples, 0.03%)</title><rect x="98.2551%" y="85" width="0.0345%" height="15" fill="rgb(210,195,18)" fg:x="218230756995" fg:w="76532435"/><text x="98.5051%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (42,602,539 samples, 0.02%)</title><rect x="98.2704%" y="69" width="0.0192%" height="15" fill="rgb(249,80,12)" fg:x="218264686891" fg:w="42602539"/><text x="98.5204%" y="79.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (195,117,512 samples, 0.09%)</title><rect x="98.2954%" y="325" width="0.0878%" height="15" fill="rgb(221,65,9)" fg:x="218320132145" fg:w="195117512"/><text x="98.5454%" y="335.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets (3,200,020,051 samples, 1.44%)</title><rect x="96.9559%" y="357" width="1.4408%" height="15" fill="rgb(235,49,36)" fg:x="215345171765" fg:w="3200020051"/><text x="97.2059%" y="367.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl (2,943,174,295 samples, 1.33%)</title><rect x="97.0716%" y="341" width="1.3251%" height="15" fill="rgb(225,32,20)" fg:x="215602017521" fg:w="2943174295"/><text x="97.3216%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (39,863,275 samples, 0.02%)</title><rect x="98.3985%" y="325" width="0.0179%" height="15" fill="rgb(215,141,46)" fg:x="218549278466" fg:w="39863275"/><text x="98.6485%" y="335.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (342,877,961 samples, 0.15%)</title><rect x="98.4746%" y="149" width="0.1544%" height="15" fill="rgb(250,160,47)" fg:x="218718184534" fg:w="342877961"/><text x="98.7246%" y="159.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (342,877,961 samples, 0.15%)</title><rect x="98.4746%" y="133" width="0.1544%" height="15" fill="rgb(216,222,40)" fg:x="218718184534" fg:w="342877961"/><text x="98.7246%" y="143.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (342,877,961 samples, 0.15%)</title><rect x="98.4746%" y="117" width="0.1544%" height="15" fill="rgb(234,217,39)" fg:x="218718184534" fg:w="342877961"/><text x="98.7246%" y="127.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (342,877,961 samples, 0.15%)</title><rect x="98.4746%" y="101" width="0.1544%" height="15" fill="rgb(207,178,40)" fg:x="218718184534" fg:w="342877961"/><text x="98.7246%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (782,242,299 samples, 0.35%)</title><rect x="98.4655%" y="309" width="0.3522%" height="15" fill="rgb(221,136,13)" fg:x="218698067370" fg:w="782242299"/><text x="98.7155%" y="319.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (782,242,299 samples, 0.35%)</title><rect x="98.4655%" y="293" width="0.3522%" height="15" fill="rgb(249,199,10)" fg:x="218698067370" fg:w="782242299"/><text x="98.7155%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (782,242,299 samples, 0.35%)</title><rect x="98.4655%" y="277" width="0.3522%" height="15" fill="rgb(249,222,13)" fg:x="218698067370" fg:w="782242299"/><text x="98.7155%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (782,242,299 samples, 0.35%)</title><rect x="98.4655%" y="261" width="0.3522%" height="15" fill="rgb(244,185,38)" fg:x="218698067370" fg:w="782242299"/><text x="98.7155%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (782,242,299 samples, 0.35%)</title><rect x="98.4655%" y="245" width="0.3522%" height="15" fill="rgb(236,202,9)" fg:x="218698067370" fg:w="782242299"/><text x="98.7155%" y="255.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (766,104,455 samples, 0.34%)</title><rect x="98.4728%" y="229" width="0.3449%" height="15" fill="rgb(250,229,37)" fg:x="218714205214" fg:w="766104455"/><text x="98.7228%" y="239.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (766,104,455 samples, 0.34%)</title><rect x="98.4728%" y="213" width="0.3449%" height="15" fill="rgb(206,174,23)" fg:x="218714205214" fg:w="766104455"/><text x="98.7228%" y="223.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (762,125,135 samples, 0.34%)</title><rect x="98.4746%" y="197" width="0.3431%" height="15" fill="rgb(211,33,43)" fg:x="218718184534" fg:w="762125135"/><text x="98.7246%" y="207.50"></text></g><g><title>core::str::pattern::Searcher::next_match (762,125,135 samples, 0.34%)</title><rect x="98.4746%" y="181" width="0.3431%" height="15" fill="rgb(245,58,50)" fg:x="218718184534" fg:w="762125135"/><text x="98.7246%" y="191.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (762,125,135 samples, 0.34%)</title><rect x="98.4746%" y="165" width="0.3431%" height="15" fill="rgb(244,68,36)" fg:x="218718184534" fg:w="762125135"/><text x="98.7246%" y="175.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (419,247,174 samples, 0.19%)</title><rect x="98.6290%" y="149" width="0.1888%" height="15" fill="rgb(232,229,15)" fg:x="219061062495" fg:w="419247174"/><text x="98.8790%" y="159.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (419,247,174 samples, 0.19%)</title><rect x="98.6290%" y="133" width="0.1888%" height="15" fill="rgb(254,30,23)" fg:x="219061062495" fg:w="419247174"/><text x="98.8790%" y="143.50"></text></g><g><title>core::str::validations::next_code_point (419,247,174 samples, 0.19%)</title><rect x="98.6290%" y="117" width="0.1888%" height="15" fill="rgb(235,160,14)" fg:x="219061062495" fg:w="419247174"/><text x="98.8790%" y="127.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (44,164,923 samples, 0.02%)</title><rect x="98.8594%" y="229" width="0.0199%" height="15" fill="rgb(212,155,44)" fg:x="219572954451" fg:w="44164923"/><text x="99.1094%" y="239.50"></text></g><g><title>core::num::dec2flt::decimal::Decimal::try_fast_path (80,379,969 samples, 0.04%)</title><rect x="98.8486%" y="245" width="0.0362%" height="15" fill="rgb(226,2,50)" fg:x="219548796340" fg:w="80379969"/><text x="99.0986%" y="255.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (23,944,875 samples, 0.01%)</title><rect x="98.9583%" y="181" width="0.0108%" height="15" fill="rgb(234,177,6)" fg:x="219792462821" fg:w="23944875"/><text x="99.2083%" y="191.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (88,730,206 samples, 0.04%)</title><rect x="98.9491%" y="197" width="0.0399%" height="15" fill="rgb(217,24,9)" fg:x="219772127135" fg:w="88730206"/><text x="99.1991%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (44,449,645 samples, 0.02%)</title><rect x="98.9690%" y="181" width="0.0200%" height="15" fill="rgb(220,13,46)" fg:x="219816407696" fg:w="44449645"/><text x="99.2190%" y="191.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::read_u64 (36,335,073 samples, 0.02%)</title><rect x="98.9891%" y="197" width="0.0164%" height="15" fill="rgb(239,221,27)" fg:x="219860857341" fg:w="36335073"/><text x="99.2391%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (36,335,073 samples, 0.02%)</title><rect x="98.9891%" y="181" width="0.0164%" height="15" fill="rgb(222,198,25)" fg:x="219860857341" fg:w="36335073"/><text x="99.2391%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (36,335,073 samples, 0.02%)</title><rect x="98.9891%" y="165" width="0.0164%" height="15" fill="rgb(211,99,13)" fg:x="219860857341" fg:w="36335073"/><text x="99.2391%" y="175.50"></text></g><g><title>core::num::dec2flt::common::is_8digits (28,237,987 samples, 0.01%)</title><rect x="99.0108%" y="197" width="0.0127%" height="15" fill="rgb(232,111,31)" fg:x="219909253552" fg:w="28237987"/><text x="99.2608%" y="207.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (237,532,668 samples, 0.11%)</title><rect x="98.9292%" y="213" width="0.1069%" height="15" fill="rgb(245,82,37)" fg:x="219728013595" fg:w="237532668"/><text x="99.1792%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::parse_8digits (28,054,724 samples, 0.01%)</title><rect x="99.0236%" y="197" width="0.0126%" height="15" fill="rgb(227,149,46)" fg:x="219937491539" fg:w="28054724"/><text x="99.2736%" y="207.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (328,456,737 samples, 0.15%)</title><rect x="98.8901%" y="245" width="0.1479%" height="15" fill="rgb(218,36,50)" fg:x="219641102206" fg:w="328456737"/><text x="99.1401%" y="255.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (286,043,785 samples, 0.13%)</title><rect x="98.9092%" y="229" width="0.1288%" height="15" fill="rgb(226,80,48)" fg:x="219683515158" fg:w="286043785"/><text x="99.1592%" y="239.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (485,482,235 samples, 0.22%)</title><rect x="98.8249%" y="277" width="0.2186%" height="15" fill="rgb(238,224,15)" fg:x="219496334578" fg:w="485482235"/><text x="99.0749%" y="287.50"></text></g><g><title>core::num::dec2flt::dec2flt (461,475,859 samples, 0.21%)</title><rect x="98.8357%" y="261" width="0.2078%" height="15" fill="rgb(241,136,10)" fg:x="219520340954" fg:w="461475859"/><text x="99.0857%" y="271.50"></text></g><g><title>&lt;f64 as num_traits::Num&gt;::from_str_radix (505,514,099 samples, 0.23%)</title><rect x="98.8177%" y="309" width="0.2276%" height="15" fill="rgb(208,32,45)" fg:x="219480309669" fg:w="505514099"/><text x="99.0677%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (489,489,190 samples, 0.22%)</title><rect x="98.8249%" y="293" width="0.2204%" height="15" fill="rgb(207,135,9)" fg:x="219496334578" fg:w="489489190"/><text x="99.0749%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (83,789,235 samples, 0.04%)</title><rect x="99.0453%" y="229" width="0.0377%" height="15" fill="rgb(206,86,44)" fg:x="219985823768" fg:w="83789235"/><text x="99.2953%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (83,789,235 samples, 0.04%)</title><rect x="99.0453%" y="213" width="0.0377%" height="15" fill="rgb(245,177,15)" fg:x="219985823768" fg:w="83789235"/><text x="99.2953%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (83,789,235 samples, 0.04%)</title><rect x="99.0453%" y="197" width="0.0377%" height="15" fill="rgb(206,64,50)" fg:x="219985823768" fg:w="83789235"/><text x="99.2953%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (83,789,235 samples, 0.04%)</title><rect x="99.0453%" y="181" width="0.0377%" height="15" fill="rgb(234,36,40)" fg:x="219985823768" fg:w="83789235"/><text x="99.2953%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (64,131,626 samples, 0.03%)</title><rect x="99.0542%" y="165" width="0.0289%" height="15" fill="rgb(213,64,8)" fg:x="220005481377" fg:w="64131626"/><text x="99.3042%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (64,131,626 samples, 0.03%)</title><rect x="99.0542%" y="149" width="0.0289%" height="15" fill="rgb(210,75,36)" fg:x="220005481377" fg:w="64131626"/><text x="99.3042%" y="159.50"></text></g><g><title>alloc::alloc::alloc (64,131,626 samples, 0.03%)</title><rect x="99.0542%" y="133" width="0.0289%" height="15" fill="rgb(229,88,21)" fg:x="220005481377" fg:w="64131626"/><text x="99.3042%" y="143.50"></text></g><g><title>malloc (44,153,040 samples, 0.02%)</title><rect x="99.0632%" y="117" width="0.0199%" height="15" fill="rgb(252,204,47)" fg:x="220025459963" fg:w="44153040"/><text x="99.3132%" y="127.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (111,789,062 samples, 0.05%)</title><rect x="99.0453%" y="309" width="0.0503%" height="15" fill="rgb(208,77,27)" fg:x="219985823768" fg:w="111789062"/><text x="99.2953%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (111,789,062 samples, 0.05%)</title><rect x="99.0453%" y="293" width="0.0503%" height="15" fill="rgb(221,76,26)" fg:x="219985823768" fg:w="111789062"/><text x="99.2953%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (111,789,062 samples, 0.05%)</title><rect x="99.0453%" y="277" width="0.0503%" height="15" fill="rgb(225,139,18)" fg:x="219985823768" fg:w="111789062"/><text x="99.2953%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (111,789,062 samples, 0.05%)</title><rect x="99.0453%" y="261" width="0.0503%" height="15" fill="rgb(230,137,11)" fg:x="219985823768" fg:w="111789062"/><text x="99.2953%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (111,789,062 samples, 0.05%)</title><rect x="99.0453%" y="245" width="0.0503%" height="15" fill="rgb(212,28,1)" fg:x="219985823768" fg:w="111789062"/><text x="99.2953%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (27,999,827 samples, 0.01%)</title><rect x="99.0830%" y="229" width="0.0126%" height="15" fill="rgb(248,164,17)" fg:x="220069613003" fg:w="27999827"/><text x="99.3330%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27,999,827 samples, 0.01%)</title><rect x="99.0830%" y="213" width="0.0126%" height="15" fill="rgb(222,171,42)" fg:x="220069613003" fg:w="27999827"/><text x="99.3330%" y="223.50"></text></g><g><title>[libc.so.6] (23,990,967 samples, 0.01%)</title><rect x="99.0849%" y="197" width="0.0108%" height="15" fill="rgb(243,84,45)" fg:x="220073621863" fg:w="23990967"/><text x="99.3349%" y="207.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (148,672,273 samples, 0.07%)</title><rect x="99.0957%" y="309" width="0.0669%" height="15" fill="rgb(252,49,23)" fg:x="220097612830" fg:w="148672273"/><text x="99.3457%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (148,672,273 samples, 0.07%)</title><rect x="99.0957%" y="293" width="0.0669%" height="15" fill="rgb(215,19,7)" fg:x="220097612830" fg:w="148672273"/><text x="99.3457%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (148,672,273 samples, 0.07%)</title><rect x="99.0957%" y="277" width="0.0669%" height="15" fill="rgb(238,81,41)" fg:x="220097612830" fg:w="148672273"/><text x="99.3457%" y="287.50"></text></g><g><title>cfree (64,116,863 samples, 0.03%)</title><rect x="99.1789%" y="277" width="0.0289%" height="15" fill="rgb(210,199,37)" fg:x="220282536835" fg:w="64116863"/><text x="99.4289%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or (136,304,124 samples, 0.06%)</title><rect x="99.1626%" y="309" width="0.0614%" height="15" fill="rgb(244,192,49)" fg:x="220246285103" fg:w="136304124"/><text x="99.4126%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;f64,matrix_market_rs::MtxError&gt;&gt; (124,115,885 samples, 0.06%)</title><rect x="99.1681%" y="293" width="0.0559%" height="15" fill="rgb(226,211,11)" fg:x="220258473342" fg:w="124115885"/><text x="99.4181%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;matrix_market_rs::MtxError&gt; (35,935,529 samples, 0.02%)</title><rect x="99.2078%" y="277" width="0.0162%" height="15" fill="rgb(236,162,54)" fg:x="220346653698" fg:w="35935529"/><text x="99.4578%" y="287.50"></text></g><g><title>matrix_market_rs::parse_coords_val (1,789,350,341 samples, 0.81%)</title><rect x="98.4220%" y="325" width="0.8056%" height="15" fill="rgb(220,229,9)" fg:x="218601414973" fg:w="1789350341"/><text x="98.6720%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (143,305,007 samples, 0.06%)</title><rect x="99.2367%" y="293" width="0.0645%" height="15" fill="rgb(250,87,22)" fg:x="220410853752" fg:w="143305007"/><text x="99.4867%" y="303.50"></text></g><g><title>core::str::validations::run_utf8_validation (107,090,255 samples, 0.05%)</title><rect x="99.2530%" y="277" width="0.0482%" height="15" fill="rgb(239,43,17)" fg:x="220447068504" fg:w="107090255"/><text x="99.5030%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (44,164,399 samples, 0.02%)</title><rect x="99.3335%" y="261" width="0.0199%" height="15" fill="rgb(231,177,25)" fg:x="220625834037" fg:w="44164399"/><text x="99.5835%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (44,164,399 samples, 0.02%)</title><rect x="99.3335%" y="245" width="0.0199%" height="15" fill="rgb(219,179,1)" fg:x="220625834037" fg:w="44164399"/><text x="99.5835%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (44,164,399 samples, 0.02%)</title><rect x="99.3335%" y="229" width="0.0199%" height="15" fill="rgb(238,219,53)" fg:x="220625834037" fg:w="44164399"/><text x="99.5835%" y="239.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (24,104,266 samples, 0.01%)</title><rect x="99.3806%" y="213" width="0.0109%" height="15" fill="rgb(232,167,36)" fg:x="220730449278" fg:w="24104266"/><text x="99.6306%" y="223.50"></text></g><g><title>matrix_market_rs::MtxData&lt;T,_&gt;::from_file (2,334,574,622 samples, 1.05%)</title><rect x="98.3967%" y="357" width="1.0511%" height="15" fill="rgb(244,19,51)" fg:x="218545191816" fg:w="2334574622"/><text x="98.6467%" y="367.50"></text></g><g><title>matrix_market_rs::parse_sparse_coo (2,334,574,622 samples, 1.05%)</title><rect x="98.3967%" y="341" width="1.0511%" height="15" fill="rgb(224,6,22)" fg:x="218545191816" fg:w="2334574622"/><text x="98.6467%" y="351.50"></text></g><g><title>std::io::BufRead::read_line (489,001,124 samples, 0.22%)</title><rect x="99.2276%" y="325" width="0.2202%" height="15" fill="rgb(224,145,5)" fg:x="220390765314" fg:w="489001124"/><text x="99.4776%" y="335.50"></text></g><g><title>std::io::append_to_string (489,001,124 samples, 0.22%)</title><rect x="99.2276%" y="309" width="0.2202%" height="15" fill="rgb(234,130,49)" fg:x="220390765314" fg:w="489001124"/><text x="99.4776%" y="319.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (325,607,679 samples, 0.15%)</title><rect x="99.3012%" y="293" width="0.1466%" height="15" fill="rgb(254,6,2)" fg:x="220554158759" fg:w="325607679"/><text x="99.5512%" y="303.50"></text></g><g><title>std::io::read_until (325,607,679 samples, 0.15%)</title><rect x="99.3012%" y="277" width="0.1466%" height="15" fill="rgb(208,96,46)" fg:x="220554158759" fg:w="325607679"/><text x="99.5512%" y="287.50"></text></g><g><title>core::slice::memchr::memchr (209,768,002 samples, 0.09%)</title><rect x="99.3534%" y="261" width="0.0944%" height="15" fill="rgb(239,3,39)" fg:x="220669998436" fg:w="209768002"/><text x="99.6034%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_aligned (205,756,017 samples, 0.09%)</title><rect x="99.3552%" y="245" width="0.0926%" height="15" fill="rgb(233,210,1)" fg:x="220674010421" fg:w="205756017"/><text x="99.6052%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (201,697,704 samples, 0.09%)</title><rect x="99.3570%" y="229" width="0.0908%" height="15" fill="rgb(244,137,37)" fg:x="220678068734" fg:w="201697704"/><text x="99.6070%" y="239.50"></text></g><g><title>core::slice::memchr::memchr_naive (125,212,894 samples, 0.06%)</title><rect x="99.3914%" y="213" width="0.0564%" height="15" fill="rgb(240,136,2)" fg:x="220754553544" fg:w="125212894"/><text x="99.6414%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (90,040,914 samples, 0.04%)</title><rect x="99.4622%" y="341" width="0.0405%" height="15" fill="rgb(239,18,37)" fg:x="220911776856" fg:w="90040914"/><text x="99.7122%" y="351.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market (5,805,404,481 samples, 2.61%)</title><rect x="96.9097%" y="373" width="2.6138%" height="15" fill="rgb(218,185,22)" fg:x="215242524763" fg:w="5805404481"/><text x="97.1597%" y="383.50">pa..</text></g><g><title>par_matvec::test_utils::mtx_data_to_nalgebra_coo (168,162,806 samples, 0.08%)</title><rect x="99.4478%" y="357" width="0.0757%" height="15" fill="rgb(225,218,4)" fg:x="220879766438" fg:w="168162806"/><text x="99.6978%" y="367.50"></text></g><g><title>nalgebra_sparse::coo::CooMatrix&lt;T&gt;::try_from_triplets (46,111,474 samples, 0.02%)</title><rect x="99.5028%" y="341" width="0.0208%" height="15" fill="rgb(230,182,32)" fg:x="221001817770" fg:w="46111474"/><text x="99.7528%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (46,111,474 samples, 0.02%)</title><rect x="99.5028%" y="325" width="0.0208%" height="15" fill="rgb(242,56,43)" fg:x="221001817770" fg:w="46111474"/><text x="99.7528%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (57,398,650 samples, 0.03%)</title><rect x="99.5360%" y="213" width="0.0258%" height="15" fill="rgb(233,99,24)" fg:x="221075744152" fg:w="57398650"/><text x="99.7860%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (44,383,282 samples, 0.02%)</title><rect x="99.5419%" y="197" width="0.0200%" height="15" fill="rgb(234,209,42)" fg:x="221088759520" fg:w="44383282"/><text x="99.7919%" y="207.50"></text></g><g><title>core::ptr::read (44,383,282 samples, 0.02%)</title><rect x="99.5419%" y="181" width="0.0200%" height="15" fill="rgb(227,7,12)" fg:x="221088759520" fg:w="44383282"/><text x="99.7919%" y="191.50"></text></g><g><title>_start (5,922,192,640 samples, 2.67%)</title><rect x="96.9095%" y="645" width="2.6664%" height="15" fill="rgb(245,203,43)" fg:x="215242023259" fg:w="5922192640"/><text x="97.1595%" y="655.50">_s..</text></g><g><title>__libc_start_main (5,922,192,640 samples, 2.67%)</title><rect x="96.9095%" y="629" width="2.6664%" height="15" fill="rgb(238,205,33)" fg:x="215242023259" fg:w="5922192640"/><text x="97.1595%" y="639.50">__..</text></g><g><title>[libc.so.6] (5,922,192,640 samples, 2.67%)</title><rect x="96.9095%" y="613" width="2.6664%" height="15" fill="rgb(231,56,7)" fg:x="215242023259" fg:w="5922192640"/><text x="97.1595%" y="623.50">[l..</text></g><g><title>main (5,922,192,640 samples, 2.67%)</title><rect x="96.9095%" y="597" width="2.6664%" height="15" fill="rgb(244,186,29)" fg:x="215242023259" fg:w="5922192640"/><text x="97.1595%" y="607.50">ma..</text></g><g><title>std::rt::lang_start_internal (5,921,691,136 samples, 2.67%)</title><rect x="96.9097%" y="581" width="2.6662%" height="15" fill="rgb(234,111,31)" fg:x="215242524763" fg:w="5921691136"/><text x="97.1597%" y="591.50">st..</text></g><g><title>std::panic::catch_unwind (5,921,691,136 samples, 2.67%)</title><rect x="96.9097%" y="565" width="2.6662%" height="15" fill="rgb(241,149,10)" fg:x="215242524763" fg:w="5921691136"/><text x="97.1597%" y="575.50">st..</text></g><g><title>std::panicking::try (5,921,691,136 samples, 2.67%)</title><rect x="96.9097%" y="549" width="2.6662%" height="15" fill="rgb(249,206,44)" fg:x="215242524763" fg:w="5921691136"/><text x="97.1597%" y="559.50">st..</text></g><g><title>std::panicking::try::do_call (5,921,691,136 samples, 2.67%)</title><rect x="96.9097%" y="533" width="2.6662%" height="15" fill="rgb(251,153,30)" fg:x="215242524763" fg:w="5921691136"/><text x="97.1597%" y="543.50">st..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (5,921,691,136 samples, 2.67%)</title><rect x="96.9097%" y="517" width="2.6662%" height="15" fill="rgb(239,152,38)" fg:x="215242524763" fg:w="5921691136"/><text x="97.1597%" y="527.50">st..</text></g><g><title>std::panic::catch_unwind (5,921,691,136 samples, 2.67%)</title><rect x="96.9097%" y="501" width="2.6662%" height="15" fill="rgb(249,139,47)" fg:x="215242524763" fg:w="5921691136"/><text x="97.1597%" y="511.50">st..</text></g><g><title>std::panicking::try (5,921,691,136 samples, 2.67%)</title><rect x="96.9097%" y="485" width="2.6662%" height="15" fill="rgb(244,64,35)" fg:x="215242524763" fg:w="5921691136"/><text x="97.1597%" y="495.50">st..</text></g><g><title>std::panicking::try::do_call (5,921,691,136 samples, 2.67%)</title><rect x="96.9097%" y="469" width="2.6662%" height="15" fill="rgb(216,46,15)" fg:x="215242524763" fg:w="5921691136"/><text x="97.1597%" y="479.50">st..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5,921,691,136 samples, 2.67%)</title><rect x="96.9097%" y="453" width="2.6662%" height="15" fill="rgb(250,74,19)" fg:x="215242524763" fg:w="5921691136"/><text x="97.1597%" y="463.50">co..</text></g><g><title>std::rt::lang_start::_{{closure}} (5,921,691,136 samples, 2.67%)</title><rect x="96.9097%" y="437" width="2.6662%" height="15" fill="rgb(249,42,33)" fg:x="215242524763" fg:w="5921691136"/><text x="97.1597%" y="447.50">st..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (5,921,691,136 samples, 2.67%)</title><rect x="96.9097%" y="421" width="2.6662%" height="15" fill="rgb(242,149,17)" fg:x="215242524763" fg:w="5921691136"/><text x="97.1597%" y="431.50">st..</text></g><g><title>core::ops::function::FnOnce::call_once (5,921,691,136 samples, 2.67%)</title><rect x="96.9097%" y="405" width="2.6662%" height="15" fill="rgb(244,29,21)" fg:x="215242524763" fg:w="5921691136"/><text x="97.1597%" y="415.50">co..</text></g><g><title>profile_spmv::main (5,921,691,136 samples, 2.67%)</title><rect x="96.9097%" y="389" width="2.6662%" height="15" fill="rgb(220,130,37)" fg:x="215242524763" fg:w="5921691136"/><text x="97.1597%" y="399.50">pr..</text></g><g><title>profile_spmv::profile_sparse_dense_merge (116,286,655 samples, 0.05%)</title><rect x="99.5235%" y="373" width="0.0524%" height="15" fill="rgb(211,67,2)" fg:x="221047929244" fg:w="116286655"/><text x="99.7735%" y="383.50"></text></g><g><title>par_matvec::spmv_drivers::sparse_dense_matmul (116,286,655 samples, 0.05%)</title><rect x="99.5235%" y="357" width="0.0524%" height="15" fill="rgb(235,68,52)" fg:x="221047929244" fg:w="116286655"/><text x="99.7735%" y="367.50"></text></g><g><title>par_matvec::sparse_dense_impl::merge::par_sparse_dense (116,286,655 samples, 0.05%)</title><rect x="99.5235%" y="341" width="0.0524%" height="15" fill="rgb(246,142,3)" fg:x="221047929244" fg:w="116286655"/><text x="99.7735%" y="351.50"></text></g><g><title>std::thread::scoped::scope (116,286,655 samples, 0.05%)</title><rect x="99.5235%" y="325" width="0.0524%" height="15" fill="rgb(241,25,7)" fg:x="221047929244" fg:w="116286655"/><text x="99.7735%" y="335.50"></text></g><g><title>std::panic::catch_unwind (116,286,655 samples, 0.05%)</title><rect x="99.5235%" y="309" width="0.0524%" height="15" fill="rgb(242,119,39)" fg:x="221047929244" fg:w="116286655"/><text x="99.7735%" y="319.50"></text></g><g><title>std::panicking::try (116,286,655 samples, 0.05%)</title><rect x="99.5235%" y="293" width="0.0524%" height="15" fill="rgb(241,98,45)" fg:x="221047929244" fg:w="116286655"/><text x="99.7735%" y="303.50"></text></g><g><title>std::panicking::try::do_call (116,286,655 samples, 0.05%)</title><rect x="99.5235%" y="277" width="0.0524%" height="15" fill="rgb(254,28,30)" fg:x="221047929244" fg:w="116286655"/><text x="99.7735%" y="287.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (116,286,655 samples, 0.05%)</title><rect x="99.5235%" y="261" width="0.0524%" height="15" fill="rgb(241,142,54)" fg:x="221047929244" fg:w="116286655"/><text x="99.7735%" y="271.50"></text></g><g><title>std::thread::scoped::scope::_{{closure}} (116,286,655 samples, 0.05%)</title><rect x="99.5235%" y="245" width="0.0524%" height="15" fill="rgb(222,85,15)" fg:x="221047929244" fg:w="116286655"/><text x="99.7735%" y="255.50"></text></g><g><title>par_matvec::sparse_dense_impl::merge::par_sparse_dense::_{{closure}} (116,286,655 samples, 0.05%)</title><rect x="99.5235%" y="229" width="0.0524%" height="15" fill="rgb(210,85,47)" fg:x="221047929244" fg:w="116286655"/><text x="99.7735%" y="239.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (870,851,364 samples, 0.39%)</title><rect x="99.5759%" y="645" width="0.3921%" height="15" fill="rgb(224,206,25)" fg:x="221164215899" fg:w="870851364"/><text x="99.8259%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (100,411,430 samples, 0.05%)</title><rect x="99.9228%" y="629" width="0.0452%" height="15" fill="rgb(243,201,19)" fg:x="221934655833" fg:w="100411430"/><text x="100.1728%" y="639.50"></text></g><g><title>all (222,106,217,466 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(236,59,4)" fg:x="0" fg:w="222106217466"/><text x="0.2500%" y="687.50"></text></g><g><title>profile_spmv (222,106,217,466 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(254,179,45)" fg:x="0" fg:w="222106217466"/><text x="0.2500%" y="671.50">profile_spmv</text></g><g><title>std::io::append_to_string (29,557,705 samples, 0.01%)</title><rect x="99.9867%" y="645" width="0.0133%" height="15" fill="rgb(226,14,10)" fg:x="222076659761" fg:w="29557705"/><text x="100.2367%" y="655.50"></text></g></svg></svg>