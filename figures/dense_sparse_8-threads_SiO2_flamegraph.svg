<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="241673998994"><g><title>&lt;f64 as num_traits::Num&gt;::from_str_radix (25,685,561 samples, 0.01%)</title><rect x="0.0000%" y="677" width="0.0106%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="25685561"/><text x="0.2500%" y="687.50"></text></g><g><title>cfree (40,592,166 samples, 0.02%)</title><rect x="0.0365%" y="629" width="0.0168%" height="15" fill="rgb(217,0,24)" fg:x="88093759" fg:w="40592166"/><text x="0.2865%" y="639.50"></text></g><g><title>[libc.so.6] (34,084,636 samples, 0.01%)</title><rect x="0.0391%" y="613" width="0.0141%" height="15" fill="rgb(221,193,54)" fg:x="94601289" fg:w="34084636"/><text x="0.2891%" y="623.50"></text></g><g><title>[libc.so.6] (87,085,564 samples, 0.04%)</title><rect x="0.0187%" y="645" width="0.0360%" height="15" fill="rgb(248,212,6)" fg:x="45089133" fg:w="87085564"/><text x="0.2687%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29,517,618 samples, 0.01%)</title><rect x="0.0637%" y="581" width="0.0122%" height="15" fill="rgb(208,68,35)" fg:x="153995231" fg:w="29517618"/><text x="0.3137%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (29,517,618 samples, 0.01%)</title><rect x="0.0637%" y="565" width="0.0122%" height="15" fill="rgb(232,128,0)" fg:x="153995231" fg:w="29517618"/><text x="0.3137%" y="575.50"></text></g><g><title>cfree (29,517,618 samples, 0.01%)</title><rect x="0.0637%" y="549" width="0.0122%" height="15" fill="rgb(207,160,47)" fg:x="153995231" fg:w="29517618"/><text x="0.3137%" y="559.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33,511,989 samples, 0.01%)</title><rect x="0.0637%" y="597" width="0.0139%" height="15" fill="rgb(228,23,34)" fg:x="153995231" fg:w="33511989"/><text x="0.3137%" y="607.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (75,349,185,607 samples, 31.18%)</title><rect x="41.3778%" y="453" width="31.1780%" height="15" fill="rgb(218,30,26)" fg:x="99999411745" fg:w="75349185607"/><text x="41.6278%" y="463.50">&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref</text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (75,349,185,607 samples, 31.18%)</title><rect x="41.3778%" y="437" width="31.1780%" height="15" fill="rgb(220,122,19)" fg:x="99999411745" fg:w="75349185607"/><text x="41.6278%" y="447.50">&lt;&amp;f64 as core::ops::arith::Add&gt;::add</text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (75,349,185,607 samples, 31.18%)</title><rect x="41.3778%" y="421" width="31.1780%" height="15" fill="rgb(250,228,42)" fg:x="99999411745" fg:w="75349185607"/><text x="41.6278%" y="431.50">&lt;f64 as core::ops::arith::Add&gt;::add</text></g><g><title>&lt;Lhs as faer_traits::MulByRef&lt;Rhs&gt;&gt;::mul_by_ref (55,149,911,725 samples, 22.82%)</title><rect x="72.5558%" y="453" width="22.8200%" height="15" fill="rgb(240,193,28)" fg:x="175348597352" fg:w="55149911725"/><text x="72.8058%" y="463.50">&lt;Lhs as faer_traits::MulByRef&lt;Rhs&gt;&gt;:..</text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&gt;::mul (55,149,911,725 samples, 22.82%)</title><rect x="72.5558%" y="437" width="22.8200%" height="15" fill="rgb(216,20,37)" fg:x="175348597352" fg:w="55149911725"/><text x="72.8058%" y="447.50">&lt;&amp;f64 as core::ops::arith::Mul&gt;::mul</text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (55,149,911,725 samples, 22.82%)</title><rect x="72.5558%" y="421" width="22.8200%" height="15" fill="rgb(206,188,39)" fg:x="175348597352" fg:w="55149911725"/><text x="72.8058%" y="431.50">&lt;f64 as core::ops::arith::Mul&gt;::mul</text></g><g><title>&lt;&amp;&amp;equator::structures::Finalize&lt;E&gt; as equator::traits::Expr&gt;::eval_expr (597,848,351 samples, 0.25%)</title><rect x="95.3813%" y="421" width="0.2474%" height="15" fill="rgb(217,207,13)" fg:x="230511736470" fg:w="597848351"/><text x="95.6313%" y="431.50"></text></g><g><title>&lt;equator::expr::CmpExpr&lt;&amp;equator::spec::by_val::CmpByValWrapper&lt;equator::spec::sized::CmpSizedWrapper&lt;equator::spec::debug::CmpDebugWrapper&lt;C&gt;&gt;&gt;,&amp;Lhs3,&amp;Rhs3&gt; as equator::traits::Expr&gt;::eval_expr (597,848,351 samples, 0.25%)</title><rect x="95.3813%" y="405" width="0.2474%" height="15" fill="rgb(231,73,38)" fg:x="230511736470" fg:w="597848351"/><text x="95.6313%" y="415.50"></text></g><g><title>&lt;equator::Lt as equator::Cmp&lt;Lhs,Rhs&gt;&gt;::test (597,848,351 samples, 0.25%)</title><rect x="95.3813%" y="389" width="0.2474%" height="15" fill="rgb(225,20,46)" fg:x="230511736470" fg:w="597848351"/><text x="95.6313%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (597,848,351 samples, 0.25%)</title><rect x="95.3813%" y="373" width="0.2474%" height="15" fill="rgb(210,31,41)" fg:x="230511736470" fg:w="597848351"/><text x="95.6313%" y="383.50"></text></g><g><title>&lt;faer::row::generic::Row&lt;Inner&gt; as core::ops::index::Index&lt;&lt;Cols as faer::ShapeIdx&gt;::Idx&lt;usize&gt;&gt;&gt;::index (848,378,739 samples, 0.35%)</title><rect x="95.3758%" y="453" width="0.3510%" height="15" fill="rgb(221,200,47)" fg:x="230498509077" fg:w="848378739"/><text x="95.6258%" y="463.50"></text></g><g><title>faer::row::rowref::&lt;impl faer::row::generic::Row&lt;faer::row::rowref::Ref&lt;T,Cols,CStride&gt;&gt;&gt;::at (848,378,739 samples, 0.35%)</title><rect x="95.3758%" y="437" width="0.3510%" height="15" fill="rgb(226,26,5)" fg:x="230498509077" fg:w="848378739"/><text x="95.6258%" y="447.50"></text></g><g><title>faer::row::rowref::&lt;impl faer::row::generic::Row&lt;faer::row::rowref::Ref&lt;T,Cols,CStride&gt;&gt;&gt;::at_unchecked (237,302,995 samples, 0.10%)</title><rect x="95.6287%" y="421" width="0.0982%" height="15" fill="rgb(249,33,26)" fg:x="231109584821" fg:w="237302995"/><text x="95.8787%" y="431.50"></text></g><g><title>faer::row::rowref::&lt;impl faer::row::generic::Row&lt;faer::row::rowref::Ref&lt;T,Cols,CStride&gt;&gt;&gt;::ptr_inbounds_at (237,302,995 samples, 0.10%)</title><rect x="95.6287%" y="405" width="0.0982%" height="15" fill="rgb(235,183,28)" fg:x="231109584821" fg:w="237302995"/><text x="95.8787%" y="415.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::ptr_inbounds_at (237,302,995 samples, 0.10%)</title><rect x="95.6287%" y="389" width="0.0982%" height="15" fill="rgb(221,5,38)" fg:x="231109584821" fg:w="237302995"/><text x="95.8787%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (276,673,344 samples, 0.11%)</title><rect x="95.7268%" y="453" width="0.1145%" height="15" fill="rgb(247,18,42)" fg:x="231346887816" fg:w="276673344"/><text x="95.9768%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (276,673,344 samples, 0.11%)</title><rect x="95.7268%" y="437" width="0.1145%" height="15" fill="rgb(241,131,45)" fg:x="231346887816" fg:w="276673344"/><text x="95.9768%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (270,478,857 samples, 0.11%)</title><rect x="95.7294%" y="421" width="0.1119%" height="15" fill="rgb(249,31,29)" fg:x="231353082303" fg:w="270478857"/><text x="95.9794%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (231,821,134,882 samples, 95.92%)</title><rect x="0.0637%" y="629" width="95.9231%" height="15" fill="rgb(225,111,53)" fg:x="153995231" fg:w="231821134882"/><text x="0.3137%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (231,821,134,882 samples, 95.92%)</title><rect x="0.0637%" y="613" width="95.9231%" height="15" fill="rgb(238,160,17)" fg:x="153995231" fg:w="231821134882"/><text x="0.3137%" y="623.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (231,787,622,893 samples, 95.91%)</title><rect x="0.0776%" y="597" width="95.9092%" height="15" fill="rgb(214,148,48)" fg:x="187507220" fg:w="231787622893"/><text x="0.3276%" y="607.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (231,787,622,893 samples, 95.91%)</title><rect x="0.0776%" y="581" width="95.9092%" height="15" fill="rgb(232,36,49)" fg:x="187507220" fg:w="231787622893"/><text x="0.3276%" y="591.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (231,771,386,227 samples, 95.90%)</title><rect x="0.0843%" y="565" width="95.9025%" height="15" fill="rgb(209,103,24)" fg:x="203743886" fg:w="231771386227"/><text x="0.3343%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (231,771,386,227 samples, 95.90%)</title><rect x="0.0843%" y="549" width="95.9025%" height="15" fill="rgb(229,88,8)" fg:x="203743886" fg:w="231771386227"/><text x="0.3343%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (231,771,386,227 samples, 95.90%)</title><rect x="0.0843%" y="533" width="95.9025%" height="15" fill="rgb(213,181,19)" fg:x="203743886" fg:w="231771386227"/><text x="0.3343%" y="543.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (231,768,082,073 samples, 95.90%)</title><rect x="0.0857%" y="517" width="95.9011%" height="15" fill="rgb(254,191,54)" fg:x="207048040" fg:w="231768082073"/><text x="0.3357%" y="527.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (231,768,082,073 samples, 95.90%)</title><rect x="0.0857%" y="501" width="95.9011%" height="15" fill="rgb(241,83,37)" fg:x="207048040" fg:w="231768082073"/><text x="0.3357%" y="511.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (231,768,082,073 samples, 95.90%)</title><rect x="0.0857%" y="485" width="95.9011%" height="15" fill="rgb(233,36,39)" fg:x="207048040" fg:w="231768082073"/><text x="0.3357%" y="495.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>par_matvec::dense_sparse_impl::par_dense_sparse::_{{closure}}::_{{closure}} (231,768,082,073 samples, 95.90%)</title><rect x="0.0857%" y="469" width="95.9011%" height="15" fill="rgb(226,3,54)" fg:x="207048040" fg:w="231768082073"/><text x="0.3357%" y="479.50">par_matvec::dense_sparse_impl::par_dense_sparse::_{{closure}}::_{{closure}}</text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::col_range (351,568,953 samples, 0.15%)</title><rect x="95.8413%" y="453" width="0.1455%" height="15" fill="rgb(245,192,40)" fg:x="231623561160" fg:w="351568953"/><text x="96.0913%" y="463.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::col_range_unchecked (351,568,953 samples, 0.15%)</title><rect x="95.8413%" y="437" width="0.1455%" height="15" fill="rgb(238,167,29)" fg:x="231623561160" fg:w="351568953"/><text x="96.0913%" y="447.50"></text></g><g><title>[libc.so.6] (231,949,119,249 samples, 95.98%)</title><rect x="0.0135%" y="677" width="95.9760%" height="15" fill="rgb(232,182,51)" fg:x="32658606" fg:w="231949119249"/><text x="0.2635%" y="687.50">[libc.so.6]</text></g><g><title>[libc.so.6] (231,943,080,043 samples, 95.97%)</title><rect x="0.0160%" y="661" width="95.9735%" height="15" fill="rgb(231,60,39)" fg:x="38697812" fg:w="231943080043"/><text x="0.2660%" y="671.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (231,827,782,624 samples, 95.93%)</title><rect x="0.0637%" y="645" width="95.9258%" height="15" fill="rgb(208,69,12)" fg:x="153995231" fg:w="231827782624"/><text x="0.3137%" y="655.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>matrix_market_rs::parse_coords_val (46,800,313 samples, 0.02%)</title><rect x="96.0819%" y="645" width="0.0194%" height="15" fill="rgb(235,93,37)" fg:x="232204860252" fg:w="46800313"/><text x="96.3319%" y="655.50"></text></g><g><title>matrix_market_rs::parse_sparse_coo (52,868,720 samples, 0.02%)</title><rect x="96.0819%" y="661" width="0.0219%" height="15" fill="rgb(213,116,39)" fg:x="232204860252" fg:w="52868720"/><text x="96.3319%" y="671.50"></text></g><g><title>std::io::append_to_string (25,583,784 samples, 0.01%)</title><rect x="96.1037%" y="661" width="0.0106%" height="15" fill="rgb(222,207,29)" fg:x="232257728972" fg:w="25583784"/><text x="96.3537%" y="671.50"></text></g><g><title>[unknown] (303,972,791 samples, 0.13%)</title><rect x="95.9895%" y="677" width="0.1258%" height="15" fill="rgb(206,96,30)" fg:x="231981777855" fg:w="303972791"/><text x="96.2395%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (49,247,375 samples, 0.02%)</title><rect x="96.1224%" y="213" width="0.0204%" height="15" fill="rgb(218,138,4)" fg:x="232302807482" fg:w="49247375"/><text x="96.3724%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (49,247,375 samples, 0.02%)</title><rect x="96.1224%" y="197" width="0.0204%" height="15" fill="rgb(250,191,14)" fg:x="232302807482" fg:w="49247375"/><text x="96.3724%" y="207.50"></text></g><g><title>core::ptr::write (49,247,375 samples, 0.02%)</title><rect x="96.1224%" y="181" width="0.0204%" height="15" fill="rgb(239,60,40)" fg:x="232302807482" fg:w="49247375"/><text x="96.3724%" y="191.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (85,867,674 samples, 0.04%)</title><rect x="96.1224%" y="229" width="0.0355%" height="15" fill="rgb(206,27,48)" fg:x="232302807482" fg:w="85867674"/><text x="96.3724%" y="239.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market::_{{closure}} (36,620,299 samples, 0.02%)</title><rect x="96.1428%" y="213" width="0.0152%" height="15" fill="rgb(225,35,8)" fg:x="232352054857" fg:w="36620299"/><text x="96.3928%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (99,301,159 samples, 0.04%)</title><rect x="96.1224%" y="389" width="0.0411%" height="15" fill="rgb(250,213,24)" fg:x="232302807482" fg:w="99301159"/><text x="96.3724%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (99,301,159 samples, 0.04%)</title><rect x="96.1224%" y="373" width="0.0411%" height="15" fill="rgb(247,123,22)" fg:x="232302807482" fg:w="99301159"/><text x="96.3724%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (99,301,159 samples, 0.04%)</title><rect x="96.1224%" y="357" width="0.0411%" height="15" fill="rgb(231,138,38)" fg:x="232302807482" fg:w="99301159"/><text x="96.3724%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (99,301,159 samples, 0.04%)</title><rect x="96.1224%" y="341" width="0.0411%" height="15" fill="rgb(231,145,46)" fg:x="232302807482" fg:w="99301159"/><text x="96.3724%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (99,301,159 samples, 0.04%)</title><rect x="96.1224%" y="325" width="0.0411%" height="15" fill="rgb(251,118,11)" fg:x="232302807482" fg:w="99301159"/><text x="96.3724%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (99,301,159 samples, 0.04%)</title><rect x="96.1224%" y="309" width="0.0411%" height="15" fill="rgb(217,147,25)" fg:x="232302807482" fg:w="99301159"/><text x="96.3724%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (99,301,159 samples, 0.04%)</title><rect x="96.1224%" y="293" width="0.0411%" height="15" fill="rgb(247,81,37)" fg:x="232302807482" fg:w="99301159"/><text x="96.3724%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (99,301,159 samples, 0.04%)</title><rect x="96.1224%" y="277" width="0.0411%" height="15" fill="rgb(209,12,38)" fg:x="232302807482" fg:w="99301159"/><text x="96.3724%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (99,301,159 samples, 0.04%)</title><rect x="96.1224%" y="261" width="0.0411%" height="15" fill="rgb(227,1,9)" fg:x="232302807482" fg:w="99301159"/><text x="96.3724%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (99,301,159 samples, 0.04%)</title><rect x="96.1224%" y="245" width="0.0411%" height="15" fill="rgb(248,47,43)" fg:x="232302807482" fg:w="99301159"/><text x="96.3724%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (29,700,497 samples, 0.01%)</title><rect x="96.1759%" y="357" width="0.0123%" height="15" fill="rgb(221,10,30)" fg:x="232432092239" fg:w="29700497"/><text x="96.4259%" y="367.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::new_from_argsort_impl (263,853,172 samples, 0.11%)</title><rect x="96.1635%" y="373" width="0.1092%" height="15" fill="rgb(210,229,1)" fg:x="232402108641" fg:w="263853172"/><text x="96.4135%" y="383.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (199,855,265 samples, 0.08%)</title><rect x="96.1900%" y="357" width="0.0827%" height="15" fill="rgb(222,148,37)" fg:x="232466106548" fg:w="199855265"/><text x="96.4400%" y="367.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (170,157,888 samples, 0.07%)</title><rect x="96.2022%" y="341" width="0.0704%" height="15" fill="rgb(234,67,33)" fg:x="232495803925" fg:w="170157888"/><text x="96.4522%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (139,164,913 samples, 0.06%)</title><rect x="96.3242%" y="357" width="0.0576%" height="15" fill="rgb(247,98,35)" fg:x="232790618475" fg:w="139164913"/><text x="96.5742%" y="367.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (74,860,255 samples, 0.03%)</title><rect x="96.3995%" y="245" width="0.0310%" height="15" fill="rgb(247,138,52)" fg:x="232972492478" fg:w="74860255"/><text x="96.6495%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (46,408,135 samples, 0.02%)</title><rect x="96.4113%" y="229" width="0.0192%" height="15" fill="rgb(213,79,30)" fg:x="233000944598" fg:w="46408135"/><text x="96.6613%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (229,603,616 samples, 0.10%)</title><rect x="96.3872%" y="309" width="0.0950%" height="15" fill="rgb(246,177,23)" fg:x="232942714120" fg:w="229603616"/><text x="96.6372%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (229,603,616 samples, 0.10%)</title><rect x="96.3872%" y="293" width="0.0950%" height="15" fill="rgb(230,62,27)" fg:x="232942714120" fg:w="229603616"/><text x="96.6372%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (229,603,616 samples, 0.10%)</title><rect x="96.3872%" y="277" width="0.0950%" height="15" fill="rgb(216,154,8)" fg:x="232942714120" fg:w="229603616"/><text x="96.6372%" y="287.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (199,825,258 samples, 0.08%)</title><rect x="96.3995%" y="261" width="0.0827%" height="15" fill="rgb(244,35,45)" fg:x="232972492478" fg:w="199825258"/><text x="96.6495%" y="271.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (124,965,003 samples, 0.05%)</title><rect x="96.4305%" y="245" width="0.0517%" height="15" fill="rgb(251,115,12)" fg:x="233047352733" fg:w="124965003"/><text x="96.6805%" y="255.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (87,440,987 samples, 0.04%)</title><rect x="96.4460%" y="229" width="0.0362%" height="15" fill="rgb(240,54,50)" fg:x="233084876749" fg:w="87440987"/><text x="96.6960%" y="239.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (69,225,040 samples, 0.03%)</title><rect x="96.5109%" y="229" width="0.0286%" height="15" fill="rgb(233,84,52)" fg:x="233241736407" fg:w="69225040"/><text x="96.7609%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (34,811,110 samples, 0.01%)</title><rect x="96.5251%" y="213" width="0.0144%" height="15" fill="rgb(207,117,47)" fg:x="233276150337" fg:w="34811110"/><text x="96.7751%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (314,353,919 samples, 0.13%)</title><rect x="96.4840%" y="293" width="0.1301%" height="15" fill="rgb(249,43,39)" fg:x="233176647336" fg:w="314353919"/><text x="96.7340%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (314,353,919 samples, 0.13%)</title><rect x="96.4840%" y="277" width="0.1301%" height="15" fill="rgb(209,38,44)" fg:x="233176647336" fg:w="314353919"/><text x="96.7340%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (310,117,231 samples, 0.13%)</title><rect x="96.4857%" y="261" width="0.1283%" height="15" fill="rgb(236,212,23)" fg:x="233180884024" fg:w="310117231"/><text x="96.7357%" y="271.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (249,264,848 samples, 0.10%)</title><rect x="96.5109%" y="245" width="0.1031%" height="15" fill="rgb(242,79,21)" fg:x="233241736407" fg:w="249264848"/><text x="96.7609%" y="255.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (180,039,808 samples, 0.07%)</title><rect x="96.5395%" y="229" width="0.0745%" height="15" fill="rgb(211,96,35)" fg:x="233310961447" fg:w="180039808"/><text x="96.7895%" y="239.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (162,661,544 samples, 0.07%)</title><rect x="96.5467%" y="213" width="0.0673%" height="15" fill="rgb(253,215,40)" fg:x="233328339711" fg:w="162661544"/><text x="96.7967%" y="223.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (26,377,565 samples, 0.01%)</title><rect x="96.6393%" y="213" width="0.0109%" height="15" fill="rgb(211,81,21)" fg:x="233551983698" fg:w="26377565"/><text x="96.8893%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (288,308,427 samples, 0.12%)</title><rect x="96.6140%" y="277" width="0.1193%" height="15" fill="rgb(208,190,38)" fg:x="233491001255" fg:w="288308427"/><text x="96.8640%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (288,308,427 samples, 0.12%)</title><rect x="96.6140%" y="261" width="0.1193%" height="15" fill="rgb(235,213,38)" fg:x="233491001255" fg:w="288308427"/><text x="96.8640%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (288,308,427 samples, 0.12%)</title><rect x="96.6140%" y="245" width="0.1193%" height="15" fill="rgb(237,122,38)" fg:x="233491001255" fg:w="288308427"/><text x="96.8640%" y="255.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (240,199,183 samples, 0.10%)</title><rect x="96.6339%" y="229" width="0.0994%" height="15" fill="rgb(244,218,35)" fg:x="233539110499" fg:w="240199183"/><text x="96.8839%" y="239.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (200,948,419 samples, 0.08%)</title><rect x="96.6502%" y="213" width="0.0831%" height="15" fill="rgb(240,68,47)" fg:x="233578361263" fg:w="200948419"/><text x="96.9002%" y="223.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (179,400,253 samples, 0.07%)</title><rect x="96.6591%" y="197" width="0.0742%" height="15" fill="rgb(210,16,53)" fg:x="233599909429" fg:w="179400253"/><text x="96.9091%" y="207.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (47,279,107 samples, 0.02%)</title><rect x="96.7527%" y="197" width="0.0196%" height="15" fill="rgb(235,124,12)" fg:x="233826100535" fg:w="47279107"/><text x="97.0027%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (253,338,993 samples, 0.10%)</title><rect x="96.7369%" y="261" width="0.1048%" height="15" fill="rgb(224,169,11)" fg:x="233787931866" fg:w="253338993"/><text x="96.9869%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (253,338,993 samples, 0.10%)</title><rect x="96.7369%" y="245" width="0.1048%" height="15" fill="rgb(250,166,2)" fg:x="233787931866" fg:w="253338993"/><text x="96.9869%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (253,338,993 samples, 0.10%)</title><rect x="96.7369%" y="229" width="0.1048%" height="15" fill="rgb(242,216,29)" fg:x="233787931866" fg:w="253338993"/><text x="96.9869%" y="239.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (219,463,875 samples, 0.09%)</title><rect x="96.7509%" y="213" width="0.0908%" height="15" fill="rgb(230,116,27)" fg:x="233821806984" fg:w="219463875"/><text x="97.0009%" y="223.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (167,891,217 samples, 0.07%)</title><rect x="96.7723%" y="197" width="0.0695%" height="15" fill="rgb(228,99,48)" fg:x="233873379642" fg:w="167891217"/><text x="97.0223%" y="207.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (150,048,395 samples, 0.06%)</title><rect x="96.7796%" y="181" width="0.0621%" height="15" fill="rgb(253,11,6)" fg:x="233891222464" fg:w="150048395"/><text x="97.0296%" y="191.50"></text></g><g><title>core::intrinsics::copy (37,910,465 samples, 0.02%)</title><rect x="96.8560%" y="197" width="0.0157%" height="15" fill="rgb(247,143,39)" fg:x="234075760466" fg:w="37910465"/><text x="97.1060%" y="207.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (60,239,967 samples, 0.02%)</title><rect x="96.8751%" y="181" width="0.0249%" height="15" fill="rgb(236,97,10)" fg:x="234122032608" fg:w="60239967"/><text x="97.1251%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (38,428,447 samples, 0.02%)</title><rect x="96.8842%" y="165" width="0.0159%" height="15" fill="rgb(233,208,19)" fg:x="234143844128" fg:w="38428447"/><text x="97.1342%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (222,462,138 samples, 0.09%)</title><rect x="96.8472%" y="245" width="0.0921%" height="15" fill="rgb(216,164,2)" fg:x="234054395235" fg:w="222462138"/><text x="97.0972%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (222,462,138 samples, 0.09%)</title><rect x="96.8472%" y="229" width="0.0921%" height="15" fill="rgb(220,129,5)" fg:x="234054395235" fg:w="222462138"/><text x="97.0972%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (218,341,665 samples, 0.09%)</title><rect x="96.8489%" y="213" width="0.0903%" height="15" fill="rgb(242,17,10)" fg:x="234058515708" fg:w="218341665"/><text x="97.0989%" y="223.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (163,186,442 samples, 0.07%)</title><rect x="96.8717%" y="197" width="0.0675%" height="15" fill="rgb(242,107,0)" fg:x="234113670931" fg:w="163186442"/><text x="97.1217%" y="207.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (94,584,798 samples, 0.04%)</title><rect x="96.9001%" y="181" width="0.0391%" height="15" fill="rgb(251,28,31)" fg:x="234182272575" fg:w="94584798"/><text x="97.1501%" y="191.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (81,764,404 samples, 0.03%)</title><rect x="96.9054%" y="165" width="0.0338%" height="15" fill="rgb(233,223,10)" fg:x="234195092969" fg:w="81764404"/><text x="97.1554%" y="175.50"></text></g><g><title>core::intrinsics::copy (26,266,115 samples, 0.01%)</title><rect x="96.9587%" y="181" width="0.0109%" height="15" fill="rgb(215,21,27)" fg:x="234323980101" fg:w="26266115"/><text x="97.2087%" y="191.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (38,419,147 samples, 0.02%)</title><rect x="96.9801%" y="165" width="0.0159%" height="15" fill="rgb(232,23,21)" fg:x="234375663770" fg:w="38419147"/><text x="97.2301%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (196,623,571 samples, 0.08%)</title><rect x="96.9480%" y="229" width="0.0814%" height="15" fill="rgb(244,5,23)" fg:x="234298166627" fg:w="196623571"/><text x="97.1980%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (196,623,571 samples, 0.08%)</title><rect x="96.9480%" y="213" width="0.0814%" height="15" fill="rgb(226,81,46)" fg:x="234298166627" fg:w="196623571"/><text x="97.1980%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (192,458,670 samples, 0.08%)</title><rect x="96.9497%" y="197" width="0.0796%" height="15" fill="rgb(247,70,30)" fg:x="234302331528" fg:w="192458670"/><text x="97.1997%" y="207.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (144,543,982 samples, 0.06%)</title><rect x="96.9696%" y="181" width="0.0598%" height="15" fill="rgb(212,68,19)" fg:x="234350246216" fg:w="144543982"/><text x="97.2196%" y="191.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (80,707,281 samples, 0.03%)</title><rect x="96.9960%" y="165" width="0.0334%" height="15" fill="rgb(240,187,13)" fg:x="234414082917" fg:w="80707281"/><text x="97.2460%" y="175.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (67,771,844 samples, 0.03%)</title><rect x="97.0013%" y="149" width="0.0280%" height="15" fill="rgb(223,113,26)" fg:x="234427018354" fg:w="67771844"/><text x="97.2513%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (25,988,185 samples, 0.01%)</title><rect x="97.0366%" y="197" width="0.0108%" height="15" fill="rgb(206,192,2)" fg:x="234512257554" fg:w="25988185"/><text x="97.2866%" y="207.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (25,988,185 samples, 0.01%)</title><rect x="97.0366%" y="181" width="0.0108%" height="15" fill="rgb(241,108,4)" fg:x="234512257554" fg:w="25988185"/><text x="97.2866%" y="191.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (51,954,714 samples, 0.02%)</title><rect x="97.0294%" y="213" width="0.0215%" height="15" fill="rgb(247,173,49)" fg:x="234494790198" fg:w="51954714"/><text x="97.2794%" y="223.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (34,952,099 samples, 0.01%)</title><rect x="97.0719%" y="149" width="0.0145%" height="15" fill="rgb(224,114,35)" fg:x="234597458337" fg:w="34952099"/><text x="97.3219%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (184,570,654 samples, 0.08%)</title><rect x="97.0509%" y="213" width="0.0764%" height="15" fill="rgb(245,159,27)" fg:x="234546744912" fg:w="184570654"/><text x="97.3009%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (184,570,654 samples, 0.08%)</title><rect x="97.0509%" y="197" width="0.0764%" height="15" fill="rgb(245,172,44)" fg:x="234546744912" fg:w="184570654"/><text x="97.3009%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (180,263,176 samples, 0.07%)</title><rect x="97.0527%" y="181" width="0.0746%" height="15" fill="rgb(236,23,11)" fg:x="234551052390" fg:w="180263176"/><text x="97.3027%" y="191.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (163,319,258 samples, 0.07%)</title><rect x="97.0597%" y="165" width="0.0676%" height="15" fill="rgb(205,117,38)" fg:x="234567996308" fg:w="163319258"/><text x="97.3097%" y="175.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (98,905,130 samples, 0.04%)</title><rect x="97.0863%" y="149" width="0.0409%" height="15" fill="rgb(237,72,25)" fg:x="234632410436" fg:w="98905130"/><text x="97.3363%" y="159.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (72,498,414 samples, 0.03%)</title><rect x="97.0973%" y="133" width="0.0300%" height="15" fill="rgb(244,70,9)" fg:x="234658817152" fg:w="72498414"/><text x="97.3473%" y="143.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (25,203,498 samples, 0.01%)</title><rect x="97.1273%" y="197" width="0.0104%" height="15" fill="rgb(217,125,39)" fg:x="234731315566" fg:w="25203498"/><text x="97.3773%" y="207.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (25,203,498 samples, 0.01%)</title><rect x="97.1273%" y="181" width="0.0104%" height="15" fill="rgb(235,36,10)" fg:x="234731315566" fg:w="25203498"/><text x="97.3773%" y="191.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (25,831,482 samples, 0.01%)</title><rect x="97.1466%" y="181" width="0.0107%" height="15" fill="rgb(251,123,47)" fg:x="234777970177" fg:w="25831482"/><text x="97.3966%" y="191.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (25,831,482 samples, 0.01%)</title><rect x="97.1466%" y="165" width="0.0107%" height="15" fill="rgb(221,13,13)" fg:x="234777970177" fg:w="25831482"/><text x="97.3966%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (55,688,068 samples, 0.02%)</title><rect x="97.1377%" y="197" width="0.0230%" height="15" fill="rgb(238,131,9)" fg:x="234756519064" fg:w="55688068"/><text x="97.3877%" y="207.50"></text></g><g><title>core::intrinsics::copy (29,686,037 samples, 0.01%)</title><rect x="97.1681%" y="149" width="0.0123%" height="15" fill="rgb(211,50,8)" fg:x="234830113038" fg:w="29686037"/><text x="97.4181%" y="159.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (26,208,440 samples, 0.01%)</title><rect x="97.1895%" y="133" width="0.0108%" height="15" fill="rgb(245,182,24)" fg:x="234881661790" fg:w="26208440"/><text x="97.4395%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (130,441,193 samples, 0.05%)</title><rect x="97.1607%" y="197" width="0.0540%" height="15" fill="rgb(242,14,37)" fg:x="234812207132" fg:w="130441193"/><text x="97.4107%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (130,441,193 samples, 0.05%)</title><rect x="97.1607%" y="181" width="0.0540%" height="15" fill="rgb(246,228,12)" fg:x="234812207132" fg:w="130441193"/><text x="97.4107%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (130,441,193 samples, 0.05%)</title><rect x="97.1607%" y="165" width="0.0540%" height="15" fill="rgb(213,55,15)" fg:x="234812207132" fg:w="130441193"/><text x="97.4107%" y="175.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (82,849,250 samples, 0.03%)</title><rect x="97.1804%" y="149" width="0.0343%" height="15" fill="rgb(209,9,3)" fg:x="234859799075" fg:w="82849250"/><text x="97.4304%" y="159.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (34,778,095 samples, 0.01%)</title><rect x="97.2003%" y="133" width="0.0144%" height="15" fill="rgb(230,59,30)" fg:x="234907870230" fg:w="34778095"/><text x="97.4503%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (30,351,678 samples, 0.01%)</title><rect x="97.2165%" y="181" width="0.0126%" height="15" fill="rgb(209,121,21)" fg:x="234946983624" fg:w="30351678"/><text x="97.4665%" y="191.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (42,869,949 samples, 0.02%)</title><rect x="97.2578%" y="117" width="0.0177%" height="15" fill="rgb(220,109,13)" fg:x="235046726968" fg:w="42869949"/><text x="97.5078%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (168,922,107 samples, 0.07%)</title><rect x="97.2291%" y="181" width="0.0699%" height="15" fill="rgb(232,18,1)" fg:x="234977335302" fg:w="168922107"/><text x="97.4791%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (168,922,107 samples, 0.07%)</title><rect x="97.2291%" y="165" width="0.0699%" height="15" fill="rgb(215,41,42)" fg:x="234977335302" fg:w="168922107"/><text x="97.4791%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (168,922,107 samples, 0.07%)</title><rect x="97.2291%" y="149" width="0.0699%" height="15" fill="rgb(224,123,36)" fg:x="234977335302" fg:w="168922107"/><text x="97.4791%" y="159.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (133,829,588 samples, 0.06%)</title><rect x="97.2436%" y="133" width="0.0554%" height="15" fill="rgb(240,125,3)" fg:x="235012427821" fg:w="133829588"/><text x="97.4936%" y="143.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (56,660,492 samples, 0.02%)</title><rect x="97.2755%" y="117" width="0.0234%" height="15" fill="rgb(205,98,50)" fg:x="235089596917" fg:w="56660492"/><text x="97.5255%" y="127.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (34,898,190 samples, 0.01%)</title><rect x="97.2845%" y="101" width="0.0144%" height="15" fill="rgb(205,185,37)" fg:x="235111359219" fg:w="34898190"/><text x="97.5345%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (69,902,295 samples, 0.03%)</title><rect x="97.3007%" y="165" width="0.0289%" height="15" fill="rgb(238,207,15)" fg:x="235150410723" fg:w="69902295"/><text x="97.5507%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (74,192,296 samples, 0.03%)</title><rect x="97.3296%" y="165" width="0.0307%" height="15" fill="rgb(213,199,42)" fg:x="235220313018" fg:w="74192296"/><text x="97.5796%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (74,192,296 samples, 0.03%)</title><rect x="97.3296%" y="149" width="0.0307%" height="15" fill="rgb(235,201,11)" fg:x="235220313018" fg:w="74192296"/><text x="97.5796%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (74,192,296 samples, 0.03%)</title><rect x="97.3296%" y="133" width="0.0307%" height="15" fill="rgb(207,46,11)" fg:x="235220313018" fg:w="74192296"/><text x="97.5796%" y="143.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (65,745,386 samples, 0.03%)</title><rect x="97.3331%" y="117" width="0.0272%" height="15" fill="rgb(241,35,35)" fg:x="235228759928" fg:w="65745386"/><text x="97.5831%" y="127.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (25,873,724 samples, 0.01%)</title><rect x="97.3496%" y="101" width="0.0107%" height="15" fill="rgb(243,32,47)" fg:x="235268631590" fg:w="25873724"/><text x="97.5996%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (42,211,415 samples, 0.02%)</title><rect x="97.3657%" y="149" width="0.0175%" height="15" fill="rgb(247,202,23)" fg:x="235307595942" fg:w="42211415"/><text x="97.6157%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (82,494,074 samples, 0.03%)</title><rect x="97.3832%" y="149" width="0.0341%" height="15" fill="rgb(219,102,11)" fg:x="235349807357" fg:w="82494074"/><text x="97.6332%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (78,151,292 samples, 0.03%)</title><rect x="97.3850%" y="133" width="0.0323%" height="15" fill="rgb(243,110,44)" fg:x="235354150139" fg:w="78151292"/><text x="97.6350%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (78,151,292 samples, 0.03%)</title><rect x="97.3850%" y="117" width="0.0323%" height="15" fill="rgb(222,74,54)" fg:x="235354150139" fg:w="78151292"/><text x="97.6350%" y="127.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (73,820,662 samples, 0.03%)</title><rect x="97.3868%" y="101" width="0.0305%" height="15" fill="rgb(216,99,12)" fg:x="235358480769" fg:w="73820662"/><text x="97.6368%" y="111.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (47,529,186 samples, 0.02%)</title><rect x="97.3976%" y="85" width="0.0197%" height="15" fill="rgb(226,22,26)" fg:x="235384772245" fg:w="47529186"/><text x="97.6476%" y="95.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (34,706,753 samples, 0.01%)</title><rect x="97.4029%" y="69" width="0.0144%" height="15" fill="rgb(217,163,10)" fg:x="235397594678" fg:w="34706753"/><text x="97.6529%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (47,628,668 samples, 0.02%)</title><rect x="97.4282%" y="117" width="0.0197%" height="15" fill="rgb(213,25,53)" fg:x="235458523675" fg:w="47628668"/><text x="97.6782%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (47,628,668 samples, 0.02%)</title><rect x="97.4282%" y="101" width="0.0197%" height="15" fill="rgb(252,105,26)" fg:x="235458523675" fg:w="47628668"/><text x="97.6782%" y="111.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (30,317,655 samples, 0.01%)</title><rect x="97.4353%" y="85" width="0.0125%" height="15" fill="rgb(220,39,43)" fg:x="235475834688" fg:w="30317655"/><text x="97.6853%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (60,466,960 samples, 0.03%)</title><rect x="97.4246%" y="133" width="0.0250%" height="15" fill="rgb(229,68,48)" fg:x="235449851662" fg:w="60466960"/><text x="97.6746%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (64,584,785 samples, 0.03%)</title><rect x="97.4496%" y="133" width="0.0267%" height="15" fill="rgb(252,8,32)" fg:x="235510318622" fg:w="64584785"/><text x="97.6996%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (64,584,785 samples, 0.03%)</title><rect x="97.4496%" y="117" width="0.0267%" height="15" fill="rgb(223,20,43)" fg:x="235510318622" fg:w="64584785"/><text x="97.6996%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (64,584,785 samples, 0.03%)</title><rect x="97.4496%" y="101" width="0.0267%" height="15" fill="rgb(229,81,49)" fg:x="235510318622" fg:w="64584785"/><text x="97.6996%" y="111.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (42,965,414 samples, 0.02%)</title><rect x="97.4585%" y="85" width="0.0178%" height="15" fill="rgb(236,28,36)" fg:x="235531937993" fg:w="42965414"/><text x="97.7085%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (35,129,059 samples, 0.01%)</title><rect x="97.4818%" y="117" width="0.0145%" height="15" fill="rgb(249,185,26)" fg:x="235588213178" fg:w="35129059"/><text x="97.7318%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (39,446,113 samples, 0.02%)</title><rect x="97.4964%" y="117" width="0.0163%" height="15" fill="rgb(249,174,33)" fg:x="235623342237" fg:w="39446113"/><text x="97.7464%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (39,446,113 samples, 0.02%)</title><rect x="97.4964%" y="101" width="0.0163%" height="15" fill="rgb(233,201,37)" fg:x="235623342237" fg:w="39446113"/><text x="97.7464%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (39,446,113 samples, 0.02%)</title><rect x="97.4964%" y="85" width="0.0163%" height="15" fill="rgb(221,78,26)" fg:x="235623342237" fg:w="39446113"/><text x="97.7464%" y="95.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (34,941,978 samples, 0.01%)</title><rect x="97.4982%" y="69" width="0.0145%" height="15" fill="rgb(250,127,30)" fg:x="235627846372" fg:w="34941978"/><text x="97.7482%" y="79.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (2,804,121,571 samples, 1.16%)</title><rect x="96.3855%" y="357" width="1.1603%" height="15" fill="rgb(230,49,44)" fg:x="232938587838" fg:w="2804121571"/><text x="96.6355%" y="367.50"></text></g><g><title>core::slice::sort::unstable::sort (2,804,121,571 samples, 1.16%)</title><rect x="96.3855%" y="341" width="1.1603%" height="15" fill="rgb(229,67,23)" fg:x="232938587838" fg:w="2804121571"/><text x="96.6355%" y="351.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,804,121,571 samples, 1.16%)</title><rect x="96.3855%" y="325" width="1.1603%" height="15" fill="rgb(249,83,47)" fg:x="232938587838" fg:w="2804121571"/><text x="96.6355%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,570,391,673 samples, 1.06%)</title><rect x="96.4822%" y="309" width="1.0636%" height="15" fill="rgb(215,43,3)" fg:x="233172317736" fg:w="2570391673"/><text x="96.7322%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,251,708,154 samples, 0.93%)</title><rect x="96.6140%" y="293" width="0.9317%" height="15" fill="rgb(238,154,13)" fg:x="233491001255" fg:w="2251708154"/><text x="96.8640%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,963,399,727 samples, 0.81%)</title><rect x="96.7333%" y="277" width="0.8124%" height="15" fill="rgb(219,56,2)" fg:x="233779309682" fg:w="1963399727"/><text x="96.9833%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,701,438,550 samples, 0.70%)</title><rect x="96.8417%" y="261" width="0.7040%" height="15" fill="rgb(233,0,4)" fg:x="234041270859" fg:w="1701438550"/><text x="97.0917%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,465,852,036 samples, 0.61%)</title><rect x="96.9392%" y="245" width="0.6065%" height="15" fill="rgb(235,30,7)" fg:x="234276857373" fg:w="1465852036"/><text x="97.1892%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,247,919,211 samples, 0.52%)</title><rect x="97.0294%" y="229" width="0.5164%" height="15" fill="rgb(250,79,13)" fg:x="234494790198" fg:w="1247919211"/><text x="97.2794%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,011,393,843 samples, 0.42%)</title><rect x="97.1273%" y="213" width="0.4185%" height="15" fill="rgb(211,146,34)" fg:x="234731315566" fg:w="1011393843"/><text x="97.3773%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (800,061,084 samples, 0.33%)</title><rect x="97.2147%" y="197" width="0.3310%" height="15" fill="rgb(228,22,38)" fg:x="234942648325" fg:w="800061084"/><text x="97.4647%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (596,452,000 samples, 0.25%)</title><rect x="97.2989%" y="181" width="0.2468%" height="15" fill="rgb(235,168,5)" fg:x="235146257409" fg:w="596452000"/><text x="97.5489%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (448,204,095 samples, 0.19%)</title><rect x="97.3603%" y="165" width="0.1855%" height="15" fill="rgb(221,155,16)" fg:x="235294505314" fg:w="448204095"/><text x="97.6103%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (310,407,978 samples, 0.13%)</title><rect x="97.4173%" y="149" width="0.1284%" height="15" fill="rgb(215,215,53)" fg:x="235432301431" fg:w="310407978"/><text x="97.6673%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (167,806,002 samples, 0.07%)</title><rect x="97.4763%" y="133" width="0.0694%" height="15" fill="rgb(223,4,10)" fg:x="235574903407" fg:w="167806002"/><text x="97.7263%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (79,921,059 samples, 0.03%)</title><rect x="97.5127%" y="117" width="0.0331%" height="15" fill="rgb(234,103,6)" fg:x="235662788350" fg:w="79921059"/><text x="97.7627%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (48,989,713 samples, 0.02%)</title><rect x="97.5255%" y="101" width="0.0203%" height="15" fill="rgb(227,97,0)" fg:x="235693719696" fg:w="48989713"/><text x="97.7755%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (31,089,396 samples, 0.01%)</title><rect x="97.5329%" y="85" width="0.0129%" height="15" fill="rgb(234,150,53)" fg:x="235711620013" fg:w="31089396"/><text x="97.7829%" y="95.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (31,035,590 samples, 0.01%)</title><rect x="97.5457%" y="357" width="0.0128%" height="15" fill="rgb(228,201,54)" fg:x="235742709409" fg:w="31035590"/><text x="97.7957%" y="367.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (206,343,231 samples, 0.09%)</title><rect x="97.5586%" y="357" width="0.0854%" height="15" fill="rgb(222,22,37)" fg:x="235773744999" fg:w="206343231"/><text x="97.8086%" y="367.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets (3,608,596,821 samples, 1.49%)</title><rect x="96.1635%" y="389" width="1.4932%" height="15" fill="rgb(237,53,32)" fg:x="232402108641" fg:w="3608596821"/><text x="96.4135%" y="399.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl (3,344,743,649 samples, 1.38%)</title><rect x="96.2726%" y="373" width="1.3840%" height="15" fill="rgb(233,25,53)" fg:x="232665961813" fg:w="3344743649"/><text x="96.5226%" y="383.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (299,758,612 samples, 0.12%)</title><rect x="97.7338%" y="181" width="0.1240%" height="15" fill="rgb(210,40,34)" fg:x="236197075216" fg:w="299758612"/><text x="97.9838%" y="191.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (299,758,612 samples, 0.12%)</title><rect x="97.7338%" y="165" width="0.1240%" height="15" fill="rgb(241,220,44)" fg:x="236197075216" fg:w="299758612"/><text x="97.9838%" y="175.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (299,758,612 samples, 0.12%)</title><rect x="97.7338%" y="149" width="0.1240%" height="15" fill="rgb(235,28,35)" fg:x="236197075216" fg:w="299758612"/><text x="97.9838%" y="159.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (299,758,612 samples, 0.12%)</title><rect x="97.7338%" y="133" width="0.1240%" height="15" fill="rgb(210,56,17)" fg:x="236197075216" fg:w="299758612"/><text x="97.9838%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (725,759,679 samples, 0.30%)</title><rect x="97.7150%" y="341" width="0.3003%" height="15" fill="rgb(224,130,29)" fg:x="236151700515" fg:w="725759679"/><text x="97.9650%" y="351.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (725,759,679 samples, 0.30%)</title><rect x="97.7150%" y="325" width="0.3003%" height="15" fill="rgb(235,212,8)" fg:x="236151700515" fg:w="725759679"/><text x="97.9650%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (725,759,679 samples, 0.30%)</title><rect x="97.7150%" y="309" width="0.3003%" height="15" fill="rgb(223,33,50)" fg:x="236151700515" fg:w="725759679"/><text x="97.9650%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (725,759,679 samples, 0.30%)</title><rect x="97.7150%" y="293" width="0.3003%" height="15" fill="rgb(219,149,13)" fg:x="236151700515" fg:w="725759679"/><text x="97.9650%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (725,759,679 samples, 0.30%)</title><rect x="97.7150%" y="277" width="0.3003%" height="15" fill="rgb(250,156,29)" fg:x="236151700515" fg:w="725759679"/><text x="97.9650%" y="287.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (695,880,931 samples, 0.29%)</title><rect x="97.7273%" y="261" width="0.2879%" height="15" fill="rgb(216,193,19)" fg:x="236181579263" fg:w="695880931"/><text x="97.9773%" y="271.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (695,880,931 samples, 0.29%)</title><rect x="97.7273%" y="245" width="0.2879%" height="15" fill="rgb(216,135,14)" fg:x="236181579263" fg:w="695880931"/><text x="97.9773%" y="255.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (680,384,978 samples, 0.28%)</title><rect x="97.7338%" y="229" width="0.2815%" height="15" fill="rgb(241,47,5)" fg:x="236197075216" fg:w="680384978"/><text x="97.9838%" y="239.50"></text></g><g><title>core::str::pattern::Searcher::next_match (680,384,978 samples, 0.28%)</title><rect x="97.7338%" y="213" width="0.2815%" height="15" fill="rgb(233,42,35)" fg:x="236197075216" fg:w="680384978"/><text x="97.9838%" y="223.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (680,384,978 samples, 0.28%)</title><rect x="97.7338%" y="197" width="0.2815%" height="15" fill="rgb(231,13,6)" fg:x="236197075216" fg:w="680384978"/><text x="97.9838%" y="207.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (380,626,366 samples, 0.16%)</title><rect x="97.8578%" y="181" width="0.1575%" height="15" fill="rgb(207,181,40)" fg:x="236496833828" fg:w="380626366"/><text x="98.1078%" y="191.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (380,626,366 samples, 0.16%)</title><rect x="97.8578%" y="165" width="0.1575%" height="15" fill="rgb(254,173,49)" fg:x="236496833828" fg:w="380626366"/><text x="98.1078%" y="175.50"></text></g><g><title>core::str::validations::next_code_point (380,626,366 samples, 0.16%)</title><rect x="97.8578%" y="149" width="0.1575%" height="15" fill="rgb(221,1,38)" fg:x="236496833828" fg:w="380626366"/><text x="98.1078%" y="159.50"></text></g><g><title>core::num::dec2flt::decimal::Decimal::try_fast_path (38,444,871 samples, 0.02%)</title><rect x="98.0699%" y="277" width="0.0159%" height="15" fill="rgb(206,124,46)" fg:x="237009556592" fg:w="38444871"/><text x="98.3199%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (25,692,233 samples, 0.01%)</title><rect x="98.0752%" y="261" width="0.0106%" height="15" fill="rgb(249,21,11)" fg:x="237022309230" fg:w="25692233"/><text x="98.3252%" y="271.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (119,045,000 samples, 0.05%)</title><rect x="98.1706%" y="229" width="0.0493%" height="15" fill="rgb(222,201,40)" fg:x="237252805766" fg:w="119045000"/><text x="98.4206%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (72,505,970 samples, 0.03%)</title><rect x="98.1899%" y="213" width="0.0300%" height="15" fill="rgb(235,61,29)" fg:x="237299344796" fg:w="72505970"/><text x="98.4399%" y="223.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::read_u64 (39,244,224 samples, 0.02%)</title><rect x="98.2199%" y="229" width="0.0162%" height="15" fill="rgb(219,207,3)" fg:x="237371850766" fg:w="39244224"/><text x="98.4699%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (39,244,224 samples, 0.02%)</title><rect x="98.2199%" y="213" width="0.0162%" height="15" fill="rgb(222,56,46)" fg:x="237371850766" fg:w="39244224"/><text x="98.4699%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (39,244,224 samples, 0.02%)</title><rect x="98.2199%" y="197" width="0.0162%" height="15" fill="rgb(239,76,54)" fg:x="237371850766" fg:w="39244224"/><text x="98.4699%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (25,701,653 samples, 0.01%)</title><rect x="98.2467%" y="213" width="0.0106%" height="15" fill="rgb(231,124,27)" fg:x="237436650938" fg:w="25701653"/><text x="98.4967%" y="223.50"></text></g><g><title>core::num::dec2flt::common::is_8digits (51,621,418 samples, 0.02%)</title><rect x="98.2413%" y="229" width="0.0214%" height="15" fill="rgb(249,195,6)" fg:x="237423705440" fg:w="51621418"/><text x="98.4913%" y="239.50"></text></g><g><title>&lt;f64 as num_traits::Num&gt;::from_str_radix (637,645,707 samples, 0.26%)</title><rect x="98.0153%" y="341" width="0.2638%" height="15" fill="rgb(237,174,47)" fg:x="236877460194" fg:w="637645707"/><text x="98.2653%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (607,537,715 samples, 0.25%)</title><rect x="98.0277%" y="325" width="0.2514%" height="15" fill="rgb(206,201,31)" fg:x="236907568186" fg:w="607537715"/><text x="98.2777%" y="335.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (607,537,715 samples, 0.25%)</title><rect x="98.0277%" y="309" width="0.2514%" height="15" fill="rgb(231,57,52)" fg:x="236907568186" fg:w="607537715"/><text x="98.2777%" y="319.50"></text></g><g><title>core::num::dec2flt::dec2flt (573,327,309 samples, 0.24%)</title><rect x="98.0419%" y="293" width="0.2372%" height="15" fill="rgb(248,177,22)" fg:x="236941778592" fg:w="573327309"/><text x="98.2919%" y="303.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (445,682,488 samples, 0.18%)</title><rect x="98.0947%" y="277" width="0.1844%" height="15" fill="rgb(215,211,37)" fg:x="237069423413" fg:w="445682488"/><text x="98.3447%" y="287.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (381,623,279 samples, 0.16%)</title><rect x="98.1212%" y="261" width="0.1579%" height="15" fill="rgb(241,128,51)" fg:x="237133482622" fg:w="381623279"/><text x="98.3712%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (296,300,225 samples, 0.12%)</title><rect x="98.1565%" y="245" width="0.1226%" height="15" fill="rgb(227,165,31)" fg:x="237218805676" fg:w="296300225"/><text x="98.4065%" y="255.50"></text></g><g><title>core::num::dec2flt::parse::parse_8digits (39,779,043 samples, 0.02%)</title><rect x="98.2627%" y="229" width="0.0165%" height="15" fill="rgb(228,167,24)" fg:x="237475326858" fg:w="39779043"/><text x="98.5127%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (93,829,813 samples, 0.04%)</title><rect x="98.2791%" y="261" width="0.0388%" height="15" fill="rgb(228,143,12)" fg:x="237515105901" fg:w="93829813"/><text x="98.5291%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (93,829,813 samples, 0.04%)</title><rect x="98.2791%" y="245" width="0.0388%" height="15" fill="rgb(249,149,8)" fg:x="237515105901" fg:w="93829813"/><text x="98.5291%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (93,829,813 samples, 0.04%)</title><rect x="98.2791%" y="229" width="0.0388%" height="15" fill="rgb(243,35,44)" fg:x="237515105901" fg:w="93829813"/><text x="98.5291%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (93,829,813 samples, 0.04%)</title><rect x="98.2791%" y="213" width="0.0388%" height="15" fill="rgb(246,89,9)" fg:x="237515105901" fg:w="93829813"/><text x="98.5291%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (85,264,003 samples, 0.04%)</title><rect x="98.2827%" y="197" width="0.0353%" height="15" fill="rgb(233,213,13)" fg:x="237523671711" fg:w="85264003"/><text x="98.5327%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (85,264,003 samples, 0.04%)</title><rect x="98.2827%" y="181" width="0.0353%" height="15" fill="rgb(233,141,41)" fg:x="237523671711" fg:w="85264003"/><text x="98.5327%" y="191.50"></text></g><g><title>alloc::alloc::alloc (85,264,003 samples, 0.04%)</title><rect x="98.2827%" y="165" width="0.0353%" height="15" fill="rgb(239,167,4)" fg:x="237523671711" fg:w="85264003"/><text x="98.5327%" y="175.50"></text></g><g><title>malloc (63,360,312 samples, 0.03%)</title><rect x="98.2917%" y="149" width="0.0262%" height="15" fill="rgb(209,217,16)" fg:x="237545575402" fg:w="63360312"/><text x="98.5417%" y="159.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (111,041,137 samples, 0.05%)</title><rect x="98.2791%" y="341" width="0.0459%" height="15" fill="rgb(219,88,35)" fg:x="237515105901" fg:w="111041137"/><text x="98.5291%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (111,041,137 samples, 0.05%)</title><rect x="98.2791%" y="325" width="0.0459%" height="15" fill="rgb(220,193,23)" fg:x="237515105901" fg:w="111041137"/><text x="98.5291%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (111,041,137 samples, 0.05%)</title><rect x="98.2791%" y="309" width="0.0459%" height="15" fill="rgb(230,90,52)" fg:x="237515105901" fg:w="111041137"/><text x="98.5291%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (111,041,137 samples, 0.05%)</title><rect x="98.2791%" y="293" width="0.0459%" height="15" fill="rgb(252,106,19)" fg:x="237515105901" fg:w="111041137"/><text x="98.5291%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (111,041,137 samples, 0.05%)</title><rect x="98.2791%" y="277" width="0.0459%" height="15" fill="rgb(206,74,20)" fg:x="237515105901" fg:w="111041137"/><text x="98.5291%" y="287.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (143,626,426 samples, 0.06%)</title><rect x="98.3251%" y="341" width="0.0594%" height="15" fill="rgb(230,138,44)" fg:x="237626147038" fg:w="143626426"/><text x="98.5751%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (143,626,426 samples, 0.06%)</title><rect x="98.3251%" y="325" width="0.0594%" height="15" fill="rgb(235,182,43)" fg:x="237626147038" fg:w="143626426"/><text x="98.5751%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (143,626,426 samples, 0.06%)</title><rect x="98.3251%" y="309" width="0.0594%" height="15" fill="rgb(242,16,51)" fg:x="237626147038" fg:w="143626426"/><text x="98.5751%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or (54,870,396 samples, 0.02%)</title><rect x="98.3845%" y="341" width="0.0227%" height="15" fill="rgb(248,9,4)" fg:x="237769773464" fg:w="54870396"/><text x="98.6345%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;f64,matrix_market_rs::MtxError&gt;&gt; (41,993,693 samples, 0.02%)</title><rect x="98.3898%" y="325" width="0.0174%" height="15" fill="rgb(210,31,22)" fg:x="237782650167" fg:w="41993693"/><text x="98.6398%" y="335.50"></text></g><g><title>matrix_market_rs::parse_coords_val (1,779,952,306 samples, 0.74%)</title><rect x="97.6725%" y="357" width="0.7365%" height="15" fill="rgb(239,54,39)" fg:x="236049000166" fg:w="1779952306"/><text x="97.9225%" y="367.50"></text></g><g><title>alloc::string::String::len (25,560,773 samples, 0.01%)</title><rect x="98.4213%" y="325" width="0.0106%" height="15" fill="rgb(230,99,41)" fg:x="237858744744" fg:w="25560773"/><text x="98.6713%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (25,560,773 samples, 0.01%)</title><rect x="98.4213%" y="309" width="0.0106%" height="15" fill="rgb(253,106,12)" fg:x="237858744744" fg:w="25560773"/><text x="98.6713%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (137,835,932 samples, 0.06%)</title><rect x="98.4337%" y="325" width="0.0570%" height="15" fill="rgb(213,46,41)" fg:x="237888626328" fg:w="137835932"/><text x="98.6837%" y="335.50"></text></g><g><title>core::str::validations::run_utf8_validation (111,490,726 samples, 0.05%)</title><rect x="98.4446%" y="309" width="0.0461%" height="15" fill="rgb(215,133,35)" fg:x="237914971534" fg:w="111490726"/><text x="98.6946%" y="319.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (34,226,412 samples, 0.01%)</title><rect x="98.5477%" y="245" width="0.0142%" height="15" fill="rgb(213,28,5)" fg:x="238164275661" fg:w="34226412"/><text x="98.7977%" y="255.50"></text></g><g><title>matrix_market_rs::MtxData&lt;T,_&gt;::from_file (2,290,298,531 samples, 0.95%)</title><rect x="97.6584%" y="389" width="0.9477%" height="15" fill="rgb(215,77,49)" fg:x="236014886275" fg:w="2290298531"/><text x="97.9084%" y="399.50"></text></g><g><title>matrix_market_rs::parse_sparse_coo (2,290,298,531 samples, 0.95%)</title><rect x="97.6584%" y="373" width="0.9477%" height="15" fill="rgb(248,100,22)" fg:x="236014886275" fg:w="2290298531"/><text x="97.9084%" y="383.50"></text></g><g><title>std::io::BufRead::read_line (476,232,334 samples, 0.20%)</title><rect x="98.4090%" y="357" width="0.1971%" height="15" fill="rgb(208,67,9)" fg:x="237828952472" fg:w="476232334"/><text x="98.6590%" y="367.50"></text></g><g><title>std::io::append_to_string (463,305,712 samples, 0.19%)</title><rect x="98.4143%" y="341" width="0.1917%" height="15" fill="rgb(219,133,21)" fg:x="237841879094" fg:w="463305712"/><text x="98.6643%" y="351.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (278,722,546 samples, 0.12%)</title><rect x="98.4907%" y="325" width="0.1153%" height="15" fill="rgb(246,46,29)" fg:x="238026462260" fg:w="278722546"/><text x="98.7407%" y="335.50"></text></g><g><title>std::io::read_until (278,722,546 samples, 0.12%)</title><rect x="98.4907%" y="309" width="0.1153%" height="15" fill="rgb(246,185,52)" fg:x="238026462260" fg:w="278722546"/><text x="98.7407%" y="319.50"></text></g><g><title>core::slice::memchr::memchr (200,183,569 samples, 0.08%)</title><rect x="98.5232%" y="293" width="0.0828%" height="15" fill="rgb(252,136,11)" fg:x="238105001237" fg:w="200183569"/><text x="98.7732%" y="303.50"></text></g><g><title>core::slice::memchr::memchr_aligned (195,855,570 samples, 0.08%)</title><rect x="98.5250%" y="277" width="0.0810%" height="15" fill="rgb(219,138,53)" fg:x="238109329236" fg:w="195855570"/><text x="98.7750%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (178,477,318 samples, 0.07%)</title><rect x="98.5322%" y="261" width="0.0739%" height="15" fill="rgb(211,51,23)" fg:x="238126707488" fg:w="178477318"/><text x="98.7822%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_naive (106,682,733 samples, 0.04%)</title><rect x="98.5619%" y="245" width="0.0441%" height="15" fill="rgb(247,221,28)" fg:x="238198502073" fg:w="106682733"/><text x="98.8119%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (87,242,345 samples, 0.04%)</title><rect x="98.6224%" y="373" width="0.0361%" height="15" fill="rgb(251,222,45)" fg:x="238344590227" fg:w="87242345"/><text x="98.8724%" y="383.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market (6,176,949,058 samples, 2.56%)</title><rect x="96.1224%" y="405" width="2.5559%" height="15" fill="rgb(217,162,53)" fg:x="232302807482" fg:w="6176949058"/><text x="96.3724%" y="415.50">pa..</text></g><g><title>par_matvec::test_utils::mtx_data_to_nalgebra_coo (174,571,734 samples, 0.07%)</title><rect x="98.6061%" y="389" width="0.0722%" height="15" fill="rgb(229,93,14)" fg:x="238305184806" fg:w="174571734"/><text x="98.8561%" y="399.50"></text></g><g><title>nalgebra_sparse::coo::CooMatrix&lt;T&gt;::try_from_triplets (47,923,968 samples, 0.02%)</title><rect x="98.6585%" y="373" width="0.0198%" height="15" fill="rgb(209,67,49)" fg:x="238431832572" fg:w="47923968"/><text x="98.9085%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (47,923,968 samples, 0.02%)</title><rect x="98.6585%" y="357" width="0.0198%" height="15" fill="rgb(213,87,29)" fg:x="238431832572" fg:w="47923968"/><text x="98.9085%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,170,179,957 samples, 0.48%)</title><rect x="98.6792%" y="293" width="0.4842%" height="15" fill="rgb(205,151,52)" fg:x="238482071503" fg:w="1170179957"/><text x="98.9292%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,170,179,957 samples, 0.48%)</title><rect x="98.6792%" y="277" width="0.4842%" height="15" fill="rgb(253,215,39)" fg:x="238482071503" fg:w="1170179957"/><text x="98.9292%" y="287.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (352,514,434 samples, 0.15%)</title><rect x="99.0176%" y="261" width="0.1459%" height="15" fill="rgb(221,220,41)" fg:x="239299737026" fg:w="352514434"/><text x="99.2676%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (352,514,434 samples, 0.15%)</title><rect x="99.0176%" y="245" width="0.1459%" height="15" fill="rgb(218,133,21)" fg:x="239299737026" fg:w="352514434"/><text x="99.2676%" y="255.50"></text></g><g><title>faer::row::rowmut::&lt;impl faer::row::generic::Row&lt;Inner&gt;&gt;::fill (3,006,659,285 samples, 1.24%)</title><rect x="98.6792%" y="357" width="1.2441%" height="15" fill="rgb(221,193,43)" fg:x="238482071503" fg:w="3006659285"/><text x="98.9292%" y="367.50"></text></g><g><title>faer::col::colmut::&lt;impl faer::col::generic::Col&lt;Inner&gt;&gt;::fill (3,006,659,285 samples, 1.24%)</title><rect x="98.6792%" y="341" width="1.2441%" height="15" fill="rgb(240,128,52)" fg:x="238482071503" fg:w="3006659285"/><text x="98.9292%" y="351.50"></text></g><g><title>faer::linalg::zip::LastEq&lt;Rows,(),M&gt;::for_each (3,006,659,285 samples, 1.24%)</title><rect x="98.6792%" y="325" width="1.2441%" height="15" fill="rgb(253,114,12)" fg:x="238482071503" fg:w="3006659285"/><text x="98.9292%" y="335.50"></text></g><g><title>faer::linalg::zip::for_each_col (3,006,659,285 samples, 1.24%)</title><rect x="98.6792%" y="309" width="1.2441%" height="15" fill="rgb(215,223,47)" fg:x="238482071503" fg:w="3006659285"/><text x="98.9292%" y="319.50"></text></g><g><title>faer::col::colmut::_&lt;impl faer::col::generic::Col&lt;Inner&gt;&gt;::fill::cloner::_{{closure}} (1,836,479,328 samples, 0.76%)</title><rect x="99.1634%" y="293" width="0.7599%" height="15" fill="rgb(248,225,23)" fg:x="239652251460" fg:w="1836479328"/><text x="99.4134%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (38,293,348 samples, 0.02%)</title><rect x="99.9297%" y="117" width="0.0158%" height="15" fill="rgb(250,108,0)" fg:x="241504050899" fg:w="38293348"/><text x="100.1797%" y="127.50"></text></g><g><title>par_matvec::dense_sparse_impl::par_dense_sparse::_{{closure}}::_{{closure}} (38,293,348 samples, 0.02%)</title><rect x="99.9297%" y="101" width="0.0158%" height="15" fill="rgb(228,208,7)" fg:x="241504050899" fg:w="38293348"/><text x="100.1797%" y="111.50"></text></g><g><title>std::thread::scoped::ScopedJoinHandle&lt;T&gt;::join (35,860,466 samples, 0.01%)</title><rect x="99.9307%" y="85" width="0.0148%" height="15" fill="rgb(244,45,10)" fg:x="241506483781" fg:w="35860466"/><text x="100.1807%" y="95.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (35,860,466 samples, 0.01%)</title><rect x="99.9307%" y="69" width="0.0148%" height="15" fill="rgb(207,125,25)" fg:x="241506483781" fg:w="35860466"/><text x="100.1807%" y="79.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::join (28,791,434 samples, 0.01%)</title><rect x="99.9336%" y="53" width="0.0119%" height="15" fill="rgb(210,195,18)" fg:x="241513552813" fg:w="28791434"/><text x="100.1836%" y="63.50"></text></g><g><title>[libc.so.6] (26,038,443 samples, 0.01%)</title><rect x="99.9347%" y="37" width="0.0108%" height="15" fill="rgb(249,80,12)" fg:x="241516305804" fg:w="26038443"/><text x="100.1847%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (40,932,900 samples, 0.02%)</title><rect x="99.9297%" y="245" width="0.0169%" height="15" fill="rgb(221,65,9)" fg:x="241504050899" fg:w="40932900"/><text x="100.1797%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (40,932,900 samples, 0.02%)</title><rect x="99.9297%" y="229" width="0.0169%" height="15" fill="rgb(235,49,36)" fg:x="241504050899" fg:w="40932900"/><text x="100.1797%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (40,932,900 samples, 0.02%)</title><rect x="99.9297%" y="213" width="0.0169%" height="15" fill="rgb(225,32,20)" fg:x="241504050899" fg:w="40932900"/><text x="100.1797%" y="223.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place{{reify.shim}} (40,932,900 samples, 0.02%)</title><rect x="99.9297%" y="197" width="0.0169%" height="15" fill="rgb(215,141,46)" fg:x="241504050899" fg:w="40932900"/><text x="100.1797%" y="207.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (40,932,900 samples, 0.02%)</title><rect x="99.9297%" y="181" width="0.0169%" height="15" fill="rgb(250,160,47)" fg:x="241504050899" fg:w="40932900"/><text x="100.1797%" y="191.50"></text></g><g><title>&lt;I as alloc::vec::in_place_collect::SpecInPlaceCollect&lt;T,I&gt;&gt;::collect_in_place (40,932,900 samples, 0.02%)</title><rect x="99.9297%" y="165" width="0.0169%" height="15" fill="rgb(216,222,40)" fg:x="241504050899" fg:w="40932900"/><text x="100.1797%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (40,932,900 samples, 0.02%)</title><rect x="99.9297%" y="149" width="0.0169%" height="15" fill="rgb(234,217,39)" fg:x="241504050899" fg:w="40932900"/><text x="100.1797%" y="159.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (40,932,900 samples, 0.02%)</title><rect x="99.9297%" y="133" width="0.0169%" height="15" fill="rgb(207,178,40)" fg:x="241504050899" fg:w="40932900"/><text x="100.1797%" y="143.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (25,827,547 samples, 0.01%)</title><rect x="99.9561%" y="197" width="0.0107%" height="15" fill="rgb(221,136,13)" fg:x="241568018178" fg:w="25827547"/><text x="100.2061%" y="207.50"></text></g><g><title>par_matvec::spmv_drivers::dense_sparse_matmul (3,123,397,767 samples, 1.29%)</title><rect x="98.6783%" y="389" width="1.2924%" height="15" fill="rgb(249,199,10)" fg:x="238479756540" fg:w="3123397767"/><text x="98.9283%" y="399.50"></text></g><g><title>par_matvec::dense_sparse_impl::par_dense_sparse (3,121,082,804 samples, 1.29%)</title><rect x="98.6792%" y="373" width="1.2914%" height="15" fill="rgb(249,222,13)" fg:x="238482071503" fg:w="3121082804"/><text x="98.9292%" y="383.50"></text></g><g><title>std::thread::scoped::scope (114,423,519 samples, 0.05%)</title><rect x="99.9233%" y="357" width="0.0473%" height="15" fill="rgb(244,185,38)" fg:x="241488730788" fg:w="114423519"/><text x="100.1733%" y="367.50"></text></g><g><title>std::panic::catch_unwind (107,692,650 samples, 0.04%)</title><rect x="99.9261%" y="341" width="0.0446%" height="15" fill="rgb(236,202,9)" fg:x="241495461657" fg:w="107692650"/><text x="100.1761%" y="351.50"></text></g><g><title>std::panicking::try (107,692,650 samples, 0.04%)</title><rect x="99.9261%" y="325" width="0.0446%" height="15" fill="rgb(250,229,37)" fg:x="241495461657" fg:w="107692650"/><text x="100.1761%" y="335.50"></text></g><g><title>std::panicking::try::do_call (107,692,650 samples, 0.04%)</title><rect x="99.9261%" y="309" width="0.0446%" height="15" fill="rgb(206,174,23)" fg:x="241495461657" fg:w="107692650"/><text x="100.1761%" y="319.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (107,692,650 samples, 0.04%)</title><rect x="99.9261%" y="293" width="0.0446%" height="15" fill="rgb(211,33,43)" fg:x="241495461657" fg:w="107692650"/><text x="100.1761%" y="303.50"></text></g><g><title>std::thread::scoped::scope::_{{closure}} (107,692,650 samples, 0.04%)</title><rect x="99.9261%" y="277" width="0.0446%" height="15" fill="rgb(245,58,50)" fg:x="241495461657" fg:w="107692650"/><text x="100.1761%" y="287.50"></text></g><g><title>par_matvec::dense_sparse_impl::par_dense_sparse::_{{closure}} (107,692,650 samples, 0.04%)</title><rect x="99.9261%" y="261" width="0.0446%" height="15" fill="rgb(244,68,36)" fg:x="241495461657" fg:w="107692650"/><text x="100.1761%" y="271.50"></text></g><g><title>std::thread::scoped::Scope::spawn (55,125,084 samples, 0.02%)</title><rect x="99.9479%" y="245" width="0.0228%" height="15" fill="rgb(232,229,15)" fg:x="241548029223" fg:w="55125084"/><text x="100.1979%" y="255.50"></text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (55,125,084 samples, 0.02%)</title><rect x="99.9479%" y="229" width="0.0228%" height="15" fill="rgb(254,30,23)" fg:x="241548029223" fg:w="55125084"/><text x="100.1979%" y="239.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (52,584,804 samples, 0.02%)</title><rect x="99.9489%" y="213" width="0.0218%" height="15" fill="rgb(235,160,14)" fg:x="241550569503" fg:w="52584804"/><text x="100.1989%" y="223.50"></text></g><g><title>_start (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="677" width="3.8506%" height="15" fill="rgb(212,155,44)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="687.50">_sta..</text></g><g><title>__libc_start_main (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="661" width="3.8506%" height="15" fill="rgb(226,2,50)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="671.50">__li..</text></g><g><title>[libc.so.6] (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="645" width="3.8506%" height="15" fill="rgb(234,177,6)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="655.50">[lib..</text></g><g><title>main (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="629" width="3.8506%" height="15" fill="rgb(217,24,9)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="639.50">main</text></g><g><title>std::rt::lang_start_internal (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="613" width="3.8506%" height="15" fill="rgb(220,13,46)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="623.50">std:..</text></g><g><title>std::panic::catch_unwind (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="597" width="3.8506%" height="15" fill="rgb(239,221,27)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="607.50">std:..</text></g><g><title>std::panicking::try (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="581" width="3.8506%" height="15" fill="rgb(222,198,25)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="591.50">std:..</text></g><g><title>std::panicking::try::do_call (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="565" width="3.8506%" height="15" fill="rgb(211,99,13)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="575.50">std:..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="549" width="3.8506%" height="15" fill="rgb(232,111,31)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="559.50">std:..</text></g><g><title>std::panic::catch_unwind (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="533" width="3.8506%" height="15" fill="rgb(245,82,37)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="543.50">std:..</text></g><g><title>std::panicking::try (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="517" width="3.8506%" height="15" fill="rgb(227,149,46)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="527.50">std:..</text></g><g><title>std::panicking::try::do_call (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="501" width="3.8506%" height="15" fill="rgb(218,36,50)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="511.50">std:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="485" width="3.8506%" height="15" fill="rgb(226,80,48)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="495.50">core..</text></g><g><title>std::rt::lang_start::_{{closure}} (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="469" width="3.8506%" height="15" fill="rgb(238,224,15)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="479.50">std:..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="453" width="3.8506%" height="15" fill="rgb(241,136,10)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="463.50">std:..</text></g><g><title>core::ops::function::FnOnce::call_once (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="437" width="3.8506%" height="15" fill="rgb(208,32,45)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="447.50">core..</text></g><g><title>profile_spmv::main (9,305,896,743 samples, 3.85%)</title><rect x="96.1224%" y="421" width="3.8506%" height="15" fill="rgb(207,135,9)" fg:x="232302807482" fg:w="9305896743"/><text x="96.3724%" y="431.50">prof..</text></g><g><title>profile_spmv::profile_dense_sparse (3,128,947,685 samples, 1.29%)</title><rect x="98.6783%" y="405" width="1.2947%" height="15" fill="rgb(206,86,44)" fg:x="238479756540" fg:w="3128947685"/><text x="98.9283%" y="415.50"></text></g><g><title>std::io::append_to_string (35,724,554 samples, 0.01%)</title><rect x="99.9837%" y="677" width="0.0148%" height="15" fill="rgb(245,177,15)" fg:x="241634512340" fg:w="35724554"/><text x="100.2337%" y="687.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (27,169,984 samples, 0.01%)</title><rect x="99.9872%" y="661" width="0.0112%" height="15" fill="rgb(206,64,50)" fg:x="241643066910" fg:w="27169984"/><text x="100.2372%" y="671.50"></text></g><g><title>std::io::read_until (27,169,984 samples, 0.01%)</title><rect x="99.9872%" y="645" width="0.0112%" height="15" fill="rgb(234,36,40)" fg:x="241643066910" fg:w="27169984"/><text x="100.2372%" y="655.50"></text></g><g><title>all (241,673,998,994 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="241673998994"/><text x="0.2500%" y="719.50"></text></g><g><title>profile_spmv (241,673,998,994 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(210,75,36)" fg:x="0" fg:w="241673998994"/><text x="0.2500%" y="703.50">profile_spmv</text></g></svg></svg>