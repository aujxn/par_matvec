<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="241894140876"><g><title>[libc.so.6] (54,171,714 samples, 0.02%)</title><rect x="0.0175%" y="613" width="0.0224%" height="15" fill="rgb(227,0,7)" fg:x="42358467" fg:w="54171714"/><text x="0.2675%" y="623.50"></text></g><g><title>cfree (26,845,555 samples, 0.01%)</title><rect x="0.0288%" y="597" width="0.0111%" height="15" fill="rgb(217,0,24)" fg:x="69684626" fg:w="26845555"/><text x="0.2788%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27,006,523 samples, 0.01%)</title><rect x="0.0399%" y="565" width="0.0112%" height="15" fill="rgb(221,193,54)" fg:x="96530181" fg:w="27006523"/><text x="0.2899%" y="575.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (72,853,076,567 samples, 30.12%)</title><rect x="35.2880%" y="421" width="30.1178%" height="15" fill="rgb(248,212,6)" fg:x="85359576577" fg:w="72853076567"/><text x="35.5380%" y="431.50">&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref</text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (72,853,076,567 samples, 30.12%)</title><rect x="35.2880%" y="405" width="30.1178%" height="15" fill="rgb(208,68,35)" fg:x="85359576577" fg:w="72853076567"/><text x="35.5380%" y="415.50">&lt;&amp;f64 as core::ops::arith::Add&gt;::add</text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (72,853,076,567 samples, 30.12%)</title><rect x="35.2880%" y="389" width="30.1178%" height="15" fill="rgb(232,128,0)" fg:x="85359576577" fg:w="72853076567"/><text x="35.5380%" y="399.50">&lt;f64 as core::ops::arith::Add&gt;::add</text></g><g><title>&lt;Lhs as faer_traits::MulByRef&lt;Rhs&gt;&gt;::mul_by_ref (55,472,833,728 samples, 22.93%)</title><rect x="65.4057%" y="421" width="22.9327%" height="15" fill="rgb(207,160,47)" fg:x="158212653144" fg:w="55472833728"/><text x="65.6557%" y="431.50">&lt;Lhs as faer_traits::MulByRef&lt;Rhs&gt;&gt;:..</text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&gt;::mul (55,472,833,728 samples, 22.93%)</title><rect x="65.4057%" y="405" width="22.9327%" height="15" fill="rgb(228,23,34)" fg:x="158212653144" fg:w="55472833728"/><text x="65.6557%" y="415.50">&lt;&amp;f64 as core::ops::arith::Mul&gt;::mul</text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (55,472,833,728 samples, 22.93%)</title><rect x="65.4057%" y="389" width="22.9327%" height="15" fill="rgb(218,30,26)" fg:x="158212653144" fg:w="55472833728"/><text x="65.6557%" y="399.50">&lt;f64 as core::ops::arith::Mul&gt;::mul</text></g><g><title>&lt;&amp;&amp;equator::structures::Finalize&lt;E&gt; as equator::traits::Expr&gt;::eval_expr (554,480,930 samples, 0.23%)</title><rect x="95.8236%" y="389" width="0.2292%" height="15" fill="rgb(220,122,19)" fg:x="231791647967" fg:w="554480930"/><text x="96.0736%" y="399.50"></text></g><g><title>&lt;equator::expr::CmpExpr&lt;&amp;equator::spec::by_val::CmpByValWrapper&lt;equator::spec::sized::CmpSizedWrapper&lt;equator::spec::debug::CmpDebugWrapper&lt;C&gt;&gt;&gt;,&amp;Lhs3,&amp;Rhs3&gt; as equator::traits::Expr&gt;::eval_expr (554,480,930 samples, 0.23%)</title><rect x="95.8236%" y="373" width="0.2292%" height="15" fill="rgb(250,228,42)" fg:x="231791647967" fg:w="554480930"/><text x="96.0736%" y="383.50"></text></g><g><title>&lt;equator::Lt as equator::Cmp&lt;Lhs,Rhs&gt;&gt;::test (554,480,930 samples, 0.23%)</title><rect x="95.8236%" y="357" width="0.2292%" height="15" fill="rgb(240,193,28)" fg:x="231791647967" fg:w="554480930"/><text x="96.0736%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (554,480,930 samples, 0.23%)</title><rect x="95.8236%" y="341" width="0.2292%" height="15" fill="rgb(216,20,37)" fg:x="231791647967" fg:w="554480930"/><text x="96.0736%" y="351.50"></text></g><g><title>&lt;faer::row::generic::Row&lt;Inner&gt; as core::ops::index::Index&lt;&lt;Cols as faer::ShapeIdx&gt;::Idx&lt;usize&gt;&gt;&gt;::index (18,736,782,336 samples, 7.75%)</title><rect x="88.3384%" y="421" width="7.7459%" height="15" fill="rgb(206,188,39)" fg:x="213685486872" fg:w="18736782336"/><text x="88.5884%" y="431.50">&lt;faer::row:..</text></g><g><title>faer::row::rowref::&lt;impl faer::row::generic::Row&lt;faer::row::rowref::Ref&lt;T,Cols,CStride&gt;&gt;&gt;::at (18,736,782,336 samples, 7.75%)</title><rect x="88.3384%" y="405" width="7.7459%" height="15" fill="rgb(217,207,13)" fg:x="213685486872" fg:w="18736782336"/><text x="88.5884%" y="415.50">faer::row::..</text></g><g><title>faer::row::rowref::&lt;impl faer::row::generic::Row&lt;faer::row::rowref::Ref&lt;T,Cols,CStride&gt;&gt;&gt;::at_unchecked (76,140,311 samples, 0.03%)</title><rect x="96.0528%" y="389" width="0.0315%" height="15" fill="rgb(231,73,38)" fg:x="232346128897" fg:w="76140311"/><text x="96.3028%" y="399.50"></text></g><g><title>faer::row::rowref::&lt;impl faer::row::generic::Row&lt;faer::row::rowref::Ref&lt;T,Cols,CStride&gt;&gt;&gt;::ptr_inbounds_at (76,140,311 samples, 0.03%)</title><rect x="96.0528%" y="373" width="0.0315%" height="15" fill="rgb(225,20,46)" fg:x="232346128897" fg:w="76140311"/><text x="96.3028%" y="383.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::ptr_inbounds_at (76,140,311 samples, 0.03%)</title><rect x="96.0528%" y="357" width="0.0315%" height="15" fill="rgb(210,31,41)" fg:x="232346128897" fg:w="76140311"/><text x="96.3028%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (251,422,204 samples, 0.10%)</title><rect x="96.0843%" y="421" width="0.1039%" height="15" fill="rgb(221,200,47)" fg:x="232422269208" fg:w="251422204"/><text x="96.3343%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (251,422,204 samples, 0.10%)</title><rect x="96.0843%" y="405" width="0.1039%" height="15" fill="rgb(226,26,5)" fg:x="232422269208" fg:w="251422204"/><text x="96.3343%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (245,394,820 samples, 0.10%)</title><rect x="96.0868%" y="389" width="0.1014%" height="15" fill="rgb(249,33,26)" fg:x="232428296592" fg:w="245394820"/><text x="96.3368%" y="399.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (232,894,929,666 samples, 96.28%)</title><rect x="0.0399%" y="597" width="96.2797%" height="15" fill="rgb(235,183,28)" fg:x="96530181" fg:w="232894929666"/><text x="0.2899%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (232,894,929,666 samples, 96.28%)</title><rect x="0.0399%" y="581" width="96.2797%" height="15" fill="rgb(221,5,38)" fg:x="96530181" fg:w="232894929666"/><text x="0.2899%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (232,867,923,143 samples, 96.27%)</title><rect x="0.0511%" y="565" width="96.2685%" height="15" fill="rgb(247,18,42)" fg:x="123536704" fg:w="232867923143"/><text x="0.3011%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (232,867,923,143 samples, 96.27%)</title><rect x="0.0511%" y="549" width="96.2685%" height="15" fill="rgb(241,131,45)" fg:x="123536704" fg:w="232867923143"/><text x="0.3011%" y="559.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (232,860,916,439 samples, 96.27%)</title><rect x="0.0540%" y="533" width="96.2656%" height="15" fill="rgb(249,31,29)" fg:x="130543408" fg:w="232860916439"/><text x="0.3040%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (232,860,916,439 samples, 96.27%)</title><rect x="0.0540%" y="517" width="96.2656%" height="15" fill="rgb(225,111,53)" fg:x="130543408" fg:w="232860916439"/><text x="0.3040%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (232,860,916,439 samples, 96.27%)</title><rect x="0.0540%" y="501" width="96.2656%" height="15" fill="rgb(238,160,17)" fg:x="130543408" fg:w="232860916439"/><text x="0.3040%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (232,857,609,182 samples, 96.26%)</title><rect x="0.0553%" y="485" width="96.2643%" height="15" fill="rgb(214,148,48)" fg:x="133850665" fg:w="232857609182"/><text x="0.3053%" y="495.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (232,857,609,182 samples, 96.26%)</title><rect x="0.0553%" y="469" width="96.2643%" height="15" fill="rgb(232,36,49)" fg:x="133850665" fg:w="232857609182"/><text x="0.3053%" y="479.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (232,857,609,182 samples, 96.26%)</title><rect x="0.0553%" y="453" width="96.2643%" height="15" fill="rgb(209,103,24)" fg:x="133850665" fg:w="232857609182"/><text x="0.3053%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>par_matvec::dense_sparse_impl::par_dense_sparse::_{{closure}}::_{{closure}} (232,857,609,182 samples, 96.26%)</title><rect x="0.0553%" y="437" width="96.2643%" height="15" fill="rgb(229,88,8)" fg:x="133850665" fg:w="232857609182"/><text x="0.3053%" y="447.50">par_matvec::dense_sparse_impl::par_dense_sparse::_{{closure}}::_{{closure}}</text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::col_range (317,768,435 samples, 0.13%)</title><rect x="96.1882%" y="421" width="0.1314%" height="15" fill="rgb(213,181,19)" fg:x="232673691412" fg:w="317768435"/><text x="96.4382%" y="431.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::col_range_unchecked (317,768,435 samples, 0.13%)</title><rect x="96.1882%" y="405" width="0.1314%" height="15" fill="rgb(254,191,54)" fg:x="232673691412" fg:w="317768435"/><text x="96.4382%" y="415.50"></text></g><g><title>[libc.so.6] (232,973,500,432 samples, 96.31%)</title><rect x="0.0102%" y="645" width="96.3122%" height="15" fill="rgb(241,83,37)" fg:x="24635846" fg:w="232973500432"/><text x="0.2602%" y="655.50">[libc.so.6]</text></g><g><title>[libc.so.6] (232,966,201,020 samples, 96.31%)</title><rect x="0.0132%" y="629" width="96.3092%" height="15" fill="rgb(233,36,39)" fg:x="31935258" fg:w="232966201020"/><text x="0.2632%" y="639.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (232,901,606,097 samples, 96.28%)</title><rect x="0.0399%" y="613" width="96.2825%" height="15" fill="rgb(226,3,54)" fg:x="96530181" fg:w="232901606097"/><text x="0.2899%" y="623.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>[unknown] (253,284,674 samples, 0.10%)</title><rect x="96.3224%" y="645" width="0.1047%" height="15" fill="rgb(245,192,40)" fg:x="232998136278" fg:w="253284674"/><text x="96.5724%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (53,349,635 samples, 0.02%)</title><rect x="96.4316%" y="181" width="0.0221%" height="15" fill="rgb(238,167,29)" fg:x="233262345381" fg:w="53349635"/><text x="96.6816%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (53,349,635 samples, 0.02%)</title><rect x="96.4316%" y="165" width="0.0221%" height="15" fill="rgb(232,182,51)" fg:x="233262345381" fg:w="53349635"/><text x="96.6816%" y="175.50"></text></g><g><title>core::ptr::write (53,349,635 samples, 0.02%)</title><rect x="96.4316%" y="149" width="0.0221%" height="15" fill="rgb(231,60,39)" fg:x="233262345381" fg:w="53349635"/><text x="96.6816%" y="159.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (87,914,250 samples, 0.04%)</title><rect x="96.4316%" y="197" width="0.0363%" height="15" fill="rgb(208,69,12)" fg:x="233262345381" fg:w="87914250"/><text x="96.6816%" y="207.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market::_{{closure}} (34,564,615 samples, 0.01%)</title><rect x="96.4536%" y="181" width="0.0143%" height="15" fill="rgb(235,93,37)" fg:x="233315695016" fg:w="34564615"/><text x="96.7036%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (93,827,791 samples, 0.04%)</title><rect x="96.4316%" y="357" width="0.0388%" height="15" fill="rgb(213,116,39)" fg:x="233262345381" fg:w="93827791"/><text x="96.6816%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (93,827,791 samples, 0.04%)</title><rect x="96.4316%" y="341" width="0.0388%" height="15" fill="rgb(222,207,29)" fg:x="233262345381" fg:w="93827791"/><text x="96.6816%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (93,827,791 samples, 0.04%)</title><rect x="96.4316%" y="325" width="0.0388%" height="15" fill="rgb(206,96,30)" fg:x="233262345381" fg:w="93827791"/><text x="96.6816%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (93,827,791 samples, 0.04%)</title><rect x="96.4316%" y="309" width="0.0388%" height="15" fill="rgb(218,138,4)" fg:x="233262345381" fg:w="93827791"/><text x="96.6816%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (93,827,791 samples, 0.04%)</title><rect x="96.4316%" y="293" width="0.0388%" height="15" fill="rgb(250,191,14)" fg:x="233262345381" fg:w="93827791"/><text x="96.6816%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (93,827,791 samples, 0.04%)</title><rect x="96.4316%" y="277" width="0.0388%" height="15" fill="rgb(239,60,40)" fg:x="233262345381" fg:w="93827791"/><text x="96.6816%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (93,827,791 samples, 0.04%)</title><rect x="96.4316%" y="261" width="0.0388%" height="15" fill="rgb(206,27,48)" fg:x="233262345381" fg:w="93827791"/><text x="96.6816%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (93,827,791 samples, 0.04%)</title><rect x="96.4316%" y="245" width="0.0388%" height="15" fill="rgb(225,35,8)" fg:x="233262345381" fg:w="93827791"/><text x="96.6816%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (93,827,791 samples, 0.04%)</title><rect x="96.4316%" y="229" width="0.0388%" height="15" fill="rgb(250,213,24)" fg:x="233262345381" fg:w="93827791"/><text x="96.6816%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (93,827,791 samples, 0.04%)</title><rect x="96.4316%" y="213" width="0.0388%" height="15" fill="rgb(247,123,22)" fg:x="233262345381" fg:w="93827791"/><text x="96.6816%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (39,312,990 samples, 0.02%)</title><rect x="96.4835%" y="325" width="0.0163%" height="15" fill="rgb(231,138,38)" fg:x="233387819228" fg:w="39312990"/><text x="96.7335%" y="335.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::new_from_argsort_impl (244,514,538 samples, 0.10%)</title><rect x="96.4704%" y="341" width="0.1011%" height="15" fill="rgb(231,145,46)" fg:x="233356173172" fg:w="244514538"/><text x="96.7204%" y="351.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (161,477,720 samples, 0.07%)</title><rect x="96.5047%" y="325" width="0.0668%" height="15" fill="rgb(251,118,11)" fg:x="233439209990" fg:w="161477720"/><text x="96.7547%" y="335.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (154,247,274 samples, 0.06%)</title><rect x="96.5077%" y="309" width="0.0638%" height="15" fill="rgb(217,147,25)" fg:x="233446440436" fg:w="154247274"/><text x="96.7577%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (144,593,925 samples, 0.06%)</title><rect x="96.6200%" y="325" width="0.0598%" height="15" fill="rgb(247,81,37)" fg:x="233718000362" fg:w="144593925"/><text x="96.8700%" y="335.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (31,674,205 samples, 0.01%)</title><rect x="96.6993%" y="213" width="0.0131%" height="15" fill="rgb(209,12,38)" fg:x="233910060783" fg:w="31674205"/><text x="96.9493%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (24,838,699 samples, 0.01%)</title><rect x="96.7022%" y="197" width="0.0103%" height="15" fill="rgb(227,1,9)" fg:x="233916896289" fg:w="24838699"/><text x="96.9522%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (190,010,890 samples, 0.08%)</title><rect x="96.6816%" y="277" width="0.0786%" height="15" fill="rgb(248,47,43)" fg:x="233867051056" fg:w="190010890"/><text x="96.9316%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (190,010,890 samples, 0.08%)</title><rect x="96.6816%" y="261" width="0.0786%" height="15" fill="rgb(221,10,30)" fg:x="233867051056" fg:w="190010890"/><text x="96.9316%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (190,010,890 samples, 0.08%)</title><rect x="96.6816%" y="245" width="0.0786%" height="15" fill="rgb(210,229,1)" fg:x="233867051056" fg:w="190010890"/><text x="96.9316%" y="255.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (147,001,163 samples, 0.06%)</title><rect x="96.6993%" y="229" width="0.0608%" height="15" fill="rgb(222,148,37)" fg:x="233910060783" fg:w="147001163"/><text x="96.9493%" y="239.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (115,326,958 samples, 0.05%)</title><rect x="96.7124%" y="213" width="0.0477%" height="15" fill="rgb(234,67,33)" fg:x="233941734988" fg:w="115326958"/><text x="96.9624%" y="223.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (76,225,864 samples, 0.03%)</title><rect x="96.7286%" y="197" width="0.0315%" height="15" fill="rgb(247,98,35)" fg:x="233980836082" fg:w="76225864"/><text x="96.9786%" y="207.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (54,075,412 samples, 0.02%)</title><rect x="96.7768%" y="197" width="0.0224%" height="15" fill="rgb(247,138,52)" fg:x="234097361481" fg:w="54075412"/><text x="97.0268%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (31,524,140 samples, 0.01%)</title><rect x="96.7861%" y="181" width="0.0130%" height="15" fill="rgb(213,79,30)" fg:x="234119912753" fg:w="31524140"/><text x="97.0361%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (255,403,008 samples, 0.11%)</title><rect x="96.7620%" y="261" width="0.1056%" height="15" fill="rgb(246,177,23)" fg:x="234061590581" fg:w="255403008"/><text x="97.0120%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (255,403,008 samples, 0.11%)</title><rect x="96.7620%" y="245" width="0.1056%" height="15" fill="rgb(230,62,27)" fg:x="234061590581" fg:w="255403008"/><text x="97.0120%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (250,855,656 samples, 0.10%)</title><rect x="96.7639%" y="229" width="0.1037%" height="15" fill="rgb(216,154,8)" fg:x="234066137933" fg:w="250855656"/><text x="97.0139%" y="239.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (219,632,108 samples, 0.09%)</title><rect x="96.7768%" y="213" width="0.0908%" height="15" fill="rgb(244,35,45)" fg:x="234097361481" fg:w="219632108"/><text x="97.0268%" y="223.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (165,556,696 samples, 0.07%)</title><rect x="96.7991%" y="197" width="0.0684%" height="15" fill="rgb(251,115,12)" fg:x="234151436893" fg:w="165556696"/><text x="97.0491%" y="207.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (138,600,896 samples, 0.06%)</title><rect x="96.8103%" y="181" width="0.0573%" height="15" fill="rgb(240,54,50)" fg:x="234178392693" fg:w="138600896"/><text x="97.0603%" y="191.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (40,396,080 samples, 0.02%)</title><rect x="96.8825%" y="181" width="0.0167%" height="15" fill="rgb(233,84,52)" fg:x="234353074251" fg:w="40396080"/><text x="97.1325%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (233,006,364 samples, 0.10%)</title><rect x="96.8676%" y="245" width="0.0963%" height="15" fill="rgb(207,117,47)" fg:x="234316993589" fg:w="233006364"/><text x="97.1176%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (233,006,364 samples, 0.10%)</title><rect x="96.8676%" y="229" width="0.0963%" height="15" fill="rgb(249,43,39)" fg:x="234316993589" fg:w="233006364"/><text x="97.1176%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (233,006,364 samples, 0.10%)</title><rect x="96.8676%" y="213" width="0.0963%" height="15" fill="rgb(209,38,44)" fg:x="234316993589" fg:w="233006364"/><text x="97.1176%" y="223.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (196,925,702 samples, 0.08%)</title><rect x="96.8825%" y="197" width="0.0814%" height="15" fill="rgb(236,212,23)" fg:x="234353074251" fg:w="196925702"/><text x="97.1325%" y="207.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (156,529,622 samples, 0.06%)</title><rect x="96.8992%" y="181" width="0.0647%" height="15" fill="rgb(242,79,21)" fg:x="234393470331" fg:w="156529622"/><text x="97.1492%" y="191.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (143,128,962 samples, 0.06%)</title><rect x="96.9047%" y="165" width="0.0592%" height="15" fill="rgb(211,96,35)" fg:x="234406870991" fg:w="143128962"/><text x="97.1547%" y="175.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (53,576,447 samples, 0.02%)</title><rect x="96.9787%" y="165" width="0.0221%" height="15" fill="rgb(253,215,40)" fg:x="234585868153" fg:w="53576447"/><text x="97.2287%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (210,381,500 samples, 0.09%)</title><rect x="96.9639%" y="229" width="0.0870%" height="15" fill="rgb(211,81,21)" fg:x="234549999953" fg:w="210381500"/><text x="97.2139%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (210,381,500 samples, 0.09%)</title><rect x="96.9639%" y="213" width="0.0870%" height="15" fill="rgb(208,190,38)" fg:x="234549999953" fg:w="210381500"/><text x="97.2139%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (205,887,950 samples, 0.09%)</title><rect x="96.9658%" y="197" width="0.0851%" height="15" fill="rgb(235,213,38)" fg:x="234554493503" fg:w="205887950"/><text x="97.2158%" y="207.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (174,513,300 samples, 0.07%)</title><rect x="96.9787%" y="181" width="0.0721%" height="15" fill="rgb(237,122,38)" fg:x="234585868153" fg:w="174513300"/><text x="97.2287%" y="191.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (120,936,853 samples, 0.05%)</title><rect x="97.0009%" y="165" width="0.0500%" height="15" fill="rgb(244,218,35)" fg:x="234639444600" fg:w="120936853"/><text x="97.2509%" y="175.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (98,685,746 samples, 0.04%)</title><rect x="97.0101%" y="149" width="0.0408%" height="15" fill="rgb(240,68,47)" fg:x="234661695707" fg:w="98685746"/><text x="97.2601%" y="159.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (49,381,361 samples, 0.02%)</title><rect x="97.0731%" y="149" width="0.0204%" height="15" fill="rgb(210,16,53)" fg:x="234814087639" fg:w="49381361"/><text x="97.3231%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (179,389,982 samples, 0.07%)</title><rect x="97.0564%" y="213" width="0.0742%" height="15" fill="rgb(235,124,12)" fg:x="234773817752" fg:w="179389982"/><text x="97.3064%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (179,389,982 samples, 0.07%)</title><rect x="97.0564%" y="197" width="0.0742%" height="15" fill="rgb(224,169,11)" fg:x="234773817752" fg:w="179389982"/><text x="97.3064%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (179,389,982 samples, 0.07%)</title><rect x="97.0564%" y="181" width="0.0742%" height="15" fill="rgb(250,166,2)" fg:x="234773817752" fg:w="179389982"/><text x="97.3064%" y="191.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (148,089,661 samples, 0.06%)</title><rect x="97.0694%" y="165" width="0.0612%" height="15" fill="rgb(242,216,29)" fg:x="234805118073" fg:w="148089661"/><text x="97.3194%" y="175.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (89,738,734 samples, 0.04%)</title><rect x="97.0935%" y="149" width="0.0371%" height="15" fill="rgb(230,116,27)" fg:x="234863469000" fg:w="89738734"/><text x="97.3435%" y="159.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (62,773,455 samples, 0.03%)</title><rect x="97.1046%" y="133" width="0.0260%" height="15" fill="rgb(228,99,48)" fg:x="234890434279" fg:w="62773455"/><text x="97.3546%" y="143.50"></text></g><g><title>core::intrinsics::copy (26,858,400 samples, 0.01%)</title><rect x="97.1473%" y="149" width="0.0111%" height="15" fill="rgb(253,11,6)" fg:x="234993592498" fg:w="26858400"/><text x="97.3973%" y="159.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (40,284,608 samples, 0.02%)</title><rect x="97.1640%" y="133" width="0.0167%" height="15" fill="rgb(247,143,39)" fg:x="235033915058" fg:w="40284608"/><text x="97.4140%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (35,807,610 samples, 0.01%)</title><rect x="97.1658%" y="117" width="0.0148%" height="15" fill="rgb(236,97,10)" fg:x="235038392056" fg:w="35807610"/><text x="97.4158%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (174,737,203 samples, 0.07%)</title><rect x="97.1362%" y="197" width="0.0722%" height="15" fill="rgb(233,208,19)" fg:x="234966716136" fg:w="174737203"/><text x="97.3862%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (174,737,203 samples, 0.07%)</title><rect x="97.1362%" y="181" width="0.0722%" height="15" fill="rgb(216,164,2)" fg:x="234966716136" fg:w="174737203"/><text x="97.3862%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (170,239,335 samples, 0.07%)</title><rect x="97.1380%" y="165" width="0.0704%" height="15" fill="rgb(220,129,5)" fg:x="234971214004" fg:w="170239335"/><text x="97.3880%" y="175.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (121,002,441 samples, 0.05%)</title><rect x="97.1584%" y="149" width="0.0500%" height="15" fill="rgb(242,17,10)" fg:x="235020450898" fg:w="121002441"/><text x="97.4084%" y="159.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (67,253,673 samples, 0.03%)</title><rect x="97.1806%" y="133" width="0.0278%" height="15" fill="rgb(242,107,0)" fg:x="235074199666" fg:w="67253673"/><text x="97.4306%" y="143.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (53,905,584 samples, 0.02%)</title><rect x="97.1861%" y="117" width="0.0223%" height="15" fill="rgb(251,28,31)" fg:x="235087547755" fg:w="53905584"/><text x="97.4361%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (40,195,303 samples, 0.02%)</title><rect x="97.2121%" y="181" width="0.0166%" height="15" fill="rgb(233,223,10)" fg:x="235150345690" fg:w="40195303"/><text x="97.4621%" y="191.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (53,913,940 samples, 0.02%)</title><rect x="97.2473%" y="117" width="0.0223%" height="15" fill="rgb(215,21,27)" fg:x="235235430082" fg:w="53913940"/><text x="97.4973%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (157,037,482 samples, 0.06%)</title><rect x="97.2287%" y="181" width="0.0649%" height="15" fill="rgb(232,23,21)" fg:x="235190540993" fg:w="157037482"/><text x="97.4787%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (157,037,482 samples, 0.06%)</title><rect x="97.2287%" y="165" width="0.0649%" height="15" fill="rgb(244,5,23)" fg:x="235190540993" fg:w="157037482"/><text x="97.4787%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (157,037,482 samples, 0.06%)</title><rect x="97.2287%" y="149" width="0.0649%" height="15" fill="rgb(226,81,46)" fg:x="235190540993" fg:w="157037482"/><text x="97.4787%" y="159.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (125,579,644 samples, 0.05%)</title><rect x="97.2417%" y="133" width="0.0519%" height="15" fill="rgb(247,70,30)" fg:x="235221998831" fg:w="125579644"/><text x="97.4917%" y="143.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (58,234,453 samples, 0.02%)</title><rect x="97.2696%" y="117" width="0.0241%" height="15" fill="rgb(212,68,19)" fg:x="235289344022" fg:w="58234453"/><text x="97.5196%" y="127.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (31,388,540 samples, 0.01%)</title><rect x="97.2806%" y="101" width="0.0130%" height="15" fill="rgb(240,187,13)" fg:x="235316189935" fg:w="31388540"/><text x="97.5306%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (35,841,072 samples, 0.01%)</title><rect x="97.3343%" y="85" width="0.0148%" height="15" fill="rgb(223,113,26)" fg:x="235446080012" fg:w="35841072"/><text x="97.5843%" y="95.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (67,142,871 samples, 0.03%)</title><rect x="97.3288%" y="101" width="0.0278%" height="15" fill="rgb(206,192,2)" fg:x="235432697634" fg:w="67142871"/><text x="97.5788%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (156,749,430 samples, 0.06%)</title><rect x="97.3103%" y="165" width="0.0648%" height="15" fill="rgb(241,108,4)" fg:x="235387820157" fg:w="156749430"/><text x="97.5603%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (156,749,430 samples, 0.06%)</title><rect x="97.3103%" y="149" width="0.0648%" height="15" fill="rgb(247,173,49)" fg:x="235387820157" fg:w="156749430"/><text x="97.5603%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (156,749,430 samples, 0.06%)</title><rect x="97.3103%" y="133" width="0.0648%" height="15" fill="rgb(224,114,35)" fg:x="235387820157" fg:w="156749430"/><text x="97.5603%" y="143.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (125,409,165 samples, 0.05%)</title><rect x="97.3232%" y="117" width="0.0518%" height="15" fill="rgb(245,159,27)" fg:x="235419160422" fg:w="125409165"/><text x="97.5732%" y="127.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (44,729,082 samples, 0.02%)</title><rect x="97.3566%" y="101" width="0.0185%" height="15" fill="rgb(245,172,44)" fg:x="235499840505" fg:w="44729082"/><text x="97.6066%" y="111.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (26,805,978 samples, 0.01%)</title><rect x="97.3640%" y="85" width="0.0111%" height="15" fill="rgb(236,23,11)" fg:x="235517763609" fg:w="26805978"/><text x="97.6140%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (26,739,809 samples, 0.01%)</title><rect x="97.3899%" y="133" width="0.0111%" height="15" fill="rgb(205,117,38)" fg:x="235580400078" fg:w="26739809"/><text x="97.6399%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (26,739,809 samples, 0.01%)</title><rect x="97.3899%" y="117" width="0.0111%" height="15" fill="rgb(237,72,25)" fg:x="235580400078" fg:w="26739809"/><text x="97.6399%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (71,408,104 samples, 0.03%)</title><rect x="97.3769%" y="149" width="0.0295%" height="15" fill="rgb(244,70,9)" fg:x="235549083382" fg:w="71408104"/><text x="97.6269%" y="159.50"></text></g><g><title>core::intrinsics::copy (26,753,388 samples, 0.01%)</title><rect x="97.4138%" y="101" width="0.0111%" height="15" fill="rgb(217,125,39)" fg:x="235638349646" fg:w="26753388"/><text x="97.6638%" y="111.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (35,905,215 samples, 0.01%)</title><rect x="97.4323%" y="85" width="0.0148%" height="15" fill="rgb(235,36,10)" fg:x="235683120881" fg:w="35905215"/><text x="97.6823%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (121,013,785 samples, 0.05%)</title><rect x="97.4064%" y="149" width="0.0500%" height="15" fill="rgb(251,123,47)" fg:x="235620491486" fg:w="121013785"/><text x="97.6564%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (121,013,785 samples, 0.05%)</title><rect x="97.4064%" y="133" width="0.0500%" height="15" fill="rgb(221,13,13)" fg:x="235620491486" fg:w="121013785"/><text x="97.6564%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (116,534,103 samples, 0.05%)</title><rect x="97.4083%" y="117" width="0.0482%" height="15" fill="rgb(238,131,9)" fg:x="235624971168" fg:w="116534103"/><text x="97.6583%" y="127.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (76,402,237 samples, 0.03%)</title><rect x="97.4249%" y="101" width="0.0316%" height="15" fill="rgb(211,50,8)" fg:x="235665103034" fg:w="76402237"/><text x="97.6749%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (67,291,369 samples, 0.03%)</title><rect x="97.4583%" y="133" width="0.0278%" height="15" fill="rgb(245,182,24)" fg:x="235746020215" fg:w="67291369"/><text x="97.7083%" y="143.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (54,077,100 samples, 0.02%)</title><rect x="97.5010%" y="69" width="0.0224%" height="15" fill="rgb(242,14,37)" fg:x="235849252018" fg:w="54077100"/><text x="97.7510%" y="79.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (40,492,471 samples, 0.02%)</title><rect x="97.5066%" y="53" width="0.0167%" height="15" fill="rgb(246,228,12)" fg:x="235862836647" fg:w="40492471"/><text x="97.7566%" y="63.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (117,005,449 samples, 0.05%)</title><rect x="97.4862%" y="133" width="0.0484%" height="15" fill="rgb(213,55,15)" fg:x="235813311584" fg:w="117005449"/><text x="97.7362%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (117,005,449 samples, 0.05%)</title><rect x="97.4862%" y="117" width="0.0484%" height="15" fill="rgb(209,9,3)" fg:x="235813311584" fg:w="117005449"/><text x="97.7362%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (117,005,449 samples, 0.05%)</title><rect x="97.4862%" y="101" width="0.0484%" height="15" fill="rgb(230,59,30)" fg:x="235813311584" fg:w="117005449"/><text x="97.7362%" y="111.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (90,026,150 samples, 0.04%)</title><rect x="97.4973%" y="85" width="0.0372%" height="15" fill="rgb(209,121,21)" fg:x="235840290883" fg:w="90026150"/><text x="97.7473%" y="95.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (26,987,915 samples, 0.01%)</title><rect x="97.5234%" y="69" width="0.0112%" height="15" fill="rgb(220,109,13)" fg:x="235903329118" fg:w="26987915"/><text x="97.7734%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (26,999,507 samples, 0.01%)</title><rect x="97.5438%" y="101" width="0.0112%" height="15" fill="rgb(232,18,1)" fg:x="235952704935" fg:w="26999507"/><text x="97.7938%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (26,999,507 samples, 0.01%)</title><rect x="97.5438%" y="85" width="0.0112%" height="15" fill="rgb(215,41,42)" fg:x="235952704935" fg:w="26999507"/><text x="97.7938%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (62,788,490 samples, 0.03%)</title><rect x="97.5364%" y="117" width="0.0260%" height="15" fill="rgb(224,123,36)" fg:x="235934853165" fg:w="62788490"/><text x="97.7864%" y="127.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (35,657,252 samples, 0.01%)</title><rect x="97.5734%" y="53" width="0.0147%" height="15" fill="rgb(240,125,3)" fg:x="236024353389" fg:w="35657252"/><text x="97.8234%" y="63.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (89,251,326 samples, 0.04%)</title><rect x="97.5624%" y="117" width="0.0369%" height="15" fill="rgb(205,98,50)" fg:x="235997641655" fg:w="89251326"/><text x="97.8124%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (89,251,326 samples, 0.04%)</title><rect x="97.5624%" y="101" width="0.0369%" height="15" fill="rgb(205,185,37)" fg:x="235997641655" fg:w="89251326"/><text x="97.8124%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (89,251,326 samples, 0.04%)</title><rect x="97.5624%" y="85" width="0.0369%" height="15" fill="rgb(238,207,15)" fg:x="235997641655" fg:w="89251326"/><text x="97.8124%" y="95.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (75,860,753 samples, 0.03%)</title><rect x="97.5679%" y="69" width="0.0314%" height="15" fill="rgb(213,199,42)" fg:x="236011032228" fg:w="75860753"/><text x="97.8179%" y="79.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (26,882,340 samples, 0.01%)</title><rect x="97.5881%" y="53" width="0.0111%" height="15" fill="rgb(235,201,11)" fg:x="236060010641" fg:w="26882340"/><text x="97.8381%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (26,755,151 samples, 0.01%)</title><rect x="97.6104%" y="85" width="0.0111%" height="15" fill="rgb(207,46,11)" fg:x="236113875812" fg:w="26755151"/><text x="97.8604%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (26,755,151 samples, 0.01%)</title><rect x="97.6104%" y="69" width="0.0111%" height="15" fill="rgb(241,35,35)" fg:x="236113875812" fg:w="26755151"/><text x="97.8604%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (58,183,229 samples, 0.02%)</title><rect x="97.6011%" y="101" width="0.0241%" height="15" fill="rgb(243,32,47)" fg:x="236091391653" fg:w="58183229"/><text x="97.8511%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (44,980,478 samples, 0.02%)</title><rect x="97.6252%" y="101" width="0.0186%" height="15" fill="rgb(247,202,23)" fg:x="236149574882" fg:w="44980478"/><text x="97.8752%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (44,980,478 samples, 0.02%)</title><rect x="97.6252%" y="85" width="0.0186%" height="15" fill="rgb(219,102,11)" fg:x="236149574882" fg:w="44980478"/><text x="97.8752%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (44,980,478 samples, 0.02%)</title><rect x="97.6252%" y="69" width="0.0186%" height="15" fill="rgb(243,110,44)" fg:x="236149574882" fg:w="44980478"/><text x="97.8752%" y="79.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (36,031,371 samples, 0.01%)</title><rect x="97.6289%" y="53" width="0.0149%" height="15" fill="rgb(222,74,54)" fg:x="236158523989" fg:w="36031371"/><text x="97.8789%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (27,013,273 samples, 0.01%)</title><rect x="97.6456%" y="85" width="0.0112%" height="15" fill="rgb(216,99,12)" fg:x="236199056706" fg:w="27013273"/><text x="97.8956%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (49,433,119 samples, 0.02%)</title><rect x="97.6568%" y="85" width="0.0204%" height="15" fill="rgb(226,22,26)" fg:x="236226069979" fg:w="49433119"/><text x="97.9068%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (49,433,119 samples, 0.02%)</title><rect x="97.6568%" y="69" width="0.0204%" height="15" fill="rgb(217,163,10)" fg:x="236226069979" fg:w="49433119"/><text x="97.9068%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (49,433,119 samples, 0.02%)</title><rect x="97.6568%" y="53" width="0.0204%" height="15" fill="rgb(213,25,53)" fg:x="236226069979" fg:w="49433119"/><text x="97.9068%" y="63.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (35,931,605 samples, 0.01%)</title><rect x="97.6624%" y="37" width="0.0149%" height="15" fill="rgb(252,105,26)" fg:x="236239571493" fg:w="35931605"/><text x="97.9124%" y="47.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (2,480,197,551 samples, 1.03%)</title><rect x="96.6797%" y="325" width="1.0253%" height="15" fill="rgb(220,39,43)" fg:x="233862594287" fg:w="2480197551"/><text x="96.9297%" y="335.50"></text></g><g><title>core::slice::sort::unstable::sort (2,480,197,551 samples, 1.03%)</title><rect x="96.6797%" y="309" width="1.0253%" height="15" fill="rgb(229,68,48)" fg:x="233862594287" fg:w="2480197551"/><text x="96.9297%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,480,197,551 samples, 1.03%)</title><rect x="96.6797%" y="293" width="1.0253%" height="15" fill="rgb(252,8,32)" fg:x="233862594287" fg:w="2480197551"/><text x="96.9297%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,285,729,892 samples, 0.94%)</title><rect x="96.7601%" y="277" width="0.9449%" height="15" fill="rgb(223,20,43)" fg:x="234057061946" fg:w="2285729892"/><text x="97.0101%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,025,798,249 samples, 0.84%)</title><rect x="96.8676%" y="261" width="0.8375%" height="15" fill="rgb(229,81,49)" fg:x="234316993589" fg:w="2025798249"/><text x="97.1176%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,792,791,885 samples, 0.74%)</title><rect x="96.9639%" y="245" width="0.7411%" height="15" fill="rgb(236,28,36)" fg:x="234549999953" fg:w="1792791885"/><text x="97.2139%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,582,410,385 samples, 0.65%)</title><rect x="97.0509%" y="229" width="0.6542%" height="15" fill="rgb(249,185,26)" fg:x="234760381453" fg:w="1582410385"/><text x="97.3009%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,389,584,104 samples, 0.57%)</title><rect x="97.1306%" y="213" width="0.5745%" height="15" fill="rgb(249,174,33)" fg:x="234953207734" fg:w="1389584104"/><text x="97.3806%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,201,338,499 samples, 0.50%)</title><rect x="97.2084%" y="197" width="0.4966%" height="15" fill="rgb(233,201,37)" fg:x="235141453339" fg:w="1201338499"/><text x="97.4584%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (995,213,363 samples, 0.41%)</title><rect x="97.2936%" y="181" width="0.4114%" height="15" fill="rgb(221,78,26)" fg:x="235347578475" fg:w="995213363"/><text x="97.5436%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (798,222,251 samples, 0.33%)</title><rect x="97.3751%" y="165" width="0.3300%" height="15" fill="rgb(250,127,30)" fg:x="235544569587" fg:w="798222251"/><text x="97.6251%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (601,286,567 samples, 0.25%)</title><rect x="97.4565%" y="149" width="0.2486%" height="15" fill="rgb(230,49,44)" fg:x="235741505271" fg:w="601286567"/><text x="97.7065%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (412,474,805 samples, 0.17%)</title><rect x="97.5345%" y="133" width="0.1705%" height="15" fill="rgb(229,67,23)" fg:x="235930317033" fg:w="412474805"/><text x="97.7845%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (255,898,857 samples, 0.11%)</title><rect x="97.5993%" y="117" width="0.1058%" height="15" fill="rgb(249,83,47)" fg:x="236086892981" fg:w="255898857"/><text x="97.8493%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (148,236,478 samples, 0.06%)</title><rect x="97.6438%" y="101" width="0.0613%" height="15" fill="rgb(215,43,3)" fg:x="236194555360" fg:w="148236478"/><text x="97.8938%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (67,288,740 samples, 0.03%)</title><rect x="97.6772%" y="85" width="0.0278%" height="15" fill="rgb(238,154,13)" fg:x="236275503098" fg:w="67288740"/><text x="97.9272%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (27,080,627 samples, 0.01%)</title><rect x="97.6939%" y="69" width="0.0112%" height="15" fill="rgb(219,56,2)" fg:x="236315711211" fg:w="27080627"/><text x="97.9439%" y="79.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (199,505,182 samples, 0.08%)</title><rect x="97.7106%" y="325" width="0.0825%" height="15" fill="rgb(233,0,4)" fg:x="236356284546" fg:w="199505182"/><text x="97.9606%" y="335.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets (3,231,329,467 samples, 1.34%)</title><rect x="96.4704%" y="357" width="1.3358%" height="15" fill="rgb(235,30,7)" fg:x="233356173172" fg:w="3231329467"/><text x="96.7204%" y="367.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl (2,986,814,929 samples, 1.23%)</title><rect x="96.5715%" y="341" width="1.2348%" height="15" fill="rgb(250,79,13)" fg:x="233600687710" fg:w="2986814929"/><text x="96.8215%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (37,529,733 samples, 0.02%)</title><rect x="97.8128%" y="325" width="0.0155%" height="15" fill="rgb(211,146,34)" fg:x="236603490843" fg:w="37529733"/><text x="98.0628%" y="335.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (294,950,983 samples, 0.12%)</title><rect x="97.8607%" y="149" width="0.1219%" height="15" fill="rgb(228,22,38)" fg:x="236719180533" fg:w="294950983"/><text x="98.1107%" y="159.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (294,950,983 samples, 0.12%)</title><rect x="97.8607%" y="133" width="0.1219%" height="15" fill="rgb(235,168,5)" fg:x="236719180533" fg:w="294950983"/><text x="98.1107%" y="143.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (294,950,983 samples, 0.12%)</title><rect x="97.8607%" y="117" width="0.1219%" height="15" fill="rgb(221,155,16)" fg:x="236719180533" fg:w="294950983"/><text x="98.1107%" y="127.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (294,950,983 samples, 0.12%)</title><rect x="97.8607%" y="101" width="0.1219%" height="15" fill="rgb(215,215,53)" fg:x="236719180533" fg:w="294950983"/><text x="98.1107%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (680,210,490 samples, 0.28%)</title><rect x="97.8486%" y="309" width="0.2812%" height="15" fill="rgb(223,4,10)" fg:x="236689971697" fg:w="680210490"/><text x="98.0986%" y="319.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (680,210,490 samples, 0.28%)</title><rect x="97.8486%" y="293" width="0.2812%" height="15" fill="rgb(234,103,6)" fg:x="236689971697" fg:w="680210490"/><text x="98.0986%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (680,210,490 samples, 0.28%)</title><rect x="97.8486%" y="277" width="0.2812%" height="15" fill="rgb(227,97,0)" fg:x="236689971697" fg:w="680210490"/><text x="98.0986%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (680,210,490 samples, 0.28%)</title><rect x="97.8486%" y="261" width="0.2812%" height="15" fill="rgb(234,150,53)" fg:x="236689971697" fg:w="680210490"/><text x="98.0986%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (680,210,490 samples, 0.28%)</title><rect x="97.8486%" y="245" width="0.2812%" height="15" fill="rgb(228,201,54)" fg:x="236689971697" fg:w="680210490"/><text x="98.0986%" y="255.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (651,001,654 samples, 0.27%)</title><rect x="97.8607%" y="229" width="0.2691%" height="15" fill="rgb(222,22,37)" fg:x="236719180533" fg:w="651001654"/><text x="98.1107%" y="239.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (651,001,654 samples, 0.27%)</title><rect x="97.8607%" y="213" width="0.2691%" height="15" fill="rgb(237,53,32)" fg:x="236719180533" fg:w="651001654"/><text x="98.1107%" y="223.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (651,001,654 samples, 0.27%)</title><rect x="97.8607%" y="197" width="0.2691%" height="15" fill="rgb(233,25,53)" fg:x="236719180533" fg:w="651001654"/><text x="98.1107%" y="207.50"></text></g><g><title>core::str::pattern::Searcher::next_match (651,001,654 samples, 0.27%)</title><rect x="97.8607%" y="181" width="0.2691%" height="15" fill="rgb(210,40,34)" fg:x="236719180533" fg:w="651001654"/><text x="98.1107%" y="191.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (651,001,654 samples, 0.27%)</title><rect x="97.8607%" y="165" width="0.2691%" height="15" fill="rgb(241,220,44)" fg:x="236719180533" fg:w="651001654"/><text x="98.1107%" y="175.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (356,050,671 samples, 0.15%)</title><rect x="97.9826%" y="149" width="0.1472%" height="15" fill="rgb(235,28,35)" fg:x="237014131516" fg:w="356050671"/><text x="98.2326%" y="159.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (356,050,671 samples, 0.15%)</title><rect x="97.9826%" y="133" width="0.1472%" height="15" fill="rgb(210,56,17)" fg:x="237014131516" fg:w="356050671"/><text x="98.2326%" y="143.50"></text></g><g><title>core::str::validations::next_code_point (356,050,671 samples, 0.15%)</title><rect x="97.9826%" y="117" width="0.1472%" height="15" fill="rgb(224,130,29)" fg:x="237014131516" fg:w="356050671"/><text x="98.2326%" y="127.50"></text></g><g><title>core::num::dec2flt::decimal::Decimal::try_fast_path (48,871,223 samples, 0.02%)</title><rect x="98.1637%" y="245" width="0.0202%" height="15" fill="rgb(235,212,8)" fg:x="237452120712" fg:w="48871223"/><text x="98.4137%" y="255.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (86,971,571 samples, 0.04%)</title><rect x="98.2552%" y="197" width="0.0360%" height="15" fill="rgb(223,33,50)" fg:x="237673688542" fg:w="86971571"/><text x="98.5052%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (61,839,804 samples, 0.03%)</title><rect x="98.2656%" y="181" width="0.0256%" height="15" fill="rgb(219,149,13)" fg:x="237698820309" fg:w="61839804"/><text x="98.5156%" y="191.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::read_u64 (29,459,367 samples, 0.01%)</title><rect x="98.2912%" y="197" width="0.0122%" height="15" fill="rgb(250,156,29)" fg:x="237760660113" fg:w="29459367"/><text x="98.5412%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (29,459,367 samples, 0.01%)</title><rect x="98.2912%" y="181" width="0.0122%" height="15" fill="rgb(216,193,19)" fg:x="237760660113" fg:w="29459367"/><text x="98.5412%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29,459,367 samples, 0.01%)</title><rect x="98.2912%" y="165" width="0.0122%" height="15" fill="rgb(216,135,14)" fg:x="237760660113" fg:w="29459367"/><text x="98.5412%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (25,216,527 samples, 0.01%)</title><rect x="98.3138%" y="181" width="0.0104%" height="15" fill="rgb(241,47,5)" fg:x="237815258637" fg:w="25216527"/><text x="98.5638%" y="191.50"></text></g><g><title>core::num::dec2flt::common::is_8digits (29,437,986 samples, 0.01%)</title><rect x="98.3138%" y="197" width="0.0122%" height="15" fill="rgb(233,42,35)" fg:x="237815258637" fg:w="29437986"/><text x="98.5638%" y="207.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (288,016,595 samples, 0.12%)</title><rect x="98.2272%" y="213" width="0.1191%" height="15" fill="rgb(231,13,6)" fg:x="237605818543" fg:w="288016595"/><text x="98.4772%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::parse_8digits (49,138,515 samples, 0.02%)</title><rect x="98.3259%" y="197" width="0.0203%" height="15" fill="rgb(207,181,40)" fg:x="237844696623" fg:w="49138515"/><text x="98.5759%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (28,036,908 samples, 0.01%)</title><rect x="98.3347%" y="181" width="0.0116%" height="15" fill="rgb(254,173,49)" fg:x="237865798230" fg:w="28036908"/><text x="98.5847%" y="191.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (388,822,224 samples, 0.16%)</title><rect x="98.1873%" y="245" width="0.1607%" height="15" fill="rgb(221,1,38)" fg:x="237509325512" fg:w="388822224"/><text x="98.4373%" y="255.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (350,891,725 samples, 0.15%)</title><rect x="98.2030%" y="229" width="0.1451%" height="15" fill="rgb(206,124,46)" fg:x="237547256011" fg:w="350891725"/><text x="98.4530%" y="239.50"></text></g><g><title>&lt;f64 as num_traits::Num&gt;::from_str_radix (532,159,258 samples, 0.22%)</title><rect x="98.1298%" y="309" width="0.2200%" height="15" fill="rgb(249,21,11)" fg:x="237370182187" fg:w="532159258"/><text x="98.3798%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (506,734,554 samples, 0.21%)</title><rect x="98.1403%" y="293" width="0.2095%" height="15" fill="rgb(222,201,40)" fg:x="237395606891" fg:w="506734554"/><text x="98.3903%" y="303.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (506,734,554 samples, 0.21%)</title><rect x="98.1403%" y="277" width="0.2095%" height="15" fill="rgb(235,61,29)" fg:x="237395606891" fg:w="506734554"/><text x="98.3903%" y="287.50"></text></g><g><title>core::num::dec2flt::dec2flt (483,926,448 samples, 0.20%)</title><rect x="98.1497%" y="261" width="0.2001%" height="15" fill="rgb(219,207,3)" fg:x="237418414997" fg:w="483926448"/><text x="98.3997%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (96,497,726 samples, 0.04%)</title><rect x="98.3498%" y="229" width="0.0399%" height="15" fill="rgb(222,56,46)" fg:x="237902341445" fg:w="96497726"/><text x="98.5998%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (96,497,726 samples, 0.04%)</title><rect x="98.3498%" y="213" width="0.0399%" height="15" fill="rgb(239,76,54)" fg:x="237902341445" fg:w="96497726"/><text x="98.5998%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (96,497,726 samples, 0.04%)</title><rect x="98.3498%" y="197" width="0.0399%" height="15" fill="rgb(231,124,27)" fg:x="237902341445" fg:w="96497726"/><text x="98.5998%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (96,497,726 samples, 0.04%)</title><rect x="98.3498%" y="181" width="0.0399%" height="15" fill="rgb(249,195,6)" fg:x="237902341445" fg:w="96497726"/><text x="98.5998%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (83,843,998 samples, 0.03%)</title><rect x="98.3550%" y="165" width="0.0347%" height="15" fill="rgb(237,174,47)" fg:x="237914995173" fg:w="83843998"/><text x="98.6050%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (83,843,998 samples, 0.03%)</title><rect x="98.3550%" y="149" width="0.0347%" height="15" fill="rgb(206,201,31)" fg:x="237914995173" fg:w="83843998"/><text x="98.6050%" y="159.50"></text></g><g><title>alloc::alloc::alloc (83,843,998 samples, 0.03%)</title><rect x="98.3550%" y="133" width="0.0347%" height="15" fill="rgb(231,57,52)" fg:x="237914995173" fg:w="83843998"/><text x="98.6050%" y="143.50"></text></g><g><title>malloc (71,249,943 samples, 0.03%)</title><rect x="98.3602%" y="117" width="0.0295%" height="15" fill="rgb(248,177,22)" fg:x="237927589228" fg:w="71249943"/><text x="98.6102%" y="127.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (117,622,665 samples, 0.05%)</title><rect x="98.3498%" y="309" width="0.0486%" height="15" fill="rgb(215,211,37)" fg:x="237902341445" fg:w="117622665"/><text x="98.5998%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (117,622,665 samples, 0.05%)</title><rect x="98.3498%" y="293" width="0.0486%" height="15" fill="rgb(241,128,51)" fg:x="237902341445" fg:w="117622665"/><text x="98.5998%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (117,622,665 samples, 0.05%)</title><rect x="98.3498%" y="277" width="0.0486%" height="15" fill="rgb(227,165,31)" fg:x="237902341445" fg:w="117622665"/><text x="98.5998%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (117,622,665 samples, 0.05%)</title><rect x="98.3498%" y="261" width="0.0486%" height="15" fill="rgb(228,167,24)" fg:x="237902341445" fg:w="117622665"/><text x="98.5998%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (117,622,665 samples, 0.05%)</title><rect x="98.3498%" y="245" width="0.0486%" height="15" fill="rgb(228,143,12)" fg:x="237902341445" fg:w="117622665"/><text x="98.5998%" y="255.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (129,936,591 samples, 0.05%)</title><rect x="98.3984%" y="309" width="0.0537%" height="15" fill="rgb(249,149,8)" fg:x="238019964110" fg:w="129936591"/><text x="98.6484%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (129,936,591 samples, 0.05%)</title><rect x="98.3984%" y="293" width="0.0537%" height="15" fill="rgb(243,35,44)" fg:x="238019964110" fg:w="129936591"/><text x="98.6484%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (129,936,591 samples, 0.05%)</title><rect x="98.3984%" y="277" width="0.0537%" height="15" fill="rgb(246,89,9)" fg:x="238019964110" fg:w="129936591"/><text x="98.6484%" y="287.50"></text></g><g><title>cfree (67,373,772 samples, 0.03%)</title><rect x="98.4591%" y="277" width="0.0279%" height="15" fill="rgb(233,213,13)" fg:x="238166691928" fg:w="67373772"/><text x="98.7091%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or (112,542,150 samples, 0.05%)</title><rect x="98.4521%" y="309" width="0.0465%" height="15" fill="rgb(233,141,41)" fg:x="238149900701" fg:w="112542150"/><text x="98.7021%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;f64,matrix_market_rs::MtxError&gt;&gt; (108,274,329 samples, 0.04%)</title><rect x="98.4539%" y="293" width="0.0448%" height="15" fill="rgb(239,167,4)" fg:x="238154168522" fg:w="108274329"/><text x="98.7039%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;matrix_market_rs::MtxError&gt; (28,377,151 samples, 0.01%)</title><rect x="98.4869%" y="277" width="0.0117%" height="15" fill="rgb(209,217,16)" fg:x="238234065700" fg:w="28377151"/><text x="98.7369%" y="287.50"></text></g><g><title>matrix_market_rs::parse_coords_val (1,625,618,850 samples, 0.67%)</title><rect x="97.8301%" y="325" width="0.6720%" height="15" fill="rgb(219,88,35)" fg:x="236645259161" fg:w="1625618850"/><text x="98.0801%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (91,236,015 samples, 0.04%)</title><rect x="98.5177%" y="293" width="0.0377%" height="15" fill="rgb(220,193,23)" fg:x="238308563045" fg:w="91236015"/><text x="98.7677%" y="303.50"></text></g><g><title>core::str::validations::run_utf8_validation (74,366,221 samples, 0.03%)</title><rect x="98.5247%" y="277" width="0.0307%" height="15" fill="rgb(230,90,52)" fg:x="238325432839" fg:w="74366221"/><text x="98.7747%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25,374,653 samples, 0.01%)</title><rect x="98.5816%" y="213" width="0.0105%" height="15" fill="rgb(252,106,19)" fg:x="238463218288" fg:w="25374653"/><text x="98.8316%" y="223.50"></text></g><g><title>[libc.so.6] (25,374,653 samples, 0.01%)</title><rect x="98.5816%" y="197" width="0.0105%" height="15" fill="rgb(206,74,20)" fg:x="238463218288" fg:w="25374653"/><text x="98.8316%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (41,612,523 samples, 0.02%)</title><rect x="98.5781%" y="261" width="0.0172%" height="15" fill="rgb(230,138,44)" fg:x="238454711771" fg:w="41612523"/><text x="98.8281%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (41,612,523 samples, 0.02%)</title><rect x="98.5781%" y="245" width="0.0172%" height="15" fill="rgb(235,182,43)" fg:x="238454711771" fg:w="41612523"/><text x="98.8281%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (41,612,523 samples, 0.02%)</title><rect x="98.5781%" y="229" width="0.0172%" height="15" fill="rgb(242,16,51)" fg:x="238454711771" fg:w="41612523"/><text x="98.8281%" y="239.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (37,646,160 samples, 0.02%)</title><rect x="98.6194%" y="213" width="0.0156%" height="15" fill="rgb(248,9,4)" fg:x="238554554188" fg:w="37646160"/><text x="98.8694%" y="223.50"></text></g><g><title>matrix_market_rs::MtxData&lt;T,_&gt;::from_file (2,064,304,165 samples, 0.85%)</title><rect x="97.8076%" y="357" width="0.8534%" height="15" fill="rgb(210,31,22)" fg:x="236590845411" fg:w="2064304165"/><text x="98.0576%" y="367.50"></text></g><g><title>matrix_market_rs::parse_sparse_coo (2,064,304,165 samples, 0.85%)</title><rect x="97.8076%" y="341" width="0.8534%" height="15" fill="rgb(239,54,39)" fg:x="236590845411" fg:w="2064304165"/><text x="98.0576%" y="351.50"></text></g><g><title>std::io::BufRead::read_line (384,271,565 samples, 0.16%)</title><rect x="98.5021%" y="325" width="0.1589%" height="15" fill="rgb(230,99,41)" fg:x="238270878011" fg:w="384271565"/><text x="98.7521%" y="335.50"></text></g><g><title>std::io::append_to_string (380,072,124 samples, 0.16%)</title><rect x="98.5039%" y="309" width="0.1571%" height="15" fill="rgb(253,106,12)" fg:x="238275077452" fg:w="380072124"/><text x="98.7539%" y="319.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (255,350,516 samples, 0.11%)</title><rect x="98.5554%" y="293" width="0.1056%" height="15" fill="rgb(213,46,41)" fg:x="238399799060" fg:w="255350516"/><text x="98.8054%" y="303.50"></text></g><g><title>std::io::read_until (255,350,516 samples, 0.11%)</title><rect x="98.5554%" y="277" width="0.1056%" height="15" fill="rgb(215,133,35)" fg:x="238399799060" fg:w="255350516"/><text x="98.8054%" y="287.50"></text></g><g><title>core::slice::memchr::memchr (158,825,282 samples, 0.07%)</title><rect x="98.5953%" y="261" width="0.0657%" height="15" fill="rgb(213,28,5)" fg:x="238496324294" fg:w="158825282"/><text x="98.8453%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_aligned (146,195,443 samples, 0.06%)</title><rect x="98.6006%" y="245" width="0.0604%" height="15" fill="rgb(215,77,49)" fg:x="238508954133" fg:w="146195443"/><text x="98.8506%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (140,072,029 samples, 0.06%)</title><rect x="98.6031%" y="229" width="0.0579%" height="15" fill="rgb(248,100,22)" fg:x="238515077547" fg:w="140072029"/><text x="98.8531%" y="239.50"></text></g><g><title>core::slice::memchr::memchr_naive (62,949,228 samples, 0.03%)</title><rect x="98.6350%" y="213" width="0.0260%" height="15" fill="rgb(208,67,9)" fg:x="238592200348" fg:w="62949228"/><text x="98.8850%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (64,311,702 samples, 0.03%)</title><rect x="98.6869%" y="341" width="0.0266%" height="15" fill="rgb(219,133,21)" fg:x="238717872996" fg:w="64311702"/><text x="98.9369%" y="351.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market (5,568,219,332 samples, 2.30%)</title><rect x="96.4316%" y="373" width="2.3019%" height="15" fill="rgb(246,46,29)" fg:x="233262345381" fg:w="5568219332"/><text x="96.6816%" y="383.50">p..</text></g><g><title>par_matvec::test_utils::mtx_data_to_nalgebra_coo (175,415,137 samples, 0.07%)</title><rect x="98.6610%" y="357" width="0.0725%" height="15" fill="rgb(246,185,52)" fg:x="238655149576" fg:w="175415137"/><text x="98.9110%" y="367.50"></text></g><g><title>nalgebra_sparse::coo::CooMatrix&lt;T&gt;::try_from_triplets (48,380,015 samples, 0.02%)</title><rect x="98.7135%" y="341" width="0.0200%" height="15" fill="rgb(252,136,11)" fg:x="238782184698" fg:w="48380015"/><text x="98.9635%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (48,380,015 samples, 0.02%)</title><rect x="98.7135%" y="325" width="0.0200%" height="15" fill="rgb(219,138,53)" fg:x="238782184698" fg:w="48380015"/><text x="98.9635%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,204,479,421 samples, 0.50%)</title><rect x="98.7360%" y="261" width="0.4979%" height="15" fill="rgb(211,51,23)" fg:x="238836594842" fg:w="1204479421"/><text x="98.9860%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,204,479,421 samples, 0.50%)</title><rect x="98.7360%" y="245" width="0.4979%" height="15" fill="rgb(247,221,28)" fg:x="238836594842" fg:w="1204479421"/><text x="98.9860%" y="255.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (245,582,023 samples, 0.10%)</title><rect x="99.1324%" y="229" width="0.1015%" height="15" fill="rgb(251,222,45)" fg:x="239795492240" fg:w="245582023"/><text x="99.3824%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (245,582,023 samples, 0.10%)</title><rect x="99.1324%" y="213" width="0.1015%" height="15" fill="rgb(217,162,53)" fg:x="239795492240" fg:w="245582023"/><text x="99.3824%" y="223.50"></text></g><g><title>faer::row::rowmut::&lt;impl faer::row::generic::Row&lt;Inner&gt;&gt;::fill (2,893,995,892 samples, 1.20%)</title><rect x="98.7360%" y="325" width="1.1964%" height="15" fill="rgb(229,93,14)" fg:x="238836594842" fg:w="2893995892"/><text x="98.9860%" y="335.50"></text></g><g><title>faer::col::colmut::&lt;impl faer::col::generic::Col&lt;Inner&gt;&gt;::fill (2,893,995,892 samples, 1.20%)</title><rect x="98.7360%" y="309" width="1.1964%" height="15" fill="rgb(209,67,49)" fg:x="238836594842" fg:w="2893995892"/><text x="98.9860%" y="319.50"></text></g><g><title>faer::linalg::zip::LastEq&lt;Rows,(),M&gt;::for_each (2,893,995,892 samples, 1.20%)</title><rect x="98.7360%" y="293" width="1.1964%" height="15" fill="rgb(213,87,29)" fg:x="238836594842" fg:w="2893995892"/><text x="98.9860%" y="303.50"></text></g><g><title>faer::linalg::zip::for_each_col (2,893,995,892 samples, 1.20%)</title><rect x="98.7360%" y="277" width="1.1964%" height="15" fill="rgb(205,151,52)" fg:x="238836594842" fg:w="2893995892"/><text x="98.9860%" y="287.50"></text></g><g><title>faer::col::colmut::_&lt;impl faer::col::generic::Col&lt;Inner&gt;&gt;::fill::cloner::_{{closure}} (1,689,516,471 samples, 0.70%)</title><rect x="99.2339%" y="261" width="0.6985%" height="15" fill="rgb(253,215,39)" fg:x="240041074263" fg:w="1689516471"/><text x="99.4839%" y="271.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (33,562,871 samples, 0.01%)</title><rect x="99.9420%" y="165" width="0.0139%" height="15" fill="rgb(221,220,41)" fg:x="241753930321" fg:w="33562871"/><text x="100.1920%" y="175.50"></text></g><g><title>pthread_create (26,041,331 samples, 0.01%)</title><rect x="99.9451%" y="149" width="0.0108%" height="15" fill="rgb(218,133,21)" fg:x="241761451861" fg:w="26041331"/><text x="100.1951%" y="159.50"></text></g><g><title>_start (8,533,359,439 samples, 3.53%)</title><rect x="96.4302%" y="645" width="3.5277%" height="15" fill="rgb(221,193,43)" fg:x="233258990850" fg:w="8533359439"/><text x="96.6802%" y="655.50">_st..</text></g><g><title>__libc_start_main (8,533,359,439 samples, 3.53%)</title><rect x="96.4302%" y="629" width="3.5277%" height="15" fill="rgb(240,128,52)" fg:x="233258990850" fg:w="8533359439"/><text x="96.6802%" y="639.50">__l..</text></g><g><title>[libc.so.6] (8,533,359,439 samples, 3.53%)</title><rect x="96.4302%" y="613" width="3.5277%" height="15" fill="rgb(253,114,12)" fg:x="233258990850" fg:w="8533359439"/><text x="96.6802%" y="623.50">[li..</text></g><g><title>main (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="597" width="3.5263%" height="15" fill="rgb(215,223,47)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="581" width="3.5263%" height="15" fill="rgb(248,225,23)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="591.50">std..</text></g><g><title>std::panic::catch_unwind (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="565" width="3.5263%" height="15" fill="rgb(250,108,0)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="575.50">std..</text></g><g><title>std::panicking::try (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="549" width="3.5263%" height="15" fill="rgb(228,208,7)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="559.50">std..</text></g><g><title>std::panicking::try::do_call (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="533" width="3.5263%" height="15" fill="rgb(244,45,10)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="543.50">std..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="517" width="3.5263%" height="15" fill="rgb(207,125,25)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="527.50">std..</text></g><g><title>std::panic::catch_unwind (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="501" width="3.5263%" height="15" fill="rgb(210,195,18)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="511.50">std..</text></g><g><title>std::panicking::try (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="485" width="3.5263%" height="15" fill="rgb(249,80,12)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="495.50">std..</text></g><g><title>std::panicking::try::do_call (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="469" width="3.5263%" height="15" fill="rgb(221,65,9)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="479.50">std..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="453" width="3.5263%" height="15" fill="rgb(235,49,36)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="463.50">cor..</text></g><g><title>std::rt::lang_start::_{{closure}} (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="437" width="3.5263%" height="15" fill="rgb(225,32,20)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="447.50">std..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="421" width="3.5263%" height="15" fill="rgb(215,141,46)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="431.50">std..</text></g><g><title>core::ops::function::FnOnce::call_once (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="405" width="3.5263%" height="15" fill="rgb(250,160,47)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="415.50">cor..</text></g><g><title>profile_spmv::main (8,530,004,908 samples, 3.53%)</title><rect x="96.4316%" y="389" width="3.5263%" height="15" fill="rgb(216,222,40)" fg:x="233262345381" fg:w="8530004908"/><text x="96.6816%" y="399.50">pro..</text></g><g><title>profile_spmv::profile_dense_sparse (2,961,785,576 samples, 1.22%)</title><rect x="98.7335%" y="373" width="1.2244%" height="15" fill="rgb(234,217,39)" fg:x="238830564713" fg:w="2961785576"/><text x="98.9835%" y="383.50"></text></g><g><title>par_matvec::spmv_drivers::dense_sparse_matmul (2,955,755,447 samples, 1.22%)</title><rect x="98.7360%" y="357" width="1.2219%" height="15" fill="rgb(207,178,40)" fg:x="238836594842" fg:w="2955755447"/><text x="98.9860%" y="367.50"></text></g><g><title>par_matvec::dense_sparse_impl::par_dense_sparse (2,955,755,447 samples, 1.22%)</title><rect x="98.7360%" y="341" width="1.2219%" height="15" fill="rgb(221,136,13)" fg:x="238836594842" fg:w="2955755447"/><text x="98.9860%" y="351.50"></text></g><g><title>std::thread::scoped::scope (61,759,555 samples, 0.03%)</title><rect x="99.9324%" y="325" width="0.0255%" height="15" fill="rgb(249,199,10)" fg:x="241730590734" fg:w="61759555"/><text x="100.1824%" y="335.50"></text></g><g><title>std::panic::catch_unwind (61,759,555 samples, 0.03%)</title><rect x="99.9324%" y="309" width="0.0255%" height="15" fill="rgb(249,222,13)" fg:x="241730590734" fg:w="61759555"/><text x="100.1824%" y="319.50"></text></g><g><title>std::panicking::try (61,759,555 samples, 0.03%)</title><rect x="99.9324%" y="293" width="0.0255%" height="15" fill="rgb(244,185,38)" fg:x="241730590734" fg:w="61759555"/><text x="100.1824%" y="303.50"></text></g><g><title>std::panicking::try::do_call (61,759,555 samples, 0.03%)</title><rect x="99.9324%" y="277" width="0.0255%" height="15" fill="rgb(236,202,9)" fg:x="241730590734" fg:w="61759555"/><text x="100.1824%" y="287.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (61,759,555 samples, 0.03%)</title><rect x="99.9324%" y="261" width="0.0255%" height="15" fill="rgb(250,229,37)" fg:x="241730590734" fg:w="61759555"/><text x="100.1824%" y="271.50"></text></g><g><title>std::thread::scoped::scope::_{{closure}} (61,759,555 samples, 0.03%)</title><rect x="99.9324%" y="245" width="0.0255%" height="15" fill="rgb(206,174,23)" fg:x="241730590734" fg:w="61759555"/><text x="100.1824%" y="255.50"></text></g><g><title>par_matvec::dense_sparse_impl::par_dense_sparse::_{{closure}} (61,759,555 samples, 0.03%)</title><rect x="99.9324%" y="229" width="0.0255%" height="15" fill="rgb(211,33,43)" fg:x="241730590734" fg:w="61759555"/><text x="100.1824%" y="239.50"></text></g><g><title>std::thread::scoped::Scope::spawn (42,480,499 samples, 0.02%)</title><rect x="99.9404%" y="213" width="0.0176%" height="15" fill="rgb(245,58,50)" fg:x="241749869790" fg:w="42480499"/><text x="100.1904%" y="223.50"></text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (42,480,499 samples, 0.02%)</title><rect x="99.9404%" y="197" width="0.0176%" height="15" fill="rgb(244,68,36)" fg:x="241749869790" fg:w="42480499"/><text x="100.1904%" y="207.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (41,501,245 samples, 0.02%)</title><rect x="99.9408%" y="181" width="0.0172%" height="15" fill="rgb(232,229,15)" fg:x="241750849044" fg:w="41501245"/><text x="100.1908%" y="191.50"></text></g><g><title>std::io::append_to_string (53,322,713 samples, 0.02%)</title><rect x="99.9757%" y="645" width="0.0220%" height="15" fill="rgb(254,30,23)" fg:x="241835294446" fg:w="53322713"/><text x="100.2257%" y="655.50"></text></g><g><title>all (241,894,140,876 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(235,160,14)" fg:x="0" fg:w="241894140876"/><text x="0.2500%" y="687.50"></text></g><g><title>profile_spmv (241,894,140,876 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="241894140876"/><text x="0.2500%" y="671.50">profile_spmv</text></g></svg></svg>