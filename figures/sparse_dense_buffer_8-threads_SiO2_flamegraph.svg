<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="150785591265"><g><title>&lt;f64 as num_traits::Num&gt;::from_str_radix (16,105,354 samples, 0.01%)</title><rect x="0.0020%" y="661" width="0.0107%" height="15" fill="rgb(227,0,7)" fg:x="3048910" fg:w="16105354"/><text x="0.2520%" y="671.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (16,105,354 samples, 0.01%)</title><rect x="0.0020%" y="645" width="0.0107%" height="15" fill="rgb(217,0,24)" fg:x="3048910" fg:w="16105354"/><text x="0.2520%" y="655.50"></text></g><g><title>[libc.so.6] (37,367,435 samples, 0.02%)</title><rect x="0.0344%" y="629" width="0.0248%" height="15" fill="rgb(221,193,54)" fg:x="51922437" fg:w="37367435"/><text x="0.2844%" y="639.50"></text></g><g><title>&lt;Lhs as faer_traits::MulByRef&lt;Rhs&gt;&gt;::mul_by_ref (214,679,726 samples, 0.14%)</title><rect x="0.9161%" y="437" width="0.1424%" height="15" fill="rgb(248,212,6)" fg:x="1381399792" fg:w="214679726"/><text x="1.1661%" y="447.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&gt;::mul (214,679,726 samples, 0.14%)</title><rect x="0.9161%" y="421" width="0.1424%" height="15" fill="rgb(208,68,35)" fg:x="1381399792" fg:w="214679726"/><text x="1.1661%" y="431.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (214,679,726 samples, 0.14%)</title><rect x="0.9161%" y="405" width="0.1424%" height="15" fill="rgb(232,128,0)" fg:x="1381399792" fg:w="214679726"/><text x="1.1661%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (140,310,295 samples, 0.09%)</title><rect x="1.0585%" y="437" width="0.0931%" height="15" fill="rgb(207,160,47)" fg:x="1596079518" fg:w="140310295"/><text x="1.3085%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (140,310,295 samples, 0.09%)</title><rect x="1.0585%" y="421" width="0.0931%" height="15" fill="rgb(228,23,34)" fg:x="1596079518" fg:w="140310295"/><text x="1.3085%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next (140,310,295 samples, 0.09%)</title><rect x="1.0585%" y="405" width="0.0931%" height="15" fill="rgb(218,30,26)" fg:x="1596079518" fg:w="140310295"/><text x="1.3085%" y="415.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (129,160,045 samples, 0.09%)</title><rect x="1.0659%" y="389" width="0.0857%" height="15" fill="rgb(220,122,19)" fg:x="1607229768" fg:w="129160045"/><text x="1.3159%" y="399.50"></text></g><g><title>&lt;faer::col::generic::Col&lt;Inner&gt; as core::ops::index::Index&lt;&lt;Rows as faer::ShapeIdx&gt;::Idx&lt;usize&gt;&gt;&gt;::index (79,635,357 samples, 0.05%)</title><rect x="1.1516%" y="437" width="0.0528%" height="15" fill="rgb(250,228,42)" fg:x="1736389813" fg:w="79635357"/><text x="1.4016%" y="447.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::at (79,635,357 samples, 0.05%)</title><rect x="1.1516%" y="421" width="0.0528%" height="15" fill="rgb(240,193,28)" fg:x="1736389813" fg:w="79635357"/><text x="1.4016%" y="431.50"></text></g><g><title>&lt;&amp;&amp;equator::structures::Finalize&lt;E&gt; as equator::traits::Expr&gt;::eval_expr (79,635,357 samples, 0.05%)</title><rect x="1.1516%" y="405" width="0.0528%" height="15" fill="rgb(216,20,37)" fg:x="1736389813" fg:w="79635357"/><text x="1.4016%" y="415.50"></text></g><g><title>&lt;equator::expr::CmpExpr&lt;&amp;equator::spec::by_val::CmpByValWrapper&lt;equator::spec::sized::CmpSizedWrapper&lt;equator::spec::debug::CmpDebugWrapper&lt;C&gt;&gt;&gt;,&amp;Lhs3,&amp;Rhs3&gt; as equator::traits::Expr&gt;::eval_expr (79,635,357 samples, 0.05%)</title><rect x="1.1516%" y="389" width="0.0528%" height="15" fill="rgb(206,188,39)" fg:x="1736389813" fg:w="79635357"/><text x="1.4016%" y="399.50"></text></g><g><title>&lt;equator::Lt as equator::Cmp&lt;Lhs,Rhs&gt;&gt;::test (79,635,357 samples, 0.05%)</title><rect x="1.1516%" y="373" width="0.0528%" height="15" fill="rgb(217,207,13)" fg:x="1736389813" fg:w="79635357"/><text x="1.4016%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (79,635,357 samples, 0.05%)</title><rect x="1.1516%" y="357" width="0.0528%" height="15" fill="rgb(231,73,38)" fg:x="1736389813" fg:w="79635357"/><text x="1.4016%" y="367.50"></text></g><g><title>&lt;faer::col::generic::Col&lt;Inner&gt; as reborrow::ReborrowMut&gt;::rb_mut (132,776,947 samples, 0.09%)</title><rect x="1.2044%" y="437" width="0.0881%" height="15" fill="rgb(225,20,46)" fg:x="1816025170" fg:w="132776947"/><text x="1.4544%" y="447.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::col_range_unchecked (284,504,695 samples, 0.19%)</title><rect x="1.3198%" y="421" width="0.1887%" height="15" fill="rgb(210,31,41)" fg:x="1990093592" fg:w="284504695"/><text x="1.5698%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (79,051,061 samples, 0.05%)</title><rect x="1.4561%" y="405" width="0.0524%" height="15" fill="rgb(221,200,47)" fg:x="2195547226" fg:w="79051061"/><text x="1.7061%" y="415.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::col_range (300,554,910 samples, 0.20%)</title><rect x="1.3198%" y="437" width="0.1993%" height="15" fill="rgb(226,26,5)" fg:x="1990093592" fg:w="300554910"/><text x="1.5698%" y="447.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::ncols (16,050,215 samples, 0.01%)</title><rect x="1.5085%" y="421" width="0.0106%" height="15" fill="rgb(249,33,26)" fg:x="2274598287" fg:w="16050215"/><text x="1.7585%" y="431.50"></text></g><g><title>&lt;&amp;usize as core::ops::arith::Sub&lt;usize&gt;&gt;::sub (21,851,689,769 samples, 14.49%)</title><rect x="6.2679%" y="421" width="14.4919%" height="15" fill="rgb(235,183,28)" fg:x="9451148278" fg:w="21851689769"/><text x="6.5179%" y="431.50">&lt;&amp;usize as core::ops::..</text></g><g><title>&lt;usize as core::ops::arith::Sub&gt;::sub (1,843,751,964 samples, 1.22%)</title><rect x="19.5371%" y="405" width="1.2228%" height="15" fill="rgb(221,5,38)" fg:x="29459086083" fg:w="1843751964"/><text x="19.7871%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (34,778,555 samples, 0.02%)</title><rect x="20.7598%" y="421" width="0.0231%" height="15" fill="rgb(247,18,42)" fg:x="31302838047" fg:w="34778555"/><text x="21.0098%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (29,856,955 samples, 0.02%)</title><rect x="20.7631%" y="405" width="0.0198%" height="15" fill="rgb(241,131,45)" fg:x="31307759647" fg:w="29856955"/><text x="21.0131%" y="415.50"></text></g><g><title>core::ptr::read (29,856,955 samples, 0.02%)</title><rect x="20.7631%" y="389" width="0.0198%" height="15" fill="rgb(249,31,29)" fg:x="31307759647" fg:w="29856955"/><text x="21.0131%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (119,309,242 samples, 0.08%)</title><rect x="20.7829%" y="421" width="0.0791%" height="15" fill="rgb(225,111,53)" fg:x="31337616602" fg:w="119309242"/><text x="21.0329%" y="431.50"></text></g><g><title>&lt;() as std::sys::thread_local::native::lazy::DestroyedState&gt;::register_dtor (20,340,563 samples, 0.01%)</title><rect x="20.8646%" y="277" width="0.0135%" height="15" fill="rgb(238,160,17)" fg:x="31460813197" fg:w="20340563"/><text x="21.1146%" y="287.50"></text></g><g><title>__cxa_thread_atexit_impl (20,340,563 samples, 0.01%)</title><rect x="20.8646%" y="261" width="0.0135%" height="15" fill="rgb(214,148,48)" fg:x="31460813197" fg:w="20340563"/><text x="21.1146%" y="271.50"></text></g><g><title>core::ops::function::FnOnce::call_once (24,599,719 samples, 0.02%)</title><rect x="20.8646%" y="341" width="0.0163%" height="15" fill="rgb(232,36,49)" fg:x="31460813197" fg:w="24599719"/><text x="21.1146%" y="351.50"></text></g><g><title>crossbeam_channel::context::Context::with::CONTEXT::_{{constant}}::_{{closure}} (24,599,719 samples, 0.02%)</title><rect x="20.8646%" y="325" width="0.0163%" height="15" fill="rgb(209,103,24)" fg:x="31460813197" fg:w="24599719"/><text x="21.1146%" y="335.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (24,599,719 samples, 0.02%)</title><rect x="20.8646%" y="309" width="0.0163%" height="15" fill="rgb(229,88,8)" fg:x="31460813197" fg:w="24599719"/><text x="21.1146%" y="319.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::initialize (24,599,719 samples, 0.02%)</title><rect x="20.8646%" y="293" width="0.0163%" height="15" fill="rgb(213,181,19)" fg:x="31460813197" fg:w="24599719"/><text x="21.1146%" y="303.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (24,982,598 samples, 0.02%)</title><rect x="20.8865%" y="293" width="0.0166%" height="15" fill="rgb(254,191,54)" fg:x="31493773297" fg:w="24982598"/><text x="21.1365%" y="303.50"></text></g><g><title>std::thread::park (20,859,071 samples, 0.01%)</title><rect x="20.8892%" y="277" width="0.0138%" height="15" fill="rgb(241,83,37)" fg:x="31497896824" fg:w="20859071"/><text x="21.1392%" y="287.50"></text></g><g><title>std::thread::Thread::park (16,731,441 samples, 0.01%)</title><rect x="20.8919%" y="261" width="0.0111%" height="15" fill="rgb(233,36,39)" fg:x="31502024454" fg:w="16731441"/><text x="21.1419%" y="271.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (16,731,441 samples, 0.01%)</title><rect x="20.8919%" y="245" width="0.0111%" height="15" fill="rgb(226,3,54)" fg:x="31502024454" fg:w="16731441"/><text x="21.1419%" y="255.50"></text></g><g><title>crossbeam_channel::context::Context::with (70,303,198 samples, 0.05%)</title><rect x="20.8646%" y="373" width="0.0466%" height="15" fill="rgb(245,192,40)" fg:x="31460813197" fg:w="70303198"/><text x="21.1146%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (70,303,198 samples, 0.05%)</title><rect x="20.8646%" y="357" width="0.0466%" height="15" fill="rgb(238,167,29)" fg:x="31460813197" fg:w="70303198"/><text x="21.1146%" y="367.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (45,703,479 samples, 0.03%)</title><rect x="20.8809%" y="341" width="0.0303%" height="15" fill="rgb(232,182,51)" fg:x="31485412916" fg:w="45703479"/><text x="21.1309%" y="351.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (37,343,098 samples, 0.02%)</title><rect x="20.8865%" y="325" width="0.0248%" height="15" fill="rgb(231,60,39)" fg:x="31493773297" fg:w="37343098"/><text x="21.1365%" y="335.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::_{{closure}} (37,343,098 samples, 0.02%)</title><rect x="20.8865%" y="309" width="0.0248%" height="15" fill="rgb(208,69,12)" fg:x="31493773297" fg:w="37343098"/><text x="21.1365%" y="319.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (20,743,871 samples, 0.01%)</title><rect x="20.9140%" y="373" width="0.0138%" height="15" fill="rgb(235,93,37)" fg:x="31535334694" fg:w="20743871"/><text x="21.1640%" y="383.50"></text></g><g><title>&lt;crossbeam_channel::channel::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (402,152,455 samples, 0.27%)</title><rect x="20.8620%" y="421" width="0.2667%" height="15" fill="rgb(213,116,39)" fg:x="31456925844" fg:w="402152455"/><text x="21.1120%" y="431.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (398,265,102 samples, 0.26%)</title><rect x="20.8646%" y="405" width="0.2641%" height="15" fill="rgb(222,207,29)" fg:x="31460813197" fg:w="398265102"/><text x="21.1146%" y="415.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (398,265,102 samples, 0.26%)</title><rect x="20.8646%" y="389" width="0.2641%" height="15" fill="rgb(206,96,30)" fg:x="31460813197" fg:w="398265102"/><text x="21.1146%" y="399.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (302,999,734 samples, 0.20%)</title><rect x="20.9278%" y="373" width="0.2009%" height="15" fill="rgb(218,138,4)" fg:x="31556078565" fg:w="302999734"/><text x="21.1778%" y="383.50"></text></g><g><title>core::hint::spin_loop (294,938,583 samples, 0.20%)</title><rect x="20.9331%" y="357" width="0.1956%" height="15" fill="rgb(250,191,14)" fg:x="31564139716" fg:w="294938583"/><text x="21.1831%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (294,938,583 samples, 0.20%)</title><rect x="20.9331%" y="341" width="0.1956%" height="15" fill="rgb(239,60,40)" fg:x="31564139716" fg:w="294938583"/><text x="21.1831%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (29,504,727 samples, 0.02%)</title><rect x="21.1547%" y="357" width="0.0196%" height="15" fill="rgb(206,27,48)" fg:x="31898182896" fg:w="29504727"/><text x="21.4047%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (29,504,727 samples, 0.02%)</title><rect x="21.1547%" y="341" width="0.0196%" height="15" fill="rgb(225,35,8)" fg:x="31898182896" fg:w="29504727"/><text x="21.4047%" y="351.50"></text></g><g><title>&lt;crossbeam_channel::channel::TryIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (84,356,000 samples, 0.06%)</title><rect x="21.1287%" y="421" width="0.0559%" height="15" fill="rgb(250,213,24)" fg:x="31859078299" fg:w="84356000"/><text x="21.3787%" y="431.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::try_recv (76,094,335 samples, 0.05%)</title><rect x="21.1342%" y="405" width="0.0505%" height="15" fill="rgb(247,123,22)" fg:x="31867339964" fg:w="76094335"/><text x="21.3842%" y="415.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::try_recv (68,684,800 samples, 0.05%)</title><rect x="21.1391%" y="389" width="0.0456%" height="15" fill="rgb(231,138,38)" fg:x="31874749499" fg:w="68684800"/><text x="21.3891%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (58,179,484 samples, 0.04%)</title><rect x="21.1461%" y="373" width="0.0386%" height="15" fill="rgb(231,145,46)" fg:x="31885254815" fg:w="58179484"/><text x="21.3961%" y="383.50"></text></g><g><title>core::sync::atomic::fence (15,746,676 samples, 0.01%)</title><rect x="21.1742%" y="357" width="0.0104%" height="15" fill="rgb(251,118,11)" fg:x="31927687623" fg:w="15746676"/><text x="21.4242%" y="367.50"></text></g><g><title>[libc.so.6] (114,233,424 samples, 0.08%)</title><rect x="21.2100%" y="277" width="0.0758%" height="15" fill="rgb(217,147,25)" fg:x="31981556356" fg:w="114233424"/><text x="21.4600%" y="287.50"></text></g><g><title>[libc.so.6] (108,268,056 samples, 0.07%)</title><rect x="21.2139%" y="261" width="0.0718%" height="15" fill="rgb(247,81,37)" fg:x="31987521724" fg:w="108268056"/><text x="21.4639%" y="271.50"></text></g><g><title>[libc.so.6] (56,764,325 samples, 0.04%)</title><rect x="21.2481%" y="245" width="0.0376%" height="15" fill="rgb(209,12,38)" fg:x="32039025455" fg:w="56764325"/><text x="21.4981%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (134,486,052 samples, 0.09%)</title><rect x="21.1989%" y="341" width="0.0892%" height="15" fill="rgb(227,1,9)" fg:x="31964930417" fg:w="134486052"/><text x="21.4489%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (134,486,052 samples, 0.09%)</title><rect x="21.1989%" y="325" width="0.0892%" height="15" fill="rgb(248,47,43)" fg:x="31964930417" fg:w="134486052"/><text x="21.4489%" y="335.50"></text></g><g><title>alloc::alloc::realloc (134,486,052 samples, 0.09%)</title><rect x="21.1989%" y="309" width="0.0892%" height="15" fill="rgb(221,10,30)" fg:x="31964930417" fg:w="134486052"/><text x="21.4489%" y="319.50"></text></g><g><title>realloc (134,486,052 samples, 0.09%)</title><rect x="21.1989%" y="293" width="0.0892%" height="15" fill="rgb(210,229,1)" fg:x="31964930417" fg:w="134486052"/><text x="21.4489%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (146,125,953 samples, 0.10%)</title><rect x="21.1964%" y="405" width="0.0969%" height="15" fill="rgb(222,148,37)" fg:x="31961163332" fg:w="146125953"/><text x="21.4464%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (146,125,953 samples, 0.10%)</title><rect x="21.1964%" y="389" width="0.0969%" height="15" fill="rgb(234,67,33)" fg:x="31961163332" fg:w="146125953"/><text x="21.4464%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (146,125,953 samples, 0.10%)</title><rect x="21.1964%" y="373" width="0.0969%" height="15" fill="rgb(247,98,35)" fg:x="31961163332" fg:w="146125953"/><text x="21.4464%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (146,125,953 samples, 0.10%)</title><rect x="21.1964%" y="357" width="0.0969%" height="15" fill="rgb(247,138,52)" fg:x="31961163332" fg:w="146125953"/><text x="21.4464%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (156,146,819 samples, 0.10%)</title><rect x="21.1964%" y="421" width="0.1036%" height="15" fill="rgb(213,79,30)" fg:x="31961163332" fg:w="156146819"/><text x="21.4464%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;par_matvec::sparse_dense_impl::buffer_foreign::Chunk&lt;f64&gt;&gt;&gt; (393,537,874 samples, 0.26%)</title><rect x="21.3000%" y="421" width="0.2610%" height="15" fill="rgb(246,177,23)" fg:x="32117310151" fg:w="393537874"/><text x="21.5500%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (393,537,874 samples, 0.26%)</title><rect x="21.3000%" y="405" width="0.2610%" height="15" fill="rgb(230,62,27)" fg:x="32117310151" fg:w="393537874"/><text x="21.5500%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (393,537,874 samples, 0.26%)</title><rect x="21.3000%" y="389" width="0.2610%" height="15" fill="rgb(216,154,8)" fg:x="32117310151" fg:w="393537874"/><text x="21.5500%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (393,537,874 samples, 0.26%)</title><rect x="21.3000%" y="373" width="0.2610%" height="15" fill="rgb(244,35,45)" fg:x="32117310151" fg:w="393537874"/><text x="21.5500%" y="383.50"></text></g><g><title>cfree (385,432,442 samples, 0.26%)</title><rect x="21.3054%" y="357" width="0.2556%" height="15" fill="rgb(251,115,12)" fg:x="32125415583" fg:w="385432442"/><text x="21.5554%" y="367.50"></text></g><g><title>[libc.so.6] (289,108,532 samples, 0.19%)</title><rect x="21.3692%" y="341" width="0.1917%" height="15" fill="rgb(240,54,50)" fg:x="32221739493" fg:w="289108532"/><text x="21.6192%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::boxed::Box&lt;par_matvec::sparse_dense_impl::buffer_foreign::Chunk&lt;f64&gt;&gt;&gt;&gt; (111,844,515 samples, 0.07%)</title><rect x="21.5610%" y="421" width="0.0742%" height="15" fill="rgb(233,84,52)" fg:x="32510848025" fg:w="111844515"/><text x="21.8110%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (111,844,515 samples, 0.07%)</title><rect x="21.5610%" y="405" width="0.0742%" height="15" fill="rgb(207,117,47)" fg:x="32510848025" fg:w="111844515"/><text x="21.8110%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::boxed::Box&lt;par_matvec::sparse_dense_impl::buffer_foreign::Chunk&lt;f64&gt;&gt;,alloc::alloc::Global&gt;&gt; (111,844,515 samples, 0.07%)</title><rect x="21.5610%" y="389" width="0.0742%" height="15" fill="rgb(249,43,39)" fg:x="32510848025" fg:w="111844515"/><text x="21.8110%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (111,844,515 samples, 0.07%)</title><rect x="21.5610%" y="373" width="0.0742%" height="15" fill="rgb(209,38,44)" fg:x="32510848025" fg:w="111844515"/><text x="21.8110%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::boxed::Box&lt;par_matvec::sparse_dense_impl::buffer_foreign::Chunk&lt;f64&gt;&gt;&gt;&gt; (111,844,515 samples, 0.07%)</title><rect x="21.5610%" y="357" width="0.0742%" height="15" fill="rgb(236,212,23)" fg:x="32510848025" fg:w="111844515"/><text x="21.8110%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (111,844,515 samples, 0.07%)</title><rect x="21.5610%" y="341" width="0.0742%" height="15" fill="rgb(242,79,21)" fg:x="32510848025" fg:w="111844515"/><text x="21.8110%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (111,844,515 samples, 0.07%)</title><rect x="21.5610%" y="325" width="0.0742%" height="15" fill="rgb(211,96,35)" fg:x="32510848025" fg:w="111844515"/><text x="21.8110%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (111,844,515 samples, 0.07%)</title><rect x="21.5610%" y="309" width="0.0742%" height="15" fill="rgb(253,215,40)" fg:x="32510848025" fg:w="111844515"/><text x="21.8110%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (111,844,515 samples, 0.07%)</title><rect x="21.5610%" y="293" width="0.0742%" height="15" fill="rgb(211,81,21)" fg:x="32510848025" fg:w="111844515"/><text x="21.8110%" y="303.50"></text></g><g><title>cfree (99,512,779 samples, 0.07%)</title><rect x="21.5692%" y="277" width="0.0660%" height="15" fill="rgb(208,190,38)" fg:x="32523179761" fg:w="99512779"/><text x="21.8192%" y="287.50"></text></g><g><title>[libc.so.6] (79,764,999 samples, 0.05%)</title><rect x="21.5823%" y="261" width="0.0529%" height="15" fill="rgb(235,213,38)" fg:x="32542927541" fg:w="79764999"/><text x="21.8323%" y="271.50"></text></g><g><title>[libc.so.6] (36,733,833 samples, 0.02%)</title><rect x="21.6108%" y="245" width="0.0244%" height="15" fill="rgb(237,122,38)" fg:x="32585958707" fg:w="36733833"/><text x="21.8608%" y="255.50"></text></g><g><title>[libc.so.6] (36,733,833 samples, 0.02%)</title><rect x="21.6108%" y="229" width="0.0244%" height="15" fill="rgb(244,218,35)" fg:x="32585958707" fg:w="36733833"/><text x="21.8608%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::IntoIter&lt;usize,alloc::vec::Vec&lt;alloc::boxed::Box&lt;par_matvec::sparse_dense_impl::buffer_foreign::Chunk&lt;f64&gt;&gt;&gt;&gt;&gt; (17,928,612 samples, 0.01%)</title><rect x="21.6352%" y="421" width="0.0119%" height="15" fill="rgb(240,68,47)" fg:x="32622692540" fg:w="17928612"/><text x="21.8852%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;usize,alloc::vec::Vec&lt;alloc::boxed::Box&lt;par_matvec::sparse_dense_impl::buffer_foreign::Chunk&lt;f64&gt;&gt;&gt;&gt;&gt; (17,928,612 samples, 0.01%)</title><rect x="21.6352%" y="405" width="0.0119%" height="15" fill="rgb(210,16,53)" fg:x="32622692540" fg:w="17928612"/><text x="21.8852%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawIntoIter&lt;(usize,alloc::vec::Vec&lt;alloc::boxed::Box&lt;par_matvec::sparse_dense_impl::buffer_foreign::Chunk&lt;f64&gt;&gt;&gt;)&gt;&gt; (17,928,612 samples, 0.01%)</title><rect x="21.6352%" y="389" width="0.0119%" height="15" fill="rgb(235,124,12)" fg:x="32622692540" fg:w="17928612"/><text x="21.8852%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (82,852,669 samples, 0.05%)</title><rect x="21.6610%" y="389" width="0.0549%" height="15" fill="rgb(224,169,11)" fg:x="32661691940" fg:w="82852669"/><text x="21.9110%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (82,852,669 samples, 0.05%)</title><rect x="21.6610%" y="373" width="0.0549%" height="15" fill="rgb(250,166,2)" fg:x="32661691940" fg:w="82852669"/><text x="21.9110%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (160,723,440 samples, 0.11%)</title><rect x="21.7160%" y="389" width="0.1066%" height="15" fill="rgb(242,216,29)" fg:x="32744544609" fg:w="160723440"/><text x="21.9660%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (160,723,440 samples, 0.11%)</title><rect x="21.7160%" y="373" width="0.1066%" height="15" fill="rgb(230,116,27)" fg:x="32744544609" fg:w="160723440"/><text x="21.9660%" y="383.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push (268,773,733 samples, 0.18%)</title><rect x="21.6470%" y="421" width="0.1782%" height="15" fill="rgb(228,99,48)" fg:x="32640621152" fg:w="268773733"/><text x="21.8970%" y="431.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push_or_else (264,683,408 samples, 0.18%)</title><rect x="21.6498%" y="405" width="0.1755%" height="15" fill="rgb(253,11,6)" fg:x="32644711477" fg:w="264683408"/><text x="21.8998%" y="415.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (2,987,885,962 samples, 1.98%)</title><rect x="27.0200%" y="405" width="1.9815%" height="15" fill="rgb(247,143,39)" fg:x="40742328424" fg:w="2987885962"/><text x="27.2700%" y="415.50">&lt;..</text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (2,987,885,962 samples, 1.98%)</title><rect x="27.0200%" y="389" width="1.9815%" height="15" fill="rgb(236,97,10)" fg:x="40742328424" fg:w="2987885962"/><text x="27.2700%" y="399.50">&lt;..</text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (2,987,885,962 samples, 1.98%)</title><rect x="27.0200%" y="373" width="1.9815%" height="15" fill="rgb(233,208,19)" fg:x="40742328424" fg:w="2987885962"/><text x="27.2700%" y="383.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (234,439,893 samples, 0.16%)</title><rect x="29.0016%" y="389" width="0.1555%" height="15" fill="rgb(216,164,2)" fg:x="43730214386" fg:w="234439893"/><text x="29.2516%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (234,439,893 samples, 0.16%)</title><rect x="29.0016%" y="373" width="0.1555%" height="15" fill="rgb(220,129,5)" fg:x="43730214386" fg:w="234439893"/><text x="29.2516%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (108,980,938 samples, 0.07%)</title><rect x="29.0848%" y="357" width="0.0723%" height="15" fill="rgb(242,17,10)" fg:x="43855673341" fg:w="108980938"/><text x="29.3348%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (108,980,938 samples, 0.07%)</title><rect x="29.0848%" y="341" width="0.0723%" height="15" fill="rgb(242,107,0)" fg:x="43855673341" fg:w="108980938"/><text x="29.3348%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (108,980,938 samples, 0.07%)</title><rect x="29.0848%" y="325" width="0.0723%" height="15" fill="rgb(251,28,31)" fg:x="43855673341" fg:w="108980938"/><text x="29.3348%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (108,980,938 samples, 0.07%)</title><rect x="29.0848%" y="309" width="0.0723%" height="15" fill="rgb(233,223,10)" fg:x="43855673341" fg:w="108980938"/><text x="29.3348%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6,986,284,982 samples, 4.63%)</title><rect x="29.0016%" y="405" width="4.6333%" height="15" fill="rgb(215,21,27)" fg:x="43730214386" fg:w="6986284982"/><text x="29.2516%" y="415.50">&lt;allo..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6,751,845,089 samples, 4.48%)</title><rect x="29.1571%" y="389" width="4.4778%" height="15" fill="rgb(232,23,21)" fg:x="43964654279" fg:w="6751845089"/><text x="29.4071%" y="399.50">core:..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6,751,845,089 samples, 4.48%)</title><rect x="29.1571%" y="373" width="4.4778%" height="15" fill="rgb(244,5,23)" fg:x="43964654279" fg:w="6751845089"/><text x="29.4071%" y="383.50">&lt;usiz..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (236,847,512 samples, 0.16%)</title><rect x="33.6348%" y="389" width="0.1571%" height="15" fill="rgb(226,81,46)" fg:x="50716499368" fg:w="236847512"/><text x="33.8848%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (236,847,512 samples, 0.16%)</title><rect x="33.6348%" y="373" width="0.1571%" height="15" fill="rgb(247,70,30)" fg:x="50716499368" fg:w="236847512"/><text x="33.8848%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (228,812,524 samples, 0.15%)</title><rect x="33.6402%" y="357" width="0.1517%" height="15" fill="rgb(212,68,19)" fg:x="50724534356" fg:w="228812524"/><text x="33.8902%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (228,812,524 samples, 0.15%)</title><rect x="33.6402%" y="341" width="0.1517%" height="15" fill="rgb(240,187,13)" fg:x="50724534356" fg:w="228812524"/><text x="33.8902%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (228,812,524 samples, 0.15%)</title><rect x="33.6402%" y="325" width="0.1517%" height="15" fill="rgb(223,113,26)" fg:x="50724534356" fg:w="228812524"/><text x="33.8902%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (228,812,524 samples, 0.15%)</title><rect x="33.6402%" y="309" width="0.1517%" height="15" fill="rgb(206,192,2)" fg:x="50724534356" fg:w="228812524"/><text x="33.8902%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (285,263,740 samples, 0.19%)</title><rect x="33.6348%" y="405" width="0.1892%" height="15" fill="rgb(241,108,4)" fg:x="50716499368" fg:w="285263740"/><text x="33.8848%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (48,416,228 samples, 0.03%)</title><rect x="33.7919%" y="389" width="0.0321%" height="15" fill="rgb(247,173,49)" fg:x="50953346880" fg:w="48416228"/><text x="34.0419%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (48,416,228 samples, 0.03%)</title><rect x="33.7919%" y="373" width="0.0321%" height="15" fill="rgb(224,114,35)" fg:x="50953346880" fg:w="48416228"/><text x="34.0419%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (43,790,607 samples, 0.03%)</title><rect x="34.2132%" y="389" width="0.0290%" height="15" fill="rgb(245,159,27)" fg:x="51588555852" fg:w="43790607"/><text x="34.4632%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (43,790,607 samples, 0.03%)</title><rect x="34.2132%" y="373" width="0.0290%" height="15" fill="rgb(245,172,44)" fg:x="51588555852" fg:w="43790607"/><text x="34.4632%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (43,790,607 samples, 0.03%)</title><rect x="34.2132%" y="357" width="0.0290%" height="15" fill="rgb(236,23,11)" fg:x="51588555852" fg:w="43790607"/><text x="34.4632%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (42,861,780 samples, 0.03%)</title><rect x="34.2138%" y="341" width="0.0284%" height="15" fill="rgb(205,117,38)" fg:x="51589484679" fg:w="42861780"/><text x="34.4638%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (42,861,780 samples, 0.03%)</title><rect x="34.2138%" y="325" width="0.0284%" height="15" fill="rgb(237,72,25)" fg:x="51589484679" fg:w="42861780"/><text x="34.4638%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (42,861,780 samples, 0.03%)</title><rect x="34.2138%" y="309" width="0.0284%" height="15" fill="rgb(244,70,9)" fg:x="51589484679" fg:w="42861780"/><text x="34.4638%" y="319.50"></text></g><g><title>alloc::alloc::realloc (42,861,780 samples, 0.03%)</title><rect x="34.2138%" y="293" width="0.0284%" height="15" fill="rgb(217,125,39)" fg:x="51589484679" fg:w="42861780"/><text x="34.4638%" y="303.50"></text></g><g><title>realloc (39,261,014 samples, 0.03%)</title><rect x="34.2162%" y="277" width="0.0260%" height="15" fill="rgb(235,36,10)" fg:x="51593085445" fg:w="39261014"/><text x="34.4662%" y="287.50"></text></g><g><title>[libc.so.6] (39,261,014 samples, 0.03%)</title><rect x="34.2162%" y="261" width="0.0260%" height="15" fill="rgb(251,123,47)" fg:x="51593085445" fg:w="39261014"/><text x="34.4662%" y="271.50"></text></g><g><title>[libc.so.6] (32,681,938 samples, 0.02%)</title><rect x="34.2206%" y="245" width="0.0217%" height="15" fill="rgb(221,13,13)" fg:x="51599664521" fg:w="32681938"/><text x="34.4706%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (59,240,296 samples, 0.04%)</title><rect x="34.2422%" y="389" width="0.0393%" height="15" fill="rgb(238,131,9)" fg:x="51632346459" fg:w="59240296"/><text x="34.4922%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (59,240,296 samples, 0.04%)</title><rect x="34.2422%" y="373" width="0.0393%" height="15" fill="rgb(211,50,8)" fg:x="51632346459" fg:w="59240296"/><text x="34.4922%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (59,240,296 samples, 0.04%)</title><rect x="34.2422%" y="357" width="0.0393%" height="15" fill="rgb(245,182,24)" fg:x="51632346459" fg:w="59240296"/><text x="34.4922%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (59,240,296 samples, 0.04%)</title><rect x="34.2422%" y="341" width="0.0393%" height="15" fill="rgb(242,14,37)" fg:x="51632346459" fg:w="59240296"/><text x="34.4922%" y="351.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::BlockScratch&lt;T&gt;::add (19,147,198,558 samples, 12.70%)</title><rect x="21.8253%" y="421" width="12.6983%" height="15" fill="rgb(246,228,12)" fg:x="32909394885" fg:w="19147198558"/><text x="22.0753%" y="431.50">par_matvec::sparse_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,054,830,335 samples, 0.70%)</title><rect x="33.8240%" y="405" width="0.6996%" height="15" fill="rgb(213,55,15)" fg:x="51001763108" fg:w="1054830335"/><text x="34.0740%" y="415.50"></text></g><g><title>core::ptr::write (365,006,688 samples, 0.24%)</title><rect x="34.2815%" y="389" width="0.2421%" height="15" fill="rgb(209,9,3)" fg:x="51691586755" fg:w="365006688"/><text x="34.5315%" y="399.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (546,163,418 samples, 0.36%)</title><rect x="35.2644%" y="405" width="0.3622%" height="15" fill="rgb(230,59,30)" fg:x="53173620738" fg:w="546163418"/><text x="35.5144%" y="415.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (546,163,418 samples, 0.36%)</title><rect x="35.2644%" y="389" width="0.3622%" height="15" fill="rgb(209,121,21)" fg:x="53173620738" fg:w="546163418"/><text x="35.5144%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (546,163,418 samples, 0.36%)</title><rect x="35.2644%" y="373" width="0.3622%" height="15" fill="rgb(220,109,13)" fg:x="53173620738" fg:w="546163418"/><text x="35.5144%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (286,310,790 samples, 0.19%)</title><rect x="35.6291%" y="405" width="0.1899%" height="15" fill="rgb(232,18,1)" fg:x="53723564229" fg:w="286310790"/><text x="35.8791%" y="415.50"></text></g><g><title>&lt;&amp;&amp;equator::structures::Finalize&lt;E&gt; as equator::traits::Expr&gt;::eval_expr (296,031,102 samples, 0.20%)</title><rect x="35.8190%" y="373" width="0.1963%" height="15" fill="rgb(215,41,42)" fg:x="54009875019" fg:w="296031102"/><text x="36.0690%" y="383.50"></text></g><g><title>&lt;equator::expr::CmpExpr&lt;&amp;equator::spec::by_val::CmpByValWrapper&lt;equator::spec::sized::CmpSizedWrapper&lt;equator::spec::debug::CmpDebugWrapper&lt;C&gt;&gt;&gt;,&amp;Lhs3,&amp;Rhs3&gt; as equator::traits::Expr&gt;::eval_expr (296,031,102 samples, 0.20%)</title><rect x="35.8190%" y="357" width="0.1963%" height="15" fill="rgb(224,123,36)" fg:x="54009875019" fg:w="296031102"/><text x="36.0690%" y="367.50"></text></g><g><title>&lt;equator::Lt as equator::Cmp&lt;Lhs,Rhs&gt;&gt;::test (296,031,102 samples, 0.20%)</title><rect x="35.8190%" y="341" width="0.1963%" height="15" fill="rgb(240,125,3)" fg:x="54009875019" fg:w="296031102"/><text x="36.0690%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (296,031,102 samples, 0.20%)</title><rect x="35.8190%" y="325" width="0.1963%" height="15" fill="rgb(205,98,50)" fg:x="54009875019" fg:w="296031102"/><text x="36.0690%" y="335.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::BlockScratch&lt;T&gt;::flush_into (2,253,461,522 samples, 1.49%)</title><rect x="34.5236%" y="421" width="1.4945%" height="15" fill="rgb(205,185,37)" fg:x="52056593443" fg:w="2253461522"/><text x="34.7736%" y="431.50"></text></g><g><title>&lt;faer::col::generic::Col&lt;Inner&gt; as core::ops::index::Index&lt;&lt;Rows as faer::ShapeIdx&gt;::Idx&lt;usize&gt;&gt;&gt;::index (300,179,946 samples, 0.20%)</title><rect x="35.8190%" y="405" width="0.1991%" height="15" fill="rgb(238,207,15)" fg:x="54009875019" fg:w="300179946"/><text x="36.0690%" y="415.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::at (300,179,946 samples, 0.20%)</title><rect x="35.8190%" y="389" width="0.1991%" height="15" fill="rgb(213,199,42)" fg:x="54009875019" fg:w="300179946"/><text x="36.0690%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (32,069,652 samples, 0.02%)</title><rect x="36.0268%" y="309" width="0.0213%" height="15" fill="rgb(235,201,11)" fg:x="54323270174" fg:w="32069652"/><text x="36.2768%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (20,272,547 samples, 0.01%)</title><rect x="36.0347%" y="293" width="0.0134%" height="15" fill="rgb(207,46,11)" fg:x="54335067279" fg:w="20272547"/><text x="36.2847%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (24,413,998 samples, 0.02%)</title><rect x="36.0612%" y="293" width="0.0162%" height="15" fill="rgb(241,35,35)" fg:x="54375167770" fg:w="24413998"/><text x="36.3112%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (115,430,105 samples, 0.08%)</title><rect x="36.0251%" y="357" width="0.0766%" height="15" fill="rgb(243,32,47)" fg:x="54320729590" fg:w="115430105"/><text x="36.2751%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (115,430,105 samples, 0.08%)</title><rect x="36.0251%" y="341" width="0.0766%" height="15" fill="rgb(247,202,23)" fg:x="54320729590" fg:w="115430105"/><text x="36.2751%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (115,430,105 samples, 0.08%)</title><rect x="36.0251%" y="325" width="0.0766%" height="15" fill="rgb(219,102,11)" fg:x="54320729590" fg:w="115430105"/><text x="36.2751%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (80,819,869 samples, 0.05%)</title><rect x="36.0481%" y="309" width="0.0536%" height="15" fill="rgb(243,110,44)" fg:x="54355339826" fg:w="80819869"/><text x="36.2981%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (36,577,927 samples, 0.02%)</title><rect x="36.0774%" y="293" width="0.0243%" height="15" fill="rgb(222,74,54)" fg:x="54399581768" fg:w="36577927"/><text x="36.3274%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (140,484,417 samples, 0.09%)</title><rect x="36.0251%" y="389" width="0.0932%" height="15" fill="rgb(216,99,12)" fg:x="54320729590" fg:w="140484417"/><text x="36.2751%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (140,484,417 samples, 0.09%)</title><rect x="36.0251%" y="373" width="0.0932%" height="15" fill="rgb(226,22,26)" fg:x="54320729590" fg:w="140484417"/><text x="36.2751%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (25,054,312 samples, 0.02%)</title><rect x="36.1017%" y="357" width="0.0166%" height="15" fill="rgb(217,163,10)" fg:x="54436159695" fg:w="25054312"/><text x="36.3517%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (25,054,312 samples, 0.02%)</title><rect x="36.1017%" y="341" width="0.0166%" height="15" fill="rgb(213,25,53)" fg:x="54436159695" fg:w="25054312"/><text x="36.3517%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (25,054,312 samples, 0.02%)</title><rect x="36.1017%" y="325" width="0.0166%" height="15" fill="rgb(252,105,26)" fg:x="54436159695" fg:w="25054312"/><text x="36.3517%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (25,054,312 samples, 0.02%)</title><rect x="36.1017%" y="309" width="0.0166%" height="15" fill="rgb(220,39,43)" fg:x="54436159695" fg:w="25054312"/><text x="36.3517%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (25,054,312 samples, 0.02%)</title><rect x="36.1017%" y="293" width="0.0166%" height="15" fill="rgb(229,68,48)" fg:x="54436159695" fg:w="25054312"/><text x="36.3517%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (25,054,312 samples, 0.02%)</title><rect x="36.1017%" y="277" width="0.0166%" height="15" fill="rgb(252,8,32)" fg:x="54436159695" fg:w="25054312"/><text x="36.3517%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (17,023,735 samples, 0.01%)</title><rect x="36.1070%" y="261" width="0.0113%" height="15" fill="rgb(223,20,43)" fg:x="54444190272" fg:w="17023735"/><text x="36.3570%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (194,775,874 samples, 0.13%)</title><rect x="36.0196%" y="421" width="0.1292%" height="15" fill="rgb(229,81,49)" fg:x="54312314971" fg:w="194775874"/><text x="36.2696%" y="431.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (194,775,874 samples, 0.13%)</title><rect x="36.0196%" y="405" width="0.1292%" height="15" fill="rgb(236,28,36)" fg:x="54312314971" fg:w="194775874"/><text x="36.2696%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (45,876,838 samples, 0.03%)</title><rect x="36.1183%" y="389" width="0.0304%" height="15" fill="rgb(249,185,26)" fg:x="54461214007" fg:w="45876838"/><text x="36.3683%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (45,876,838 samples, 0.03%)</title><rect x="36.1183%" y="373" width="0.0304%" height="15" fill="rgb(249,174,33)" fg:x="54461214007" fg:w="45876838"/><text x="36.3683%" y="383.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::collect_chunks (52,236,335,419 samples, 34.64%)</title><rect x="1.5191%" y="437" width="34.6428%" height="15" fill="rgb(233,201,37)" fg:x="2290648502" fg:w="52236335419"/><text x="1.7691%" y="447.50">par_matvec::sparse_dense_impl::buffer_foreign::collect_c..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (19,893,076 samples, 0.01%)</title><rect x="36.1487%" y="421" width="0.0132%" height="15" fill="rgb(221,78,26)" fg:x="54507090845" fg:w="19893076"/><text x="36.3987%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (19,893,076 samples, 0.01%)</title><rect x="36.1487%" y="405" width="0.0132%" height="15" fill="rgb(250,127,30)" fg:x="54507090845" fg:w="19893076"/><text x="36.3987%" y="415.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (5,321,084,260 samples, 3.53%)</title><rect x="68.3712%" y="421" width="3.5289%" height="15" fill="rgb(230,49,44)" fg:x="103093916366" fg:w="5321084260"/><text x="68.6212%" y="431.50">&lt;Lh..</text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (5,321,084,260 samples, 3.53%)</title><rect x="68.3712%" y="405" width="3.5289%" height="15" fill="rgb(229,67,23)" fg:x="103093916366" fg:w="5321084260"/><text x="68.6212%" y="415.50">&lt;&amp;f..</text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (5,321,084,260 samples, 3.53%)</title><rect x="68.3712%" y="389" width="3.5289%" height="15" fill="rgb(249,83,47)" fg:x="103093916366" fg:w="5321084260"/><text x="68.6212%" y="399.50">&lt;f6..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (568,929,294 samples, 0.38%)</title><rect x="71.9001%" y="421" width="0.3773%" height="15" fill="rgb(215,43,3)" fg:x="108415000626" fg:w="568929294"/><text x="72.1501%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (568,929,294 samples, 0.38%)</title><rect x="71.9001%" y="405" width="0.3773%" height="15" fill="rgb(238,154,13)" fg:x="108415000626" fg:w="568929294"/><text x="72.1501%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (568,929,294 samples, 0.38%)</title><rect x="71.9001%" y="389" width="0.3773%" height="15" fill="rgb(219,56,2)" fg:x="108415000626" fg:w="568929294"/><text x="72.1501%" y="399.50"></text></g><g><title>&lt;&amp;&amp;equator::structures::Finalize&lt;E&gt; as equator::traits::Expr&gt;::eval_expr (19,333,682 samples, 0.01%)</title><rect x="72.2774%" y="389" width="0.0128%" height="15" fill="rgb(233,0,4)" fg:x="108983929920" fg:w="19333682"/><text x="72.5274%" y="399.50"></text></g><g><title>&lt;equator::expr::CmpExpr&lt;&amp;equator::spec::by_val::CmpByValWrapper&lt;equator::spec::sized::CmpSizedWrapper&lt;equator::spec::debug::CmpDebugWrapper&lt;C&gt;&gt;&gt;,&amp;Lhs3,&amp;Rhs3&gt; as equator::traits::Expr&gt;::eval_expr (19,333,682 samples, 0.01%)</title><rect x="72.2774%" y="373" width="0.0128%" height="15" fill="rgb(235,30,7)" fg:x="108983929920" fg:w="19333682"/><text x="72.5274%" y="383.50"></text></g><g><title>&lt;equator::Lt as equator::Cmp&lt;Lhs,Rhs&gt;&gt;::test (19,333,682 samples, 0.01%)</title><rect x="72.2774%" y="357" width="0.0128%" height="15" fill="rgb(250,79,13)" fg:x="108983929920" fg:w="19333682"/><text x="72.5274%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (19,333,682 samples, 0.01%)</title><rect x="72.2774%" y="341" width="0.0128%" height="15" fill="rgb(211,146,34)" fg:x="108983929920" fg:w="19333682"/><text x="72.5274%" y="351.50"></text></g><g><title>&lt;faer::col::generic::Col&lt;Inner&gt; as core::ops::index::Index&lt;&lt;Rows as faer::ShapeIdx&gt;::Idx&lt;usize&gt;&gt;&gt;::index (209,747,510 samples, 0.14%)</title><rect x="72.2774%" y="421" width="0.1391%" height="15" fill="rgb(228,22,38)" fg:x="108983929920" fg:w="209747510"/><text x="72.5274%" y="431.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::at (209,747,510 samples, 0.14%)</title><rect x="72.2774%" y="405" width="0.1391%" height="15" fill="rgb(235,168,5)" fg:x="108983929920" fg:w="209747510"/><text x="72.5274%" y="415.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::at_unchecked (190,413,828 samples, 0.13%)</title><rect x="72.2902%" y="389" width="0.1263%" height="15" fill="rgb(221,155,16)" fg:x="109003263602" fg:w="190413828"/><text x="72.5402%" y="399.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::ptr_inbounds_at (190,413,828 samples, 0.13%)</title><rect x="72.2902%" y="373" width="0.1263%" height="15" fill="rgb(215,215,53)" fg:x="109003263602" fg:w="190413828"/><text x="72.5402%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (357,035,705 samples, 0.24%)</title><rect x="72.4165%" y="421" width="0.2368%" height="15" fill="rgb(223,4,10)" fg:x="109193677430" fg:w="357035705"/><text x="72.6665%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (357,035,705 samples, 0.24%)</title><rect x="72.4165%" y="405" width="0.2368%" height="15" fill="rgb(234,103,6)" fg:x="109193677430" fg:w="357035705"/><text x="72.6665%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (272,103,823 samples, 0.18%)</title><rect x="72.4728%" y="389" width="0.1805%" height="15" fill="rgb(227,97,0)" fg:x="109278609312" fg:w="272103823"/><text x="72.7228%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (248,880,424 samples, 0.17%)</title><rect x="75.4460%" y="405" width="0.1651%" height="15" fill="rgb(234,150,53)" fg:x="113761767558" fg:w="248880424"/><text x="75.6960%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (248,880,424 samples, 0.17%)</title><rect x="75.4460%" y="389" width="0.1651%" height="15" fill="rgb(228,201,54)" fg:x="113761767558" fg:w="248880424"/><text x="75.6960%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (248,880,424 samples, 0.17%)</title><rect x="75.4460%" y="373" width="0.1651%" height="15" fill="rgb(222,22,37)" fg:x="113761767558" fg:w="248880424"/><text x="75.6960%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (24,494,368 samples, 0.02%)</title><rect x="75.6111%" y="405" width="0.0162%" height="15" fill="rgb(237,53,32)" fg:x="114010647982" fg:w="24494368"/><text x="75.8611%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (62,653,546 samples, 0.04%)</title><rect x="75.6273%" y="405" width="0.0416%" height="15" fill="rgb(233,25,53)" fg:x="114035142350" fg:w="62653546"/><text x="75.8773%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (62,653,546 samples, 0.04%)</title><rect x="75.6273%" y="389" width="0.0416%" height="15" fill="rgb(210,40,34)" fg:x="114035142350" fg:w="62653546"/><text x="75.8773%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (62,653,546 samples, 0.04%)</title><rect x="75.6273%" y="373" width="0.0416%" height="15" fill="rgb(241,220,44)" fg:x="114035142350" fg:w="62653546"/><text x="75.8773%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (62,653,546 samples, 0.04%)</title><rect x="75.6273%" y="357" width="0.0416%" height="15" fill="rgb(235,28,35)" fg:x="114035142350" fg:w="62653546"/><text x="75.8773%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (62,653,546 samples, 0.04%)</title><rect x="75.6273%" y="341" width="0.0416%" height="15" fill="rgb(210,56,17)" fg:x="114035142350" fg:w="62653546"/><text x="75.8773%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (62,653,546 samples, 0.04%)</title><rect x="75.6273%" y="325" width="0.0416%" height="15" fill="rgb(224,130,29)" fg:x="114035142350" fg:w="62653546"/><text x="75.8773%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (62,653,546 samples, 0.04%)</title><rect x="75.6273%" y="309" width="0.0416%" height="15" fill="rgb(235,212,8)" fg:x="114035142350" fg:w="62653546"/><text x="75.8773%" y="319.50"></text></g><g><title>alloc::alloc::alloc (62,653,546 samples, 0.04%)</title><rect x="75.6273%" y="293" width="0.0416%" height="15" fill="rgb(223,33,50)" fg:x="114035142350" fg:w="62653546"/><text x="75.8773%" y="303.50"></text></g><g><title>malloc (62,653,546 samples, 0.04%)</title><rect x="75.6273%" y="277" width="0.0416%" height="15" fill="rgb(219,149,13)" fg:x="114035142350" fg:w="62653546"/><text x="75.8773%" y="287.50"></text></g><g><title>[libc.so.6] (40,853,456 samples, 0.03%)</title><rect x="75.6418%" y="261" width="0.0271%" height="15" fill="rgb(250,156,29)" fg:x="114056942440" fg:w="40853456"/><text x="75.8918%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (16,943,196 samples, 0.01%)</title><rect x="75.6857%" y="357" width="0.0112%" height="15" fill="rgb(216,193,19)" fg:x="114123158993" fg:w="16943196"/><text x="75.9357%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (16,943,196 samples, 0.01%)</title><rect x="75.6857%" y="341" width="0.0112%" height="15" fill="rgb(216,135,14)" fg:x="114123158993" fg:w="16943196"/><text x="75.9357%" y="351.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (29,824,172 samples, 0.02%)</title><rect x="75.6826%" y="373" width="0.0198%" height="15" fill="rgb(241,47,5)" fg:x="114118430771" fg:w="29824172"/><text x="75.9326%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (26,475,645 samples, 0.02%)</title><rect x="75.7024%" y="357" width="0.0176%" height="15" fill="rgb(233,42,35)" fg:x="114148254943" fg:w="26475645"/><text x="75.9524%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_or (26,475,645 samples, 0.02%)</title><rect x="75.7024%" y="341" width="0.0176%" height="15" fill="rgb(231,13,6)" fg:x="114148254943" fg:w="26475645"/><text x="75.9524%" y="351.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (82,699,868 samples, 0.05%)</title><rect x="75.6760%" y="405" width="0.0548%" height="15" fill="rgb(207,181,40)" fg:x="114108492925" fg:w="82699868"/><text x="75.9260%" y="415.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (78,491,638 samples, 0.05%)</title><rect x="75.6788%" y="389" width="0.0521%" height="15" fill="rgb(254,173,49)" fg:x="114112701155" fg:w="78491638"/><text x="75.9288%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::write (42,937,850 samples, 0.03%)</title><rect x="75.7024%" y="373" width="0.0285%" height="15" fill="rgb(221,1,38)" fg:x="114148254943" fg:w="42937850"/><text x="75.9524%" y="383.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (16,462,205 samples, 0.01%)</title><rect x="75.7199%" y="357" width="0.0109%" height="15" fill="rgb(206,124,46)" fg:x="114174730588" fg:w="16462205"/><text x="75.9699%" y="367.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::Chunk&lt;T&gt;::push (22,897,960,208 samples, 15.19%)</title><rect x="75.7308%" y="405" width="15.1858%" height="15" fill="rgb(249,21,11)" fg:x="114191192793" fg:w="22897960208"/><text x="75.9808%" y="415.50">par_matvec::sparse_dens..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (587,032,091 samples, 0.39%)</title><rect x="90.9231%" y="389" width="0.3893%" height="15" fill="rgb(222,201,40)" fg:x="137098942825" fg:w="587032091"/><text x="91.1731%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (580,764,863 samples, 0.39%)</title><rect x="90.9273%" y="373" width="0.3852%" height="15" fill="rgb(235,61,29)" fg:x="137105210053" fg:w="580764863"/><text x="91.1773%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (580,764,863 samples, 0.39%)</title><rect x="90.9273%" y="357" width="0.3852%" height="15" fill="rgb(219,207,3)" fg:x="137105210053" fg:w="580764863"/><text x="91.1773%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (580,764,863 samples, 0.39%)</title><rect x="90.9273%" y="341" width="0.3852%" height="15" fill="rgb(222,56,46)" fg:x="137105210053" fg:w="580764863"/><text x="91.1773%" y="351.50"></text></g><g><title>alloc::alloc::alloc (580,764,863 samples, 0.39%)</title><rect x="90.9273%" y="325" width="0.3852%" height="15" fill="rgb(239,76,54)" fg:x="137105210053" fg:w="580764863"/><text x="91.1773%" y="335.50"></text></g><g><title>malloc (547,603,541 samples, 0.36%)</title><rect x="90.9493%" y="309" width="0.3632%" height="15" fill="rgb(231,124,27)" fg:x="137138371375" fg:w="547603541"/><text x="91.1993%" y="319.50"></text></g><g><title>[libc.so.6] (327,162,858 samples, 0.22%)</title><rect x="91.0954%" y="293" width="0.2170%" height="15" fill="rgb(249,195,6)" fg:x="137358812058" fg:w="327162858"/><text x="91.3454%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (35,663,779 samples, 0.02%)</title><rect x="91.3124%" y="389" width="0.0237%" height="15" fill="rgb(237,174,47)" fg:x="137685974916" fg:w="35663779"/><text x="91.5624%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (31,280,929 samples, 0.02%)</title><rect x="91.3773%" y="373" width="0.0207%" height="15" fill="rgb(206,201,31)" fg:x="137783743757" fg:w="31280929"/><text x="91.6273%" y="383.50"></text></g><g><title>core::ptr::read (31,280,929 samples, 0.02%)</title><rect x="91.3773%" y="357" width="0.0207%" height="15" fill="rgb(231,57,52)" fg:x="137783743757" fg:w="31280929"/><text x="91.6273%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (181,938,519 samples, 0.12%)</title><rect x="91.4008%" y="373" width="0.1207%" height="15" fill="rgb(248,177,22)" fg:x="137819268538" fg:w="181938519"/><text x="91.6508%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (181,938,519 samples, 0.12%)</title><rect x="91.4008%" y="357" width="0.1207%" height="15" fill="rgb(215,211,37)" fg:x="137819268538" fg:w="181938519"/><text x="91.6508%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (479,734,189 samples, 0.32%)</title><rect x="91.5215%" y="373" width="0.3182%" height="15" fill="rgb(241,128,51)" fg:x="138001207057" fg:w="479734189"/><text x="91.7715%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (479,734,189 samples, 0.32%)</title><rect x="91.5215%" y="357" width="0.3182%" height="15" fill="rgb(227,165,31)" fg:x="138001207057" fg:w="479734189"/><text x="91.7715%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (138,388,607,581 samples, 91.78%)</title><rect x="0.0646%" y="613" width="91.7784%" height="15" fill="rgb(228,167,24)" fg:x="97399757" fg:w="138388607581"/><text x="0.3146%" y="623.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (138,388,607,581 samples, 91.78%)</title><rect x="0.0646%" y="597" width="91.7784%" height="15" fill="rgb(228,143,12)" fg:x="97399757" fg:w="138388607581"/><text x="0.3146%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (138,384,596,491 samples, 91.78%)</title><rect x="0.0673%" y="581" width="91.7757%" height="15" fill="rgb(249,149,8)" fg:x="101410847" fg:w="138384596491"/><text x="0.3173%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (138,384,596,491 samples, 91.78%)</title><rect x="0.0673%" y="565" width="91.7757%" height="15" fill="rgb(243,35,44)" fg:x="101410847" fg:w="138384596491"/><text x="0.3173%" y="575.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (138,384,596,491 samples, 91.78%)</title><rect x="0.0673%" y="549" width="91.7757%" height="15" fill="rgb(246,89,9)" fg:x="101410847" fg:w="138384596491"/><text x="0.3173%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (138,384,596,491 samples, 91.78%)</title><rect x="0.0673%" y="533" width="91.7757%" height="15" fill="rgb(233,213,13)" fg:x="101410847" fg:w="138384596491"/><text x="0.3173%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (138,384,596,491 samples, 91.78%)</title><rect x="0.0673%" y="517" width="91.7757%" height="15" fill="rgb(233,141,41)" fg:x="101410847" fg:w="138384596491"/><text x="0.3173%" y="527.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (138,384,596,491 samples, 91.78%)</title><rect x="0.0673%" y="501" width="91.7757%" height="15" fill="rgb(239,167,4)" fg:x="101410847" fg:w="138384596491"/><text x="0.3173%" y="511.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (138,384,596,491 samples, 91.78%)</title><rect x="0.0673%" y="485" width="91.7757%" height="15" fill="rgb(209,217,16)" fg:x="101410847" fg:w="138384596491"/><text x="0.3173%" y="495.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (138,384,596,491 samples, 91.78%)</title><rect x="0.0673%" y="469" width="91.7757%" height="15" fill="rgb(219,88,35)" fg:x="101410847" fg:w="138384596491"/><text x="0.3173%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::par_sparse_dense::_{{closure}}::_{{closure}} (138,384,596,491 samples, 91.78%)</title><rect x="0.0673%" y="453" width="91.7757%" height="15" fill="rgb(220,193,23)" fg:x="101410847" fg:w="138384596491"/><text x="0.3173%" y="463.50">par_matvec::sparse_dense_impl::buffer_foreign::par_sparse_dense::_{{closure}}::_{{closure}}</text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::hot_loop (83,959,023,417 samples, 55.68%)</title><rect x="36.1619%" y="437" width="55.6811%" height="15" fill="rgb(230,90,52)" fg:x="54526983921" fg:w="83959023417"/><text x="36.4119%" y="447.50">par_matvec::sparse_dense_impl::buffer_foreign::hot_loop</text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::buffer_foreign (28,935,294,203 samples, 19.19%)</title><rect x="72.6533%" y="421" width="19.1897%" height="15" fill="rgb(252,106,19)" fg:x="109550713135" fg:w="28935294203"/><text x="72.9033%" y="431.50">par_matvec::sparse_dense_impl:..</text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::get_fresh_chunk (1,396,854,337 samples, 0.93%)</title><rect x="90.9166%" y="405" width="0.9264%" height="15" fill="rgb(206,74,20)" fg:x="137089153001" fg:w="1396854337"/><text x="91.1666%" y="415.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::pop (764,368,643 samples, 0.51%)</title><rect x="91.3361%" y="389" width="0.5069%" height="15" fill="rgb(230,138,44)" fg:x="137721638695" fg:w="764368643"/><text x="91.5861%" y="399.50"></text></g><g><title>[libc.so.6] (138,475,227,101 samples, 91.84%)</title><rect x="0.0127%" y="661" width="91.8358%" height="15" fill="rgb(235,182,43)" fg:x="19154264" fg:w="138475227101"/><text x="0.2627%" y="671.50">[libc.so.6]</text></g><g><title>[libc.so.6] (138,446,602,035 samples, 91.82%)</title><rect x="0.0317%" y="645" width="91.8169%" height="15" fill="rgb(242,16,51)" fg:x="47779330" fg:w="138446602035"/><text x="0.2817%" y="655.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (138,396,981,608 samples, 91.78%)</title><rect x="0.0646%" y="629" width="91.7840%" height="15" fill="rgb(248,9,4)" fg:x="97399757" fg:w="138396981608"/><text x="0.3146%" y="639.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;f64 as num_traits::Num&gt;::from_str_radix (16,318,580 samples, 0.01%)</title><rect x="92.0343%" y="645" width="0.0108%" height="15" fill="rgb(210,31,22)" fg:x="138774407321" fg:w="16318580"/><text x="92.2843%" y="655.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::collect_chunks (31,555,031 samples, 0.02%)</title><rect x="92.0532%" y="629" width="0.0209%" height="15" fill="rgb(239,54,39)" fg:x="138802889939" fg:w="31555031"/><text x="92.3032%" y="639.50"></text></g><g><title>[unknown] (32,498,338 samples, 0.02%)</title><rect x="92.0532%" y="645" width="0.0216%" height="15" fill="rgb(230,99,41)" fg:x="138802889939" fg:w="32498338"/><text x="92.3032%" y="655.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (20,201,335 samples, 0.01%)</title><rect x="92.1113%" y="613" width="0.0134%" height="15" fill="rgb(253,106,12)" fg:x="138890596443" fg:w="20201335"/><text x="92.3613%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (20,201,335 samples, 0.01%)</title><rect x="92.1113%" y="597" width="0.0134%" height="15" fill="rgb(213,46,41)" fg:x="138890596443" fg:w="20201335"/><text x="92.3613%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (20,201,335 samples, 0.01%)</title><rect x="92.1113%" y="581" width="0.0134%" height="15" fill="rgb(215,133,35)" fg:x="138890596443" fg:w="20201335"/><text x="92.3613%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20,201,335 samples, 0.01%)</title><rect x="92.1113%" y="565" width="0.0134%" height="15" fill="rgb(213,28,5)" fg:x="138890596443" fg:w="20201335"/><text x="92.3613%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (20,201,335 samples, 0.01%)</title><rect x="92.1113%" y="549" width="0.0134%" height="15" fill="rgb(215,77,49)" fg:x="138890596443" fg:w="20201335"/><text x="92.3613%" y="559.50"></text></g><g><title>matrix_market_rs::parse_sparse_coo (36,010,050 samples, 0.02%)</title><rect x="92.1087%" y="645" width="0.0239%" height="15" fill="rgb(248,100,22)" fg:x="138886599644" fg:w="36010050"/><text x="92.3587%" y="655.50"></text></g><g><title>matrix_market_rs::parse_coords_val (36,010,050 samples, 0.02%)</title><rect x="92.1087%" y="629" width="0.0239%" height="15" fill="rgb(208,67,9)" fg:x="138886599644" fg:w="36010050"/><text x="92.3587%" y="639.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::get_fresh_chunk (30,511,581 samples, 0.02%)</title><rect x="92.1368%" y="645" width="0.0202%" height="15" fill="rgb(219,133,21)" fg:x="138929049920" fg:w="30511581"/><text x="92.3868%" y="655.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::hot_loop (565,592,206 samples, 0.38%)</title><rect x="92.1571%" y="645" width="0.3751%" height="15" fill="rgb(246,46,29)" fg:x="138959561501" fg:w="565592206"/><text x="92.4071%" y="655.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (84,074,199 samples, 0.06%)</title><rect x="92.5400%" y="645" width="0.0558%" height="15" fill="rgb(246,185,52)" fg:x="139536968604" fg:w="84074199"/><text x="92.7900%" y="655.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::par_sparse_dense::_{{closure}}::_{{closure}} (84,074,199 samples, 0.06%)</title><rect x="92.5400%" y="629" width="0.0558%" height="15" fill="rgb(252,136,11)" fg:x="139536968604" fg:w="84074199"/><text x="92.7900%" y="639.50"></text></g><g><title>[unknown] (1,122,268,078 samples, 0.74%)</title><rect x="91.8541%" y="661" width="0.7443%" height="15" fill="rgb(219,138,53)" fg:x="138502728624" fg:w="1122268078"/><text x="92.1041%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (48,030,052 samples, 0.03%)</title><rect x="92.6081%" y="197" width="0.0319%" height="15" fill="rgb(211,51,23)" fg:x="139639617884" fg:w="48030052"/><text x="92.8581%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (48,030,052 samples, 0.03%)</title><rect x="92.6081%" y="181" width="0.0319%" height="15" fill="rgb(247,221,28)" fg:x="139639617884" fg:w="48030052"/><text x="92.8581%" y="191.50"></text></g><g><title>core::ptr::write (48,030,052 samples, 0.03%)</title><rect x="92.6081%" y="165" width="0.0319%" height="15" fill="rgb(251,222,45)" fg:x="139639617884" fg:w="48030052"/><text x="92.8581%" y="175.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (88,636,728 samples, 0.06%)</title><rect x="92.6081%" y="213" width="0.0588%" height="15" fill="rgb(217,162,53)" fg:x="139639617884" fg:w="88636728"/><text x="92.8581%" y="223.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market::_{{closure}} (40,606,676 samples, 0.03%)</title><rect x="92.6399%" y="197" width="0.0269%" height="15" fill="rgb(229,93,14)" fg:x="139687647936" fg:w="40606676"/><text x="92.8899%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (94,601,543 samples, 0.06%)</title><rect x="92.6081%" y="373" width="0.0627%" height="15" fill="rgb(209,67,49)" fg:x="139639617884" fg:w="94601543"/><text x="92.8581%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (94,601,543 samples, 0.06%)</title><rect x="92.6081%" y="357" width="0.0627%" height="15" fill="rgb(213,87,29)" fg:x="139639617884" fg:w="94601543"/><text x="92.8581%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (94,601,543 samples, 0.06%)</title><rect x="92.6081%" y="341" width="0.0627%" height="15" fill="rgb(205,151,52)" fg:x="139639617884" fg:w="94601543"/><text x="92.8581%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (94,601,543 samples, 0.06%)</title><rect x="92.6081%" y="325" width="0.0627%" height="15" fill="rgb(253,215,39)" fg:x="139639617884" fg:w="94601543"/><text x="92.8581%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (94,601,543 samples, 0.06%)</title><rect x="92.6081%" y="309" width="0.0627%" height="15" fill="rgb(221,220,41)" fg:x="139639617884" fg:w="94601543"/><text x="92.8581%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (94,601,543 samples, 0.06%)</title><rect x="92.6081%" y="293" width="0.0627%" height="15" fill="rgb(218,133,21)" fg:x="139639617884" fg:w="94601543"/><text x="92.8581%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (94,601,543 samples, 0.06%)</title><rect x="92.6081%" y="277" width="0.0627%" height="15" fill="rgb(221,193,43)" fg:x="139639617884" fg:w="94601543"/><text x="92.8581%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (94,601,543 samples, 0.06%)</title><rect x="92.6081%" y="261" width="0.0627%" height="15" fill="rgb(240,128,52)" fg:x="139639617884" fg:w="94601543"/><text x="92.8581%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (94,601,543 samples, 0.06%)</title><rect x="92.6081%" y="245" width="0.0627%" height="15" fill="rgb(253,114,12)" fg:x="139639617884" fg:w="94601543"/><text x="92.8581%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (94,601,543 samples, 0.06%)</title><rect x="92.6081%" y="229" width="0.0627%" height="15" fill="rgb(215,223,47)" fg:x="139639617884" fg:w="94601543"/><text x="92.8581%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (29,173,097 samples, 0.02%)</title><rect x="92.6961%" y="341" width="0.0193%" height="15" fill="rgb(248,225,23)" fg:x="139772404098" fg:w="29173097"/><text x="92.9461%" y="351.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::new_from_argsort_impl (251,250,800 samples, 0.17%)</title><rect x="92.6708%" y="357" width="0.1666%" height="15" fill="rgb(250,108,0)" fg:x="139734219427" fg:w="251250800"/><text x="92.9208%" y="367.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (173,147,552 samples, 0.11%)</title><rect x="92.7226%" y="341" width="0.1148%" height="15" fill="rgb(228,208,7)" fg:x="139812322675" fg:w="173147552"/><text x="92.9726%" y="351.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (165,186,155 samples, 0.11%)</title><rect x="92.7279%" y="325" width="0.1096%" height="15" fill="rgb(244,45,10)" fg:x="139820284072" fg:w="165186155"/><text x="92.9779%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (144,458,885 samples, 0.10%)</title><rect x="92.9089%" y="341" width="0.0958%" height="15" fill="rgb(207,125,25)" fg:x="140093210042" fg:w="144458885"/><text x="93.1589%" y="351.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (68,502,731 samples, 0.05%)</title><rect x="93.0351%" y="229" width="0.0454%" height="15" fill="rgb(210,195,18)" fg:x="140283474145" fg:w="68502731"/><text x="93.2851%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (38,344,381 samples, 0.03%)</title><rect x="93.0551%" y="213" width="0.0254%" height="15" fill="rgb(249,80,12)" fg:x="140313632495" fg:w="38344381"/><text x="93.3051%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (195,481,480 samples, 0.13%)</title><rect x="93.0152%" y="293" width="0.1296%" height="15" fill="rgb(221,65,9)" fg:x="140253488140" fg:w="195481480"/><text x="93.2652%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (195,481,480 samples, 0.13%)</title><rect x="93.0152%" y="277" width="0.1296%" height="15" fill="rgb(235,49,36)" fg:x="140253488140" fg:w="195481480"/><text x="93.2652%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (195,481,480 samples, 0.13%)</title><rect x="93.0152%" y="261" width="0.1296%" height="15" fill="rgb(225,32,20)" fg:x="140253488140" fg:w="195481480"/><text x="93.2652%" y="271.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (165,495,475 samples, 0.11%)</title><rect x="93.0351%" y="245" width="0.1098%" height="15" fill="rgb(215,141,46)" fg:x="140283474145" fg:w="165495475"/><text x="93.2851%" y="255.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (96,992,744 samples, 0.06%)</title><rect x="93.0805%" y="229" width="0.0643%" height="15" fill="rgb(250,160,47)" fg:x="140351976876" fg:w="96992744"/><text x="93.3305%" y="239.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (84,841,536 samples, 0.06%)</title><rect x="93.0886%" y="213" width="0.0563%" height="15" fill="rgb(216,222,40)" fg:x="140364128084" fg:w="84841536"/><text x="93.3386%" y="223.50"></text></g><g><title>core::intrinsics::copy (17,662,225 samples, 0.01%)</title><rect x="93.1535%" y="229" width="0.0117%" height="15" fill="rgb(234,217,39)" fg:x="140461981092" fg:w="17662225"/><text x="93.4035%" y="239.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (38,935,972 samples, 0.03%)</title><rect x="93.1652%" y="213" width="0.0258%" height="15" fill="rgb(207,178,40)" fg:x="140479643317" fg:w="38935972"/><text x="93.4152%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (21,664,192 samples, 0.01%)</title><rect x="93.1766%" y="197" width="0.0144%" height="15" fill="rgb(221,136,13)" fg:x="140496915097" fg:w="21664192"/><text x="93.4266%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (225,604,837 samples, 0.15%)</title><rect x="93.1448%" y="277" width="0.1496%" height="15" fill="rgb(249,199,10)" fg:x="140448969620" fg:w="225604837"/><text x="93.3948%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (225,604,837 samples, 0.15%)</title><rect x="93.1448%" y="261" width="0.1496%" height="15" fill="rgb(249,222,13)" fg:x="140448969620" fg:w="225604837"/><text x="93.3948%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (225,604,837 samples, 0.15%)</title><rect x="93.1448%" y="245" width="0.1496%" height="15" fill="rgb(244,185,38)" fg:x="140448969620" fg:w="225604837"/><text x="93.3948%" y="255.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (194,931,140 samples, 0.13%)</title><rect x="93.1652%" y="229" width="0.1293%" height="15" fill="rgb(236,202,9)" fg:x="140479643317" fg:w="194931140"/><text x="93.4152%" y="239.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (155,995,168 samples, 0.10%)</title><rect x="93.1910%" y="213" width="0.1035%" height="15" fill="rgb(250,229,37)" fg:x="140518579289" fg:w="155995168"/><text x="93.4410%" y="223.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (147,311,285 samples, 0.10%)</title><rect x="93.1967%" y="197" width="0.0977%" height="15" fill="rgb(206,174,23)" fg:x="140527263172" fg:w="147311285"/><text x="93.4467%" y="207.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (25,851,645 samples, 0.02%)</title><rect x="93.3290%" y="197" width="0.0171%" height="15" fill="rgb(211,33,43)" fg:x="140726747729" fg:w="25851645"/><text x="93.5790%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (21,459,301 samples, 0.01%)</title><rect x="93.3320%" y="181" width="0.0142%" height="15" fill="rgb(245,58,50)" fg:x="140731140073" fg:w="21459301"/><text x="93.5820%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (220,455,911 samples, 0.15%)</title><rect x="93.3001%" y="261" width="0.1462%" height="15" fill="rgb(244,68,36)" fg:x="140683082936" fg:w="220455911"/><text x="93.5501%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (220,455,911 samples, 0.15%)</title><rect x="93.3001%" y="245" width="0.1462%" height="15" fill="rgb(232,229,15)" fg:x="140683082936" fg:w="220455911"/><text x="93.5501%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (220,455,911 samples, 0.15%)</title><rect x="93.3001%" y="229" width="0.1462%" height="15" fill="rgb(254,30,23)" fg:x="140683082936" fg:w="220455911"/><text x="93.5501%" y="239.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (176,791,118 samples, 0.12%)</title><rect x="93.3290%" y="213" width="0.1172%" height="15" fill="rgb(235,160,14)" fg:x="140726747729" fg:w="176791118"/><text x="93.5790%" y="223.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (150,939,473 samples, 0.10%)</title><rect x="93.3462%" y="197" width="0.1001%" height="15" fill="rgb(212,155,44)" fg:x="140752599374" fg:w="150939473"/><text x="93.5962%" y="207.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (146,643,230 samples, 0.10%)</title><rect x="93.3490%" y="181" width="0.0973%" height="15" fill="rgb(226,2,50)" fg:x="140756895617" fg:w="146643230"/><text x="93.5990%" y="191.50"></text></g><g><title>core::intrinsics::copy (17,624,923 samples, 0.01%)</title><rect x="93.4633%" y="197" width="0.0117%" height="15" fill="rgb(234,177,6)" fg:x="140929225985" fg:w="17624923"/><text x="93.7133%" y="207.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (25,481,982 samples, 0.02%)</title><rect x="93.4807%" y="181" width="0.0169%" height="15" fill="rgb(217,24,9)" fg:x="140955461447" fg:w="25481982"/><text x="93.7307%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (198,419,163 samples, 0.13%)</title><rect x="93.4463%" y="245" width="0.1316%" height="15" fill="rgb(220,13,46)" fg:x="140903538847" fg:w="198419163"/><text x="93.6963%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (198,419,163 samples, 0.13%)</title><rect x="93.4463%" y="229" width="0.1316%" height="15" fill="rgb(239,221,27)" fg:x="140903538847" fg:w="198419163"/><text x="93.6963%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (194,122,367 samples, 0.13%)</title><rect x="93.4491%" y="213" width="0.1287%" height="15" fill="rgb(222,198,25)" fg:x="140907835643" fg:w="194122367"/><text x="93.6991%" y="223.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (150,765,817 samples, 0.10%)</title><rect x="93.4779%" y="197" width="0.1000%" height="15" fill="rgb(211,99,13)" fg:x="140951192193" fg:w="150765817"/><text x="93.7279%" y="207.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (121,014,581 samples, 0.08%)</title><rect x="93.4976%" y="181" width="0.0803%" height="15" fill="rgb(232,111,31)" fg:x="140980943429" fg:w="121014581"/><text x="93.7476%" y="191.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (108,238,577 samples, 0.07%)</title><rect x="93.5061%" y="165" width="0.0718%" height="15" fill="rgb(245,82,37)" fg:x="140993719433" fg:w="108238577"/><text x="93.7561%" y="175.50"></text></g><g><title>core::intrinsics::copy (25,778,527 samples, 0.02%)</title><rect x="93.5921%" y="181" width="0.0171%" height="15" fill="rgb(227,149,46)" fg:x="141123376449" fg:w="25778527"/><text x="93.8421%" y="191.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (64,849,719 samples, 0.04%)</title><rect x="93.6120%" y="165" width="0.0430%" height="15" fill="rgb(218,36,50)" fg:x="141153412401" fg:w="64849719"/><text x="93.8620%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (34,785,170 samples, 0.02%)</title><rect x="93.6319%" y="149" width="0.0231%" height="15" fill="rgb(226,80,48)" fg:x="141183476950" fg:w="34785170"/><text x="93.8819%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (198,344,772 samples, 0.13%)</title><rect x="93.5807%" y="229" width="0.1315%" height="15" fill="rgb(238,224,15)" fg:x="141106259023" fg:w="198344772"/><text x="93.8307%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (198,344,772 samples, 0.13%)</title><rect x="93.5807%" y="213" width="0.1315%" height="15" fill="rgb(241,136,10)" fg:x="141106259023" fg:w="198344772"/><text x="93.8307%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (198,344,772 samples, 0.13%)</title><rect x="93.5807%" y="197" width="0.1315%" height="15" fill="rgb(208,32,45)" fg:x="141106259023" fg:w="198344772"/><text x="93.8307%" y="207.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (155,448,819 samples, 0.10%)</title><rect x="93.6092%" y="181" width="0.1031%" height="15" fill="rgb(207,135,9)" fg:x="141149154976" fg:w="155448819"/><text x="93.8592%" y="191.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (86,341,675 samples, 0.06%)</title><rect x="93.6550%" y="165" width="0.0573%" height="15" fill="rgb(206,86,44)" fg:x="141218262120" fg:w="86341675"/><text x="93.9050%" y="175.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (64,952,012 samples, 0.04%)</title><rect x="93.6692%" y="149" width="0.0431%" height="15" fill="rgb(245,177,15)" fg:x="141239651783" fg:w="64952012"/><text x="93.9192%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (29,932,802 samples, 0.02%)</title><rect x="93.7151%" y="213" width="0.0199%" height="15" fill="rgb(206,64,50)" fg:x="141308885605" fg:w="29932802"/><text x="93.9651%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (29,882,785 samples, 0.02%)</title><rect x="93.7862%" y="133" width="0.0198%" height="15" fill="rgb(234,36,40)" fg:x="141416055183" fg:w="29882785"/><text x="94.0362%" y="143.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (55,599,244 samples, 0.04%)</title><rect x="93.7720%" y="149" width="0.0369%" height="15" fill="rgb(213,64,8)" fg:x="141394671658" fg:w="55599244"/><text x="94.0220%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (193,781,588 samples, 0.13%)</title><rect x="93.7350%" y="213" width="0.1285%" height="15" fill="rgb(210,75,36)" fg:x="141338818407" fg:w="193781588"/><text x="93.9850%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (193,781,588 samples, 0.13%)</title><rect x="93.7350%" y="197" width="0.1285%" height="15" fill="rgb(229,88,21)" fg:x="141338818407" fg:w="193781588"/><text x="93.9850%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (193,781,588 samples, 0.13%)</title><rect x="93.7350%" y="181" width="0.1285%" height="15" fill="rgb(252,204,47)" fg:x="141338818407" fg:w="193781588"/><text x="93.9850%" y="191.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (163,746,514 samples, 0.11%)</title><rect x="93.7549%" y="165" width="0.1086%" height="15" fill="rgb(208,77,27)" fg:x="141368853481" fg:w="163746514"/><text x="94.0049%" y="175.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (82,329,093 samples, 0.05%)</title><rect x="93.8089%" y="149" width="0.0546%" height="15" fill="rgb(221,76,26)" fg:x="141450270902" fg:w="82329093"/><text x="94.0589%" y="159.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (48,250,448 samples, 0.03%)</title><rect x="93.8315%" y="133" width="0.0320%" height="15" fill="rgb(225,139,18)" fg:x="141484349547" fg:w="48250448"/><text x="94.0815%" y="143.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (21,396,620 samples, 0.01%)</title><rect x="93.8635%" y="197" width="0.0142%" height="15" fill="rgb(230,137,11)" fg:x="141532599995" fg:w="21396620"/><text x="94.1135%" y="207.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (17,120,445 samples, 0.01%)</title><rect x="93.8663%" y="181" width="0.0114%" height="15" fill="rgb(212,28,1)" fg:x="141536876170" fg:w="17120445"/><text x="94.1163%" y="191.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (17,120,445 samples, 0.01%)</title><rect x="93.8663%" y="165" width="0.0114%" height="15" fill="rgb(248,164,17)" fg:x="141536876170" fg:w="17120445"/><text x="94.1163%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (51,403,111 samples, 0.03%)</title><rect x="93.8777%" y="197" width="0.0341%" height="15" fill="rgb(222,171,42)" fg:x="141553996615" fg:w="51403111"/><text x="94.1277%" y="207.50"></text></g><g><title>core::intrinsics::copy (25,645,709 samples, 0.02%)</title><rect x="93.9203%" y="149" width="0.0170%" height="15" fill="rgb(243,84,45)" fg:x="141618264105" fg:w="25645709"/><text x="94.1703%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (94,280,717 samples, 0.06%)</title><rect x="93.9118%" y="197" width="0.0625%" height="15" fill="rgb(252,49,23)" fg:x="141605399726" fg:w="94280717"/><text x="94.1618%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (94,280,717 samples, 0.06%)</title><rect x="93.9118%" y="181" width="0.0625%" height="15" fill="rgb(215,19,7)" fg:x="141605399726" fg:w="94280717"/><text x="94.1618%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (89,973,478 samples, 0.06%)</title><rect x="93.9146%" y="165" width="0.0597%" height="15" fill="rgb(238,81,41)" fg:x="141609706965" fg:w="89973478"/><text x="94.1646%" y="175.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (55,770,629 samples, 0.04%)</title><rect x="93.9373%" y="149" width="0.0370%" height="15" fill="rgb(210,199,37)" fg:x="141643909814" fg:w="55770629"/><text x="94.1873%" y="159.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (34,322,533 samples, 0.02%)</title><rect x="93.9515%" y="133" width="0.0228%" height="15" fill="rgb(244,192,49)" fg:x="141665357910" fg:w="34322533"/><text x="94.2015%" y="143.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (17,134,027 samples, 0.01%)</title><rect x="93.9629%" y="117" width="0.0114%" height="15" fill="rgb(226,211,11)" fg:x="141682546416" fg:w="17134027"/><text x="94.2129%" y="127.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (21,468,491 samples, 0.01%)</title><rect x="93.9771%" y="181" width="0.0142%" height="15" fill="rgb(236,162,54)" fg:x="141703943088" fg:w="21468491"/><text x="94.2271%" y="191.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (17,170,112 samples, 0.01%)</title><rect x="93.9800%" y="165" width="0.0114%" height="15" fill="rgb(220,229,9)" fg:x="141708241467" fg:w="17170112"/><text x="94.2300%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (29,958,305 samples, 0.02%)</title><rect x="93.9913%" y="181" width="0.0199%" height="15" fill="rgb(250,87,22)" fg:x="141725411579" fg:w="29958305"/><text x="94.2413%" y="191.50"></text></g><g><title>core::intrinsics::copy (30,069,161 samples, 0.02%)</title><rect x="94.0169%" y="133" width="0.0199%" height="15" fill="rgb(239,43,17)" fg:x="141763966980" fg:w="30069161"/><text x="94.2669%" y="143.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (25,845,135 samples, 0.02%)</title><rect x="94.0483%" y="117" width="0.0171%" height="15" fill="rgb(231,177,25)" fg:x="141811266923" fg:w="25845135"/><text x="94.2983%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (116,040,805 samples, 0.08%)</title><rect x="94.0112%" y="181" width="0.0770%" height="15" fill="rgb(219,179,1)" fg:x="141755369884" fg:w="116040805"/><text x="94.2612%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (116,040,805 samples, 0.08%)</title><rect x="94.0112%" y="165" width="0.0770%" height="15" fill="rgb(238,219,53)" fg:x="141755369884" fg:w="116040805"/><text x="94.2612%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (116,040,805 samples, 0.08%)</title><rect x="94.0112%" y="149" width="0.0770%" height="15" fill="rgb(232,167,36)" fg:x="141755369884" fg:w="116040805"/><text x="94.2612%" y="159.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (73,025,430 samples, 0.05%)</title><rect x="94.0397%" y="133" width="0.0484%" height="15" fill="rgb(244,19,51)" fg:x="141798385259" fg:w="73025430"/><text x="94.2897%" y="143.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (34,298,631 samples, 0.02%)</title><rect x="94.0654%" y="117" width="0.0227%" height="15" fill="rgb(224,6,22)" fg:x="141837112058" fg:w="34298631"/><text x="94.3154%" y="127.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (25,765,698 samples, 0.02%)</title><rect x="94.0711%" y="101" width="0.0171%" height="15" fill="rgb(224,145,5)" fg:x="141845644991" fg:w="25765698"/><text x="94.3211%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (17,208,818 samples, 0.01%)</title><rect x="94.0996%" y="149" width="0.0114%" height="15" fill="rgb(234,130,49)" fg:x="141888589801" fg:w="17208818"/><text x="94.3496%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (60,161,700 samples, 0.04%)</title><rect x="94.0967%" y="165" width="0.0399%" height="15" fill="rgb(254,6,2)" fg:x="141884316499" fg:w="60161700"/><text x="94.3467%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (17,071,682 samples, 0.01%)</title><rect x="94.1253%" y="149" width="0.0113%" height="15" fill="rgb(208,96,46)" fg:x="141927406517" fg:w="17071682"/><text x="94.3753%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (17,071,682 samples, 0.01%)</title><rect x="94.1253%" y="133" width="0.0113%" height="15" fill="rgb(239,3,39)" fg:x="141927406517" fg:w="17071682"/><text x="94.3753%" y="143.50"></text></g><g><title>core::intrinsics::copy (30,197,107 samples, 0.02%)</title><rect x="94.1540%" y="117" width="0.0200%" height="15" fill="rgb(233,210,1)" fg:x="141970600982" fg:w="30197107"/><text x="94.4040%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (120,846,224 samples, 0.08%)</title><rect x="94.1366%" y="165" width="0.0801%" height="15" fill="rgb(244,137,37)" fg:x="141944478199" fg:w="120846224"/><text x="94.3866%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (120,846,224 samples, 0.08%)</title><rect x="94.1366%" y="149" width="0.0801%" height="15" fill="rgb(240,136,2)" fg:x="141944478199" fg:w="120846224"/><text x="94.3866%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (112,221,295 samples, 0.07%)</title><rect x="94.1424%" y="133" width="0.0744%" height="15" fill="rgb(239,18,37)" fg:x="141953103128" fg:w="112221295"/><text x="94.3924%" y="143.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (64,526,334 samples, 0.04%)</title><rect x="94.1740%" y="117" width="0.0428%" height="15" fill="rgb(218,185,22)" fg:x="142000798089" fg:w="64526334"/><text x="94.4240%" y="127.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (38,704,445 samples, 0.03%)</title><rect x="94.1911%" y="101" width="0.0257%" height="15" fill="rgb(225,218,4)" fg:x="142026619978" fg:w="38704445"/><text x="94.4411%" y="111.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (21,518,799 samples, 0.01%)</title><rect x="94.2025%" y="85" width="0.0143%" height="15" fill="rgb(230,182,32)" fg:x="142043805624" fg:w="21518799"/><text x="94.4525%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (25,806,327 samples, 0.02%)</title><rect x="94.2539%" y="133" width="0.0171%" height="15" fill="rgb(242,56,43)" fg:x="142121349960" fg:w="25806327"/><text x="94.5039%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (25,806,327 samples, 0.02%)</title><rect x="94.2539%" y="117" width="0.0171%" height="15" fill="rgb(233,99,24)" fg:x="142121349960" fg:w="25806327"/><text x="94.5039%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (81,848,954 samples, 0.05%)</title><rect x="94.2310%" y="149" width="0.0543%" height="15" fill="rgb(234,209,42)" fg:x="142086814565" fg:w="81848954"/><text x="94.4810%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (21,507,232 samples, 0.01%)</title><rect x="94.2710%" y="133" width="0.0143%" height="15" fill="rgb(227,7,12)" fg:x="142147156287" fg:w="21507232"/><text x="94.5210%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (21,507,232 samples, 0.01%)</title><rect x="94.2710%" y="117" width="0.0143%" height="15" fill="rgb(245,203,43)" fg:x="142147156287" fg:w="21507232"/><text x="94.5210%" y="127.50"></text></g><g><title>core::intrinsics::copy (17,363,351 samples, 0.01%)</title><rect x="94.2882%" y="101" width="0.0115%" height="15" fill="rgb(238,205,33)" fg:x="142172991690" fg:w="17363351"/><text x="94.5382%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (21,354,092 samples, 0.01%)</title><rect x="94.3169%" y="69" width="0.0142%" height="15" fill="rgb(231,56,7)" fg:x="142216274715" fg:w="21354092"/><text x="94.5669%" y="79.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (34,191,452 samples, 0.02%)</title><rect x="94.3112%" y="85" width="0.0227%" height="15" fill="rgb(244,186,29)" fg:x="142207724055" fg:w="34191452"/><text x="94.5612%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (90,363,537 samples, 0.06%)</title><rect x="94.2853%" y="149" width="0.0599%" height="15" fill="rgb(234,111,31)" fg:x="142168663519" fg:w="90363537"/><text x="94.5353%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (90,363,537 samples, 0.06%)</title><rect x="94.2853%" y="133" width="0.0599%" height="15" fill="rgb(241,149,10)" fg:x="142168663519" fg:w="90363537"/><text x="94.5353%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (90,363,537 samples, 0.06%)</title><rect x="94.2853%" y="117" width="0.0599%" height="15" fill="rgb(249,206,44)" fg:x="142168663519" fg:w="90363537"/><text x="94.5353%" y="127.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (68,672,015 samples, 0.05%)</title><rect x="94.2997%" y="101" width="0.0455%" height="15" fill="rgb(251,153,30)" fg:x="142190355041" fg:w="68672015"/><text x="94.5497%" y="111.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (17,111,549 samples, 0.01%)</title><rect x="94.3339%" y="85" width="0.0113%" height="15" fill="rgb(239,152,38)" fg:x="142241915507" fg:w="17111549"/><text x="94.5839%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (17,139,611 samples, 0.01%)</title><rect x="94.3595%" y="117" width="0.0114%" height="15" fill="rgb(249,139,47)" fg:x="142280590440" fg:w="17139611"/><text x="94.6095%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (17,139,611 samples, 0.01%)</title><rect x="94.3595%" y="101" width="0.0114%" height="15" fill="rgb(244,64,35)" fg:x="142280590440" fg:w="17139611"/><text x="94.6095%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (64,741,580 samples, 0.04%)</title><rect x="94.3481%" y="133" width="0.0429%" height="15" fill="rgb(216,46,15)" fg:x="142263284102" fg:w="64741580"/><text x="94.5981%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (26,069,739 samples, 0.02%)</title><rect x="94.3737%" y="117" width="0.0173%" height="15" fill="rgb(250,74,19)" fg:x="142301955943" fg:w="26069739"/><text x="94.6237%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (26,069,739 samples, 0.02%)</title><rect x="94.3737%" y="101" width="0.0173%" height="15" fill="rgb(249,42,33)" fg:x="142301955943" fg:w="26069739"/><text x="94.6237%" y="111.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (21,867,936 samples, 0.01%)</title><rect x="94.3765%" y="85" width="0.0145%" height="15" fill="rgb(242,149,17)" fg:x="142306157746" fg:w="21867936"/><text x="94.6265%" y="95.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (21,677,129 samples, 0.01%)</title><rect x="94.4024%" y="69" width="0.0144%" height="15" fill="rgb(244,29,21)" fg:x="142345163198" fg:w="21677129"/><text x="94.6524%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (65,106,323 samples, 0.04%)</title><rect x="94.3910%" y="133" width="0.0432%" height="15" fill="rgb(220,130,37)" fg:x="142328025682" fg:w="65106323"/><text x="94.6410%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (60,771,827 samples, 0.04%)</title><rect x="94.3939%" y="117" width="0.0403%" height="15" fill="rgb(211,67,2)" fg:x="142332360178" fg:w="60771827"/><text x="94.6439%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (60,771,827 samples, 0.04%)</title><rect x="94.3939%" y="101" width="0.0403%" height="15" fill="rgb(235,68,52)" fg:x="142332360178" fg:w="60771827"/><text x="94.6439%" y="111.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (52,164,151 samples, 0.03%)</title><rect x="94.3996%" y="85" width="0.0346%" height="15" fill="rgb(246,142,3)" fg:x="142340967854" fg:w="52164151"/><text x="94.6496%" y="95.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (26,291,678 samples, 0.02%)</title><rect x="94.4167%" y="69" width="0.0174%" height="15" fill="rgb(241,25,7)" fg:x="142366840327" fg:w="26291678"/><text x="94.6667%" y="79.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (26,291,678 samples, 0.02%)</title><rect x="94.4167%" y="53" width="0.0174%" height="15" fill="rgb(242,119,39)" fg:x="142366840327" fg:w="26291678"/><text x="94.6667%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (38,707,892 samples, 0.03%)</title><rect x="94.4399%" y="117" width="0.0257%" height="15" fill="rgb(241,98,45)" fg:x="142401758620" fg:w="38707892"/><text x="94.6899%" y="127.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (17,312,546 samples, 0.01%)</title><rect x="94.4768%" y="53" width="0.0115%" height="15" fill="rgb(254,28,30)" fg:x="142457434234" fg:w="17312546"/><text x="94.7268%" y="63.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (42,834,295 samples, 0.03%)</title><rect x="94.4656%" y="117" width="0.0284%" height="15" fill="rgb(241,142,54)" fg:x="142440466512" fg:w="42834295"/><text x="94.7156%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (42,834,295 samples, 0.03%)</title><rect x="94.4656%" y="101" width="0.0284%" height="15" fill="rgb(222,85,15)" fg:x="142440466512" fg:w="42834295"/><text x="94.7156%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (42,834,295 samples, 0.03%)</title><rect x="94.4656%" y="85" width="0.0284%" height="15" fill="rgb(210,85,47)" fg:x="142440466512" fg:w="42834295"/><text x="94.7156%" y="95.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (30,057,637 samples, 0.02%)</title><rect x="94.4740%" y="69" width="0.0199%" height="15" fill="rgb(224,206,25)" fg:x="142453243170" fg:w="30057637"/><text x="94.7240%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (21,531,718 samples, 0.01%)</title><rect x="94.4940%" y="85" width="0.0143%" height="15" fill="rgb(243,201,19)" fg:x="142483300807" fg:w="21531718"/><text x="94.7440%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (17,174,209 samples, 0.01%)</title><rect x="94.5083%" y="85" width="0.0114%" height="15" fill="rgb(236,59,4)" fg:x="142504832525" fg:w="17174209"/><text x="94.7583%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (17,174,209 samples, 0.01%)</title><rect x="94.5083%" y="69" width="0.0114%" height="15" fill="rgb(254,179,45)" fg:x="142504832525" fg:w="17174209"/><text x="94.7583%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (21,594,914 samples, 0.01%)</title><rect x="94.5196%" y="85" width="0.0143%" height="15" fill="rgb(226,14,10)" fg:x="142522006734" fg:w="21594914"/><text x="94.7696%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (21,594,914 samples, 0.01%)</title><rect x="94.5196%" y="69" width="0.0143%" height="15" fill="rgb(244,27,41)" fg:x="142522006734" fg:w="21594914"/><text x="94.7696%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (64,568,695 samples, 0.04%)</title><rect x="94.4940%" y="101" width="0.0428%" height="15" fill="rgb(235,35,32)" fg:x="142483300807" fg:w="64568695"/><text x="94.7440%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (17,429,718 samples, 0.01%)</title><rect x="94.5454%" y="69" width="0.0116%" height="15" fill="rgb(218,68,31)" fg:x="142560800505" fg:w="17429718"/><text x="94.7954%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (38,950,411 samples, 0.03%)</title><rect x="94.5454%" y="85" width="0.0258%" height="15" fill="rgb(207,120,37)" fg:x="142560800505" fg:w="38950411"/><text x="94.7954%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (34,576,747 samples, 0.02%)</title><rect x="94.5712%" y="85" width="0.0229%" height="15" fill="rgb(227,98,0)" fg:x="142599750916" fg:w="34576747"/><text x="94.8212%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (34,576,747 samples, 0.02%)</title><rect x="94.5712%" y="69" width="0.0229%" height="15" fill="rgb(207,7,3)" fg:x="142599750916" fg:w="34576747"/><text x="94.8212%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (34,576,747 samples, 0.02%)</title><rect x="94.5712%" y="53" width="0.0229%" height="15" fill="rgb(206,98,19)" fg:x="142599750916" fg:w="34576747"/><text x="94.8212%" y="63.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (21,742,526 samples, 0.01%)</title><rect x="94.5797%" y="37" width="0.0144%" height="15" fill="rgb(217,5,26)" fg:x="142612585137" fg:w="21742526"/><text x="94.8297%" y="47.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (2,440,170,463 samples, 1.62%)</title><rect x="93.0136%" y="341" width="1.6183%" height="15" fill="rgb(235,190,38)" fg:x="140251085585" fg:w="2440170463"/><text x="93.2636%" y="351.50"></text></g><g><title>core::slice::sort::unstable::sort (2,440,170,463 samples, 1.62%)</title><rect x="93.0136%" y="325" width="1.6183%" height="15" fill="rgb(247,86,24)" fg:x="140251085585" fg:w="2440170463"/><text x="93.2636%" y="335.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,440,170,463 samples, 1.62%)</title><rect x="93.0136%" y="309" width="1.6183%" height="15" fill="rgb(205,101,16)" fg:x="140251085585" fg:w="2440170463"/><text x="93.2636%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,242,286,428 samples, 1.49%)</title><rect x="93.1448%" y="293" width="1.4871%" height="15" fill="rgb(246,168,33)" fg:x="140448969620" fg:w="2242286428"/><text x="93.3948%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,016,681,591 samples, 1.34%)</title><rect x="93.2944%" y="277" width="1.3374%" height="15" fill="rgb(231,114,1)" fg:x="140674574457" fg:w="2016681591"/><text x="93.5444%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,787,717,201 samples, 1.19%)</title><rect x="93.4463%" y="261" width="1.1856%" height="15" fill="rgb(207,184,53)" fg:x="140903538847" fg:w="1787717201"/><text x="93.6963%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,589,298,038 samples, 1.05%)</title><rect x="93.5779%" y="245" width="1.0540%" height="15" fill="rgb(224,95,51)" fg:x="141101958010" fg:w="1589298038"/><text x="93.8279%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,386,652,253 samples, 0.92%)</title><rect x="93.7123%" y="229" width="0.9196%" height="15" fill="rgb(212,188,45)" fg:x="141304603795" fg:w="1386652253"/><text x="93.9623%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,158,656,053 samples, 0.77%)</title><rect x="93.8635%" y="213" width="0.7684%" height="15" fill="rgb(223,154,38)" fg:x="141532599995" fg:w="1158656053"/><text x="94.1135%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (991,575,605 samples, 0.66%)</title><rect x="93.9743%" y="197" width="0.6576%" height="15" fill="rgb(251,22,52)" fg:x="141699680443" fg:w="991575605"/><text x="94.2243%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (819,845,359 samples, 0.54%)</title><rect x="94.0882%" y="181" width="0.5437%" height="15" fill="rgb(229,209,22)" fg:x="141871410689" fg:w="819845359"/><text x="94.3382%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (625,931,625 samples, 0.42%)</title><rect x="94.2168%" y="165" width="0.4151%" height="15" fill="rgb(234,138,34)" fg:x="142065324423" fg:w="625931625"/><text x="94.4668%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (432,228,992 samples, 0.29%)</title><rect x="94.3452%" y="149" width="0.2867%" height="15" fill="rgb(212,95,11)" fg:x="142259027056" fg:w="432228992"/><text x="94.5952%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (298,124,043 samples, 0.20%)</title><rect x="94.4342%" y="133" width="0.1977%" height="15" fill="rgb(240,179,47)" fg:x="142393132005" fg:w="298124043"/><text x="94.6842%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (207,955,241 samples, 0.14%)</title><rect x="94.4940%" y="117" width="0.1379%" height="15" fill="rgb(240,163,11)" fg:x="142483300807" fg:w="207955241"/><text x="94.7440%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (130,455,543 samples, 0.09%)</title><rect x="94.5454%" y="101" width="0.0865%" height="15" fill="rgb(236,37,12)" fg:x="142560800505" fg:w="130455543"/><text x="94.7954%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (56,928,385 samples, 0.04%)</title><rect x="94.5941%" y="85" width="0.0378%" height="15" fill="rgb(232,164,16)" fg:x="142634327663" fg:w="56928385"/><text x="94.8441%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (30,748,333 samples, 0.02%)</title><rect x="94.6115%" y="69" width="0.0204%" height="15" fill="rgb(244,205,15)" fg:x="142660507715" fg:w="30748333"/><text x="94.8615%" y="79.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (195,618,951 samples, 0.13%)</title><rect x="94.6405%" y="341" width="0.1297%" height="15" fill="rgb(223,117,47)" fg:x="142704304013" fg:w="195618951"/><text x="94.8905%" y="351.50"></text></g><g><title>faer::sparse::try_collect (15,487,979 samples, 0.01%)</title><rect x="94.7703%" y="341" width="0.0103%" height="15" fill="rgb(244,107,35)" fg:x="142899922964" fg:w="15487979"/><text x="95.0203%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (15,487,979 samples, 0.01%)</title><rect x="94.7703%" y="325" width="0.0103%" height="15" fill="rgb(205,140,8)" fg:x="142899922964" fg:w="15487979"/><text x="95.0203%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15,487,979 samples, 0.01%)</title><rect x="94.7703%" y="309" width="0.0103%" height="15" fill="rgb(228,84,46)" fg:x="142899922964" fg:w="15487979"/><text x="95.0203%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (15,487,979 samples, 0.01%)</title><rect x="94.7703%" y="293" width="0.0103%" height="15" fill="rgb(254,188,9)" fg:x="142899922964" fg:w="15487979"/><text x="95.0203%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15,487,979 samples, 0.01%)</title><rect x="94.7703%" y="277" width="0.0103%" height="15" fill="rgb(206,112,54)" fg:x="142899922964" fg:w="15487979"/><text x="95.0203%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15,487,979 samples, 0.01%)</title><rect x="94.7703%" y="261" width="0.0103%" height="15" fill="rgb(216,84,49)" fg:x="142899922964" fg:w="15487979"/><text x="95.0203%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (15,487,979 samples, 0.01%)</title><rect x="94.7703%" y="245" width="0.0103%" height="15" fill="rgb(214,194,35)" fg:x="142899922964" fg:w="15487979"/><text x="95.0203%" y="255.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets (3,192,679,625 samples, 2.12%)</title><rect x="92.6708%" y="373" width="2.1174%" height="15" fill="rgb(249,28,3)" fg:x="139734219427" fg:w="3192679625"/><text x="92.9208%" y="383.50">f..</text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl (2,941,428,825 samples, 1.95%)</title><rect x="92.8374%" y="357" width="1.9507%" height="15" fill="rgb(222,56,52)" fg:x="139985470227" fg:w="2941428825"/><text x="93.0874%" y="367.50">f..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (23,833,139 samples, 0.02%)</title><rect x="94.7882%" y="341" width="0.0158%" height="15" fill="rgb(245,217,50)" fg:x="142926899052" fg:w="23833139"/><text x="95.0382%" y="351.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (259,314,231 samples, 0.17%)</title><rect x="94.8749%" y="165" width="0.1720%" height="15" fill="rgb(213,201,24)" fg:x="143057646678" fg:w="259314231"/><text x="95.1249%" y="175.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (259,314,231 samples, 0.17%)</title><rect x="94.8749%" y="149" width="0.1720%" height="15" fill="rgb(248,116,28)" fg:x="143057646678" fg:w="259314231"/><text x="95.1249%" y="159.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (259,314,231 samples, 0.17%)</title><rect x="94.8749%" y="133" width="0.1720%" height="15" fill="rgb(219,72,43)" fg:x="143057646678" fg:w="259314231"/><text x="95.1249%" y="143.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (259,314,231 samples, 0.17%)</title><rect x="94.8749%" y="117" width="0.1720%" height="15" fill="rgb(209,138,14)" fg:x="143057646678" fg:w="259314231"/><text x="95.1249%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (599,758,383 samples, 0.40%)</title><rect x="94.8590%" y="325" width="0.3978%" height="15" fill="rgb(222,18,33)" fg:x="143033659989" fg:w="599758383"/><text x="95.1090%" y="335.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (599,758,383 samples, 0.40%)</title><rect x="94.8590%" y="309" width="0.3978%" height="15" fill="rgb(213,199,7)" fg:x="143033659989" fg:w="599758383"/><text x="95.1090%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (599,758,383 samples, 0.40%)</title><rect x="94.8590%" y="293" width="0.3978%" height="15" fill="rgb(250,110,10)" fg:x="143033659989" fg:w="599758383"/><text x="95.1090%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (599,758,383 samples, 0.40%)</title><rect x="94.8590%" y="277" width="0.3978%" height="15" fill="rgb(248,123,6)" fg:x="143033659989" fg:w="599758383"/><text x="95.1090%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (599,758,383 samples, 0.40%)</title><rect x="94.8590%" y="261" width="0.3978%" height="15" fill="rgb(206,91,31)" fg:x="143033659989" fg:w="599758383"/><text x="95.1090%" y="271.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (583,816,021 samples, 0.39%)</title><rect x="94.8695%" y="245" width="0.3872%" height="15" fill="rgb(211,154,13)" fg:x="143049602351" fg:w="583816021"/><text x="95.1195%" y="255.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (583,816,021 samples, 0.39%)</title><rect x="94.8695%" y="229" width="0.3872%" height="15" fill="rgb(225,148,7)" fg:x="143049602351" fg:w="583816021"/><text x="95.1195%" y="239.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (575,771,694 samples, 0.38%)</title><rect x="94.8749%" y="213" width="0.3818%" height="15" fill="rgb(220,160,43)" fg:x="143057646678" fg:w="575771694"/><text x="95.1249%" y="223.50"></text></g><g><title>core::str::pattern::Searcher::next_match (575,771,694 samples, 0.38%)</title><rect x="94.8749%" y="197" width="0.3818%" height="15" fill="rgb(213,52,39)" fg:x="143057646678" fg:w="575771694"/><text x="95.1249%" y="207.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (575,771,694 samples, 0.38%)</title><rect x="94.8749%" y="181" width="0.3818%" height="15" fill="rgb(243,137,7)" fg:x="143057646678" fg:w="575771694"/><text x="95.1249%" y="191.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (316,457,463 samples, 0.21%)</title><rect x="95.0469%" y="165" width="0.2099%" height="15" fill="rgb(230,79,13)" fg:x="143316960909" fg:w="316457463"/><text x="95.2969%" y="175.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (316,457,463 samples, 0.21%)</title><rect x="95.0469%" y="149" width="0.2099%" height="15" fill="rgb(247,105,23)" fg:x="143316960909" fg:w="316457463"/><text x="95.2969%" y="159.50"></text></g><g><title>core::str::validations::next_code_point (316,457,463 samples, 0.21%)</title><rect x="95.0469%" y="133" width="0.2099%" height="15" fill="rgb(223,179,41)" fg:x="143316960909" fg:w="316457463"/><text x="95.2969%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,936,285 samples, 0.01%)</title><rect x="95.2462%" y="117" width="0.0106%" height="15" fill="rgb(218,9,34)" fg:x="143617482087" fg:w="15936285"/><text x="95.4962%" y="127.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (16,146,317 samples, 0.01%)</title><rect x="95.2594%" y="309" width="0.0107%" height="15" fill="rgb(222,106,8)" fg:x="143637450933" fg:w="16146317"/><text x="95.5094%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (24,187,577 samples, 0.02%)</title><rect x="95.3403%" y="245" width="0.0160%" height="15" fill="rgb(211,220,0)" fg:x="143759454959" fg:w="24187577"/><text x="95.5903%" y="255.50"></text></g><g><title>core::num::dec2flt::decimal::Decimal::try_fast_path (61,724,960 samples, 0.04%)</title><rect x="95.3231%" y="261" width="0.0409%" height="15" fill="rgb(229,52,16)" fg:x="143733468041" fg:w="61724960"/><text x="95.5731%" y="271.50"></text></g><g><title>core::num::dec2flt::lemire::compute_float (15,997,917 samples, 0.01%)</title><rect x="95.3640%" y="261" width="0.0106%" height="15" fill="rgb(212,155,18)" fg:x="143795193001" fg:w="15997917"/><text x="95.6140%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::parse_scientific (19,857,911 samples, 0.01%)</title><rect x="95.4222%" y="229" width="0.0132%" height="15" fill="rgb(242,21,14)" fg:x="143882961383" fg:w="19857911"/><text x="95.6722%" y="239.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (16,018,984 samples, 0.01%)</title><rect x="95.4885%" y="197" width="0.0106%" height="15" fill="rgb(222,19,48)" fg:x="143982836276" fg:w="16018984"/><text x="95.7385%" y="207.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (16,069,544 samples, 0.01%)</title><rect x="95.4991%" y="197" width="0.0107%" height="15" fill="rgb(232,45,27)" fg:x="143998855260" fg:w="16069544"/><text x="95.7491%" y="207.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (90,588,065 samples, 0.06%)</title><rect x="95.4752%" y="213" width="0.0601%" height="15" fill="rgb(249,103,42)" fg:x="143962817360" fg:w="90588065"/><text x="95.7252%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (38,480,621 samples, 0.03%)</title><rect x="95.5097%" y="197" width="0.0255%" height="15" fill="rgb(246,81,33)" fg:x="144014924804" fg:w="38480621"/><text x="95.7597%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (16,171,280 samples, 0.01%)</title><rect x="95.5567%" y="197" width="0.0107%" height="15" fill="rgb(252,33,42)" fg:x="144085676001" fg:w="16171280"/><text x="95.8067%" y="207.50"></text></g><g><title>core::num::dec2flt::common::is_8digits (52,224,321 samples, 0.03%)</title><rect x="95.5460%" y="213" width="0.0346%" height="15" fill="rgb(209,212,41)" fg:x="144069625808" fg:w="52224321"/><text x="95.7960%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (20,002,848 samples, 0.01%)</title><rect x="95.5674%" y="197" width="0.0133%" height="15" fill="rgb(207,154,6)" fg:x="144101847281" fg:w="20002848"/><text x="95.8174%" y="207.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (259,272,287 samples, 0.17%)</title><rect x="95.4354%" y="229" width="0.1719%" height="15" fill="rgb(223,64,47)" fg:x="143902819294" fg:w="259272287"/><text x="95.6854%" y="239.50"></text></g><g><title>core::num::dec2flt::parse::parse_8digits (40,241,452 samples, 0.03%)</title><rect x="95.5807%" y="213" width="0.0267%" height="15" fill="rgb(211,161,38)" fg:x="144121850129" fg:w="40241452"/><text x="95.8307%" y="223.50"></text></g><g><title>&lt;f64 as num_traits::Num&gt;::from_str_radix (548,955,902 samples, 0.36%)</title><rect x="95.2567%" y="325" width="0.3641%" height="15" fill="rgb(219,138,40)" fg:x="143633418372" fg:w="548955902"/><text x="95.5067%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (528,777,024 samples, 0.35%)</title><rect x="95.2701%" y="309" width="0.3507%" height="15" fill="rgb(241,228,46)" fg:x="143653597250" fg:w="528777024"/><text x="95.5201%" y="319.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (528,777,024 samples, 0.35%)</title><rect x="95.2701%" y="293" width="0.3507%" height="15" fill="rgb(223,209,38)" fg:x="143653597250" fg:w="528777024"/><text x="95.5201%" y="303.50"></text></g><g><title>core::num::dec2flt::dec2flt (512,490,070 samples, 0.34%)</title><rect x="95.2809%" y="277" width="0.3399%" height="15" fill="rgb(236,164,45)" fg:x="143669884204" fg:w="512490070"/><text x="95.5309%" y="287.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (371,183,356 samples, 0.25%)</title><rect x="95.3746%" y="261" width="0.2462%" height="15" fill="rgb(231,15,5)" fg:x="143811190918" fg:w="371183356"/><text x="95.6246%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (335,285,718 samples, 0.22%)</title><rect x="95.3984%" y="245" width="0.2224%" height="15" fill="rgb(252,35,15)" fg:x="143847088556" fg:w="335285718"/><text x="95.6484%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (20,282,693 samples, 0.01%)</title><rect x="95.6073%" y="229" width="0.0135%" height="15" fill="rgb(248,181,18)" fg:x="144162091581" fg:w="20282693"/><text x="95.8573%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (103,836,257 samples, 0.07%)</title><rect x="95.6208%" y="245" width="0.0689%" height="15" fill="rgb(233,39,42)" fg:x="144182374274" fg:w="103836257"/><text x="95.8708%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (103,836,257 samples, 0.07%)</title><rect x="95.6208%" y="229" width="0.0689%" height="15" fill="rgb(238,110,33)" fg:x="144182374274" fg:w="103836257"/><text x="95.8708%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (103,836,257 samples, 0.07%)</title><rect x="95.6208%" y="213" width="0.0689%" height="15" fill="rgb(233,195,10)" fg:x="144182374274" fg:w="103836257"/><text x="95.8708%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (103,836,257 samples, 0.07%)</title><rect x="95.6208%" y="197" width="0.0689%" height="15" fill="rgb(254,105,3)" fg:x="144182374274" fg:w="103836257"/><text x="95.8708%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (79,887,097 samples, 0.05%)</title><rect x="95.6367%" y="181" width="0.0530%" height="15" fill="rgb(221,225,9)" fg:x="144206323434" fg:w="79887097"/><text x="95.8867%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (79,887,097 samples, 0.05%)</title><rect x="95.6367%" y="165" width="0.0530%" height="15" fill="rgb(224,227,45)" fg:x="144206323434" fg:w="79887097"/><text x="95.8867%" y="175.50"></text></g><g><title>alloc::alloc::alloc (79,887,097 samples, 0.05%)</title><rect x="95.6367%" y="149" width="0.0530%" height="15" fill="rgb(229,198,43)" fg:x="144206323434" fg:w="79887097"/><text x="95.8867%" y="159.50"></text></g><g><title>malloc (63,863,541 samples, 0.04%)</title><rect x="95.6473%" y="133" width="0.0424%" height="15" fill="rgb(206,209,35)" fg:x="144222346990" fg:w="63863541"/><text x="95.8973%" y="143.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (119,844,440 samples, 0.08%)</title><rect x="95.6208%" y="325" width="0.0795%" height="15" fill="rgb(245,195,53)" fg:x="144182374274" fg:w="119844440"/><text x="95.8708%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (119,844,440 samples, 0.08%)</title><rect x="95.6208%" y="309" width="0.0795%" height="15" fill="rgb(240,92,26)" fg:x="144182374274" fg:w="119844440"/><text x="95.8708%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (119,844,440 samples, 0.08%)</title><rect x="95.6208%" y="293" width="0.0795%" height="15" fill="rgb(207,40,23)" fg:x="144182374274" fg:w="119844440"/><text x="95.8708%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (119,844,440 samples, 0.08%)</title><rect x="95.6208%" y="277" width="0.0795%" height="15" fill="rgb(223,111,35)" fg:x="144182374274" fg:w="119844440"/><text x="95.8708%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (119,844,440 samples, 0.08%)</title><rect x="95.6208%" y="261" width="0.0795%" height="15" fill="rgb(229,147,28)" fg:x="144182374274" fg:w="119844440"/><text x="95.8708%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (16,008,183 samples, 0.01%)</title><rect x="95.6897%" y="245" width="0.0106%" height="15" fill="rgb(211,29,28)" fg:x="144286210531" fg:w="16008183"/><text x="95.9397%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16,008,183 samples, 0.01%)</title><rect x="95.6897%" y="229" width="0.0106%" height="15" fill="rgb(228,72,33)" fg:x="144286210531" fg:w="16008183"/><text x="95.9397%" y="239.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (115,858,122 samples, 0.08%)</title><rect x="95.7003%" y="325" width="0.0768%" height="15" fill="rgb(205,214,31)" fg:x="144302218714" fg:w="115858122"/><text x="95.9503%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (115,858,122 samples, 0.08%)</title><rect x="95.7003%" y="309" width="0.0768%" height="15" fill="rgb(224,111,15)" fg:x="144302218714" fg:w="115858122"/><text x="95.9503%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (115,858,122 samples, 0.08%)</title><rect x="95.7003%" y="293" width="0.0768%" height="15" fill="rgb(253,21,26)" fg:x="144302218714" fg:w="115858122"/><text x="95.9503%" y="303.50"></text></g><g><title>cfree (100,770,925 samples, 0.07%)</title><rect x="95.7931%" y="293" width="0.0668%" height="15" fill="rgb(245,139,43)" fg:x="144442169910" fg:w="100770925"/><text x="96.0431%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or (151,905,833 samples, 0.10%)</title><rect x="95.7771%" y="325" width="0.1007%" height="15" fill="rgb(252,170,7)" fg:x="144418076836" fg:w="151905833"/><text x="96.0271%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;f64,matrix_market_rs::MtxError&gt;&gt; (143,882,148 samples, 0.10%)</title><rect x="95.7824%" y="309" width="0.0954%" height="15" fill="rgb(231,118,14)" fg:x="144426100521" fg:w="143882148"/><text x="96.0324%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;matrix_market_rs::MtxError&gt; (27,041,834 samples, 0.02%)</title><rect x="95.8599%" y="293" width="0.0179%" height="15" fill="rgb(238,83,0)" fg:x="144542940835" fg:w="27041834"/><text x="96.1099%" y="303.50"></text></g><g><title>matrix_market_rs::parse_coords_val (1,634,476,784 samples, 1.08%)</title><rect x="94.8040%" y="341" width="1.0840%" height="15" fill="rgb(221,39,39)" fg:x="142950732191" fg:w="1634476784"/><text x="95.0540%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_whitespace (15,226,306 samples, 0.01%)</title><rect x="95.8778%" y="325" width="0.0101%" height="15" fill="rgb(222,119,46)" fg:x="144569982669" fg:w="15226306"/><text x="96.1278%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (15,226,306 samples, 0.01%)</title><rect x="95.8778%" y="309" width="0.0101%" height="15" fill="rgb(222,165,49)" fg:x="144569982669" fg:w="15226306"/><text x="96.1278%" y="319.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (15,226,306 samples, 0.01%)</title><rect x="95.8778%" y="293" width="0.0101%" height="15" fill="rgb(219,113,52)" fg:x="144569982669" fg:w="15226306"/><text x="96.1278%" y="303.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (15,226,306 samples, 0.01%)</title><rect x="95.8778%" y="277" width="0.0101%" height="15" fill="rgb(214,7,15)" fg:x="144569982669" fg:w="15226306"/><text x="96.1278%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (15,226,306 samples, 0.01%)</title><rect x="95.8778%" y="261" width="0.0101%" height="15" fill="rgb(235,32,4)" fg:x="144569982669" fg:w="15226306"/><text x="96.1278%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (15,226,306 samples, 0.01%)</title><rect x="95.8778%" y="245" width="0.0101%" height="15" fill="rgb(238,90,54)" fg:x="144569982669" fg:w="15226306"/><text x="96.1278%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (15,226,306 samples, 0.01%)</title><rect x="95.8778%" y="229" width="0.0101%" height="15" fill="rgb(213,208,19)" fg:x="144569982669" fg:w="15226306"/><text x="96.1278%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (15,226,306 samples, 0.01%)</title><rect x="95.8778%" y="213" width="0.0101%" height="15" fill="rgb(233,156,4)" fg:x="144569982669" fg:w="15226306"/><text x="96.1278%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (15,226,306 samples, 0.01%)</title><rect x="95.8778%" y="197" width="0.0101%" height="15" fill="rgb(207,194,5)" fg:x="144569982669" fg:w="15226306"/><text x="96.1278%" y="207.50"></text></g><g><title>core::str::converts::from_utf8 (143,637,466 samples, 0.10%)</title><rect x="95.9223%" y="309" width="0.0953%" height="15" fill="rgb(206,111,30)" fg:x="144637023888" fg:w="143637466"/><text x="96.1723%" y="319.50"></text></g><g><title>core::str::validations::run_utf8_validation (127,439,313 samples, 0.08%)</title><rect x="95.9331%" y="293" width="0.0845%" height="15" fill="rgb(243,70,54)" fg:x="144653222041" fg:w="127439313"/><text x="96.1831%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (31,855,715 samples, 0.02%)</title><rect x="96.0467%" y="277" width="0.0211%" height="15" fill="rgb(242,28,8)" fg:x="144824534707" fg:w="31855715"/><text x="96.2967%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (31,855,715 samples, 0.02%)</title><rect x="96.0467%" y="261" width="0.0211%" height="15" fill="rgb(219,106,18)" fg:x="144824534707" fg:w="31855715"/><text x="96.2967%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (31,855,715 samples, 0.02%)</title><rect x="96.0467%" y="245" width="0.0211%" height="15" fill="rgb(244,222,10)" fg:x="144824534707" fg:w="31855715"/><text x="96.2967%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23,749,021 samples, 0.02%)</title><rect x="96.0520%" y="229" width="0.0158%" height="15" fill="rgb(236,179,52)" fg:x="144832641401" fg:w="23749021"/><text x="96.3020%" y="239.50"></text></g><g><title>[libc.so.6] (23,749,021 samples, 0.02%)</title><rect x="96.0520%" y="213" width="0.0158%" height="15" fill="rgb(213,23,39)" fg:x="144832641401" fg:w="23749021"/><text x="96.3020%" y="223.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (23,875,932 samples, 0.02%)</title><rect x="96.1129%" y="229" width="0.0158%" height="15" fill="rgb(238,48,10)" fg:x="144924427036" fg:w="23875932"/><text x="96.3629%" y="239.50"></text></g><g><title>matrix_market_rs::MtxData&lt;T,_&gt;::from_file (2,109,216,398 samples, 1.40%)</title><rect x="94.7882%" y="373" width="1.3988%" height="15" fill="rgb(251,196,23)" fg:x="142926899052" fg:w="2109216398"/><text x="95.0382%" y="383.50"></text></g><g><title>matrix_market_rs::parse_sparse_coo (2,109,216,398 samples, 1.40%)</title><rect x="94.7882%" y="357" width="1.3988%" height="15" fill="rgb(250,152,24)" fg:x="142926899052" fg:w="2109216398"/><text x="95.0382%" y="367.50"></text></g><g><title>std::io::BufRead::read_line (450,906,475 samples, 0.30%)</title><rect x="95.8879%" y="341" width="0.2990%" height="15" fill="rgb(209,150,17)" fg:x="144585208975" fg:w="450906475"/><text x="96.1379%" y="351.50"></text></g><g><title>std::io::append_to_string (446,932,779 samples, 0.30%)</title><rect x="95.8906%" y="325" width="0.2964%" height="15" fill="rgb(234,202,34)" fg:x="144589182671" fg:w="446932779"/><text x="96.1406%" y="335.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (255,454,096 samples, 0.17%)</title><rect x="96.0176%" y="309" width="0.1694%" height="15" fill="rgb(253,148,53)" fg:x="144780661354" fg:w="255454096"/><text x="96.2676%" y="319.50"></text></g><g><title>std::io::read_until (255,454,096 samples, 0.17%)</title><rect x="96.0176%" y="293" width="0.1694%" height="15" fill="rgb(218,129,16)" fg:x="144780661354" fg:w="255454096"/><text x="96.2676%" y="303.50"></text></g><g><title>core::slice::memchr::memchr (175,755,384 samples, 0.12%)</title><rect x="96.0704%" y="277" width="0.1166%" height="15" fill="rgb(216,85,19)" fg:x="144860360066" fg:w="175755384"/><text x="96.3204%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_aligned (167,681,390 samples, 0.11%)</title><rect x="96.0758%" y="261" width="0.1112%" height="15" fill="rgb(235,228,7)" fg:x="144868434060" fg:w="167681390"/><text x="96.3258%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (163,630,370 samples, 0.11%)</title><rect x="96.0785%" y="245" width="0.1085%" height="15" fill="rgb(245,175,0)" fg:x="144872485080" fg:w="163630370"/><text x="96.3285%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_naive (87,812,482 samples, 0.06%)</title><rect x="96.1287%" y="229" width="0.0582%" height="15" fill="rgb(208,168,36)" fg:x="144948302968" fg:w="87812482"/><text x="96.3787%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (88,389,289 samples, 0.06%)</title><rect x="96.2109%" y="357" width="0.0586%" height="15" fill="rgb(246,171,24)" fg:x="145072231773" fg:w="88389289"/><text x="96.4609%" y="367.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market (5,577,768,706 samples, 3.70%)</title><rect x="92.6039%" y="389" width="3.6991%" height="15" fill="rgb(215,142,24)" fg:x="139633300800" fg:w="5577768706"/><text x="92.8539%" y="399.50">par_..</text></g><g><title>par_matvec::test_utils::mtx_data_to_nalgebra_coo (174,954,056 samples, 0.12%)</title><rect x="96.1870%" y="373" width="0.1160%" height="15" fill="rgb(250,187,7)" fg:x="145036115450" fg:w="174954056"/><text x="96.4370%" y="383.50"></text></g><g><title>nalgebra_sparse::coo::CooMatrix&lt;T&gt;::try_from_triplets (50,448,444 samples, 0.03%)</title><rect x="96.2696%" y="357" width="0.0335%" height="15" fill="rgb(228,66,33)" fg:x="145160621062" fg:w="50448444"/><text x="96.5196%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (50,448,444 samples, 0.03%)</title><rect x="96.2696%" y="341" width="0.0335%" height="15" fill="rgb(234,215,21)" fg:x="145160621062" fg:w="50448444"/><text x="96.5196%" y="351.50"></text></g><g><title>nalgebra_sparse::coo::CooMatrix&lt;T&gt;::try_from_triplets::_{{closure}} (17,100,402 samples, 0.01%)</title><rect x="96.2917%" y="325" width="0.0113%" height="15" fill="rgb(222,191,20)" fg:x="145193969104" fg:w="17100402"/><text x="96.5417%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (54,139,556 samples, 0.04%)</title><rect x="96.3318%" y="309" width="0.0359%" height="15" fill="rgb(245,79,54)" fg:x="145254472389" fg:w="54139556"/><text x="96.5818%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (54,139,556 samples, 0.04%)</title><rect x="96.3318%" y="293" width="0.0359%" height="15" fill="rgb(240,10,37)" fg:x="145254472389" fg:w="54139556"/><text x="96.5818%" y="303.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push (110,539,282 samples, 0.07%)</title><rect x="96.3212%" y="341" width="0.0733%" height="15" fill="rgb(214,192,32)" fg:x="145238431046" fg:w="110539282"/><text x="96.5712%" y="351.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push_or_else (110,539,282 samples, 0.07%)</title><rect x="96.3212%" y="325" width="0.0733%" height="15" fill="rgb(209,36,54)" fg:x="145238431046" fg:w="110539282"/><text x="96.5712%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (40,358,383 samples, 0.03%)</title><rect x="96.3677%" y="309" width="0.0268%" height="15" fill="rgb(220,10,11)" fg:x="145308611945" fg:w="40358383"/><text x="96.6177%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (40,358,383 samples, 0.03%)</title><rect x="96.3677%" y="293" width="0.0268%" height="15" fill="rgb(221,106,17)" fg:x="145308611945" fg:w="40358383"/><text x="96.6177%" y="303.50"></text></g><g><title>dyn_stack::MemStack::make_with (4,067,405,565 samples, 2.70%)</title><rect x="96.3945%" y="341" width="2.6975%" height="15" fill="rgb(251,142,44)" fg:x="145348970328" fg:w="4067405565"/><text x="96.6445%" y="351.50">dy..</text></g><g><title>dyn_stack::MemStack::make_aligned_with (4,067,405,565 samples, 2.70%)</title><rect x="96.3945%" y="325" width="2.6975%" height="15" fill="rgb(238,13,15)" fg:x="145348970328" fg:w="4067405565"/><text x="96.6445%" y="335.50">dy..</text></g><g><title>dyn_stack::init_array_with (4,067,405,565 samples, 2.70%)</title><rect x="96.3945%" y="309" width="2.6975%" height="15" fill="rgb(208,107,27)" fg:x="145348970328" fg:w="4067405565"/><text x="96.6445%" y="319.50">dy..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4,067,405,565 samples, 2.70%)</title><rect x="96.3945%" y="293" width="2.6975%" height="15" fill="rgb(205,136,37)" fg:x="145348970328" fg:w="4067405565"/><text x="96.6445%" y="303.50">co..</text></g><g><title>core::ptr::write (4,067,405,565 samples, 2.70%)</title><rect x="96.3945%" y="277" width="2.6975%" height="15" fill="rgb(250,205,27)" fg:x="145348970328" fg:w="4067405565"/><text x="96.6445%" y="287.50">co..</text></g><g><title>[libc.so.6] (4,067,405,565 samples, 2.70%)</title><rect x="96.3945%" y="261" width="2.6975%" height="15" fill="rgb(210,80,43)" fg:x="145348970328" fg:w="4067405565"/><text x="96.6445%" y="271.50">[l..</text></g><g><title>[libc.so.6] (42,435,510 samples, 0.03%)</title><rect x="99.1020%" y="85" width="0.0281%" height="15" fill="rgb(247,160,36)" fg:x="149431472611" fg:w="42435510"/><text x="99.3520%" y="95.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::BlockScratch&lt;T&gt;::new (46,793,542 samples, 0.03%)</title><rect x="99.1020%" y="229" width="0.0310%" height="15" fill="rgb(234,13,49)" fg:x="149431472611" fg:w="46793542"/><text x="99.3520%" y="239.50"></text></g><g><title>alloc::vec::from_elem (46,793,542 samples, 0.03%)</title><rect x="99.1020%" y="213" width="0.0310%" height="15" fill="rgb(234,122,0)" fg:x="149431472611" fg:w="46793542"/><text x="99.3520%" y="223.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (46,793,542 samples, 0.03%)</title><rect x="99.1020%" y="197" width="0.0310%" height="15" fill="rgb(207,146,38)" fg:x="149431472611" fg:w="46793542"/><text x="99.3520%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (46,793,542 samples, 0.03%)</title><rect x="99.1020%" y="181" width="0.0310%" height="15" fill="rgb(207,177,25)" fg:x="149431472611" fg:w="46793542"/><text x="99.3520%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (46,793,542 samples, 0.03%)</title><rect x="99.1020%" y="165" width="0.0310%" height="15" fill="rgb(211,178,42)" fg:x="149431472611" fg:w="46793542"/><text x="99.3520%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (46,793,542 samples, 0.03%)</title><rect x="99.1020%" y="149" width="0.0310%" height="15" fill="rgb(230,69,54)" fg:x="149431472611" fg:w="46793542"/><text x="99.3520%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (46,793,542 samples, 0.03%)</title><rect x="99.1020%" y="133" width="0.0310%" height="15" fill="rgb(214,135,41)" fg:x="149431472611" fg:w="46793542"/><text x="99.3520%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46,793,542 samples, 0.03%)</title><rect x="99.1020%" y="117" width="0.0310%" height="15" fill="rgb(237,67,25)" fg:x="149431472611" fg:w="46793542"/><text x="99.3520%" y="127.50"></text></g><g><title>alloc::alloc::alloc_zeroed (46,793,542 samples, 0.03%)</title><rect x="99.1020%" y="101" width="0.0310%" height="15" fill="rgb(222,189,50)" fg:x="149431472611" fg:w="46793542"/><text x="99.3520%" y="111.50"></text></g><g><title>std::panic::catch_unwind (9,864,936,006 samples, 6.54%)</title><rect x="92.6039%" y="517" width="6.5424%" height="15" fill="rgb(245,148,34)" fg:x="139633300800" fg:w="9864936006"/><text x="92.8539%" y="527.50">std::pani..</text></g><g><title>std::panicking::try (9,864,936,006 samples, 6.54%)</title><rect x="92.6039%" y="501" width="6.5424%" height="15" fill="rgb(222,29,6)" fg:x="139633300800" fg:w="9864936006"/><text x="92.8539%" y="511.50">std::pani..</text></g><g><title>std::panicking::try::do_call (9,864,936,006 samples, 6.54%)</title><rect x="92.6039%" y="485" width="6.5424%" height="15" fill="rgb(221,189,43)" fg:x="139633300800" fg:w="9864936006"/><text x="92.8539%" y="495.50">std::pani..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9,864,936,006 samples, 6.54%)</title><rect x="92.6039%" y="469" width="6.5424%" height="15" fill="rgb(207,36,27)" fg:x="139633300800" fg:w="9864936006"/><text x="92.8539%" y="479.50">core::ops..</text></g><g><title>std::rt::lang_start::_{{closure}} (9,864,936,006 samples, 6.54%)</title><rect x="92.6039%" y="453" width="6.5424%" height="15" fill="rgb(217,90,24)" fg:x="139633300800" fg:w="9864936006"/><text x="92.8539%" y="463.50">std::rt::..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (9,864,936,006 samples, 6.54%)</title><rect x="92.6039%" y="437" width="6.5424%" height="15" fill="rgb(224,66,35)" fg:x="139633300800" fg:w="9864936006"/><text x="92.8539%" y="447.50">std::sys:..</text></g><g><title>core::ops::function::FnOnce::call_once (9,864,936,006 samples, 6.54%)</title><rect x="92.6039%" y="421" width="6.5424%" height="15" fill="rgb(221,13,50)" fg:x="139633300800" fg:w="9864936006"/><text x="92.8539%" y="431.50">core::ops..</text></g><g><title>profile_spmv::main (9,864,936,006 samples, 6.54%)</title><rect x="92.6039%" y="405" width="6.5424%" height="15" fill="rgb(236,68,49)" fg:x="139633300800" fg:w="9864936006"/><text x="92.8539%" y="415.50">profile_s..</text></g><g><title>profile_spmv::profile_sparse_dense_buffer (4,287,167,300 samples, 2.84%)</title><rect x="96.3030%" y="389" width="2.8432%" height="15" fill="rgb(229,146,28)" fg:x="145211069506" fg:w="4287167300"/><text x="96.5530%" y="399.50">pr..</text></g><g><title>par_matvec::spmv_drivers::sparse_dense_matmul (4,287,167,300 samples, 2.84%)</title><rect x="96.3030%" y="373" width="2.8432%" height="15" fill="rgb(225,31,38)" fg:x="145211069506" fg:w="4287167300"/><text x="96.5530%" y="383.50">pa..</text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::par_sparse_dense (4,287,167,300 samples, 2.84%)</title><rect x="96.3030%" y="357" width="2.8432%" height="15" fill="rgb(250,208,3)" fg:x="145211069506" fg:w="4287167300"/><text x="96.5530%" y="367.50">pa..</text></g><g><title>std::thread::scoped::scope (74,433,979 samples, 0.05%)</title><rect x="99.0969%" y="341" width="0.0494%" height="15" fill="rgb(246,54,23)" fg:x="149423802827" fg:w="74433979"/><text x="99.3469%" y="351.50"></text></g><g><title>std::panic::catch_unwind (74,433,979 samples, 0.05%)</title><rect x="99.0969%" y="325" width="0.0494%" height="15" fill="rgb(243,76,11)" fg:x="149423802827" fg:w="74433979"/><text x="99.3469%" y="335.50"></text></g><g><title>std::panicking::try (74,433,979 samples, 0.05%)</title><rect x="99.0969%" y="309" width="0.0494%" height="15" fill="rgb(245,21,50)" fg:x="149423802827" fg:w="74433979"/><text x="99.3469%" y="319.50"></text></g><g><title>std::panicking::try::do_call (74,433,979 samples, 0.05%)</title><rect x="99.0969%" y="293" width="0.0494%" height="15" fill="rgb(228,9,43)" fg:x="149423802827" fg:w="74433979"/><text x="99.3469%" y="303.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (74,433,979 samples, 0.05%)</title><rect x="99.0969%" y="277" width="0.0494%" height="15" fill="rgb(208,100,47)" fg:x="149423802827" fg:w="74433979"/><text x="99.3469%" y="287.50"></text></g><g><title>std::thread::scoped::scope::_{{closure}} (74,433,979 samples, 0.05%)</title><rect x="99.0969%" y="261" width="0.0494%" height="15" fill="rgb(232,26,8)" fg:x="149423802827" fg:w="74433979"/><text x="99.3469%" y="271.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::par_sparse_dense::_{{closure}} (74,433,979 samples, 0.05%)</title><rect x="99.0969%" y="245" width="0.0494%" height="15" fill="rgb(216,166,38)" fg:x="149423802827" fg:w="74433979"/><text x="99.3469%" y="255.50"></text></g><g><title>std::thread::scoped::Scope::spawn (19,970,653 samples, 0.01%)</title><rect x="99.1330%" y="229" width="0.0132%" height="15" fill="rgb(251,202,51)" fg:x="149478266153" fg:w="19970653"/><text x="99.3830%" y="239.50"></text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (19,970,653 samples, 0.01%)</title><rect x="99.1330%" y="213" width="0.0132%" height="15" fill="rgb(254,216,34)" fg:x="149478266153" fg:w="19970653"/><text x="99.3830%" y="223.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (15,785,017 samples, 0.01%)</title><rect x="99.1358%" y="197" width="0.0105%" height="15" fill="rgb(251,32,27)" fg:x="149482451789" fg:w="15785017"/><text x="99.3858%" y="207.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (15,785,017 samples, 0.01%)</title><rect x="99.1358%" y="181" width="0.0105%" height="15" fill="rgb(208,127,28)" fg:x="149482451789" fg:w="15785017"/><text x="99.3858%" y="191.50"></text></g><g><title>_start (9,865,437,510 samples, 6.54%)</title><rect x="92.6039%" y="661" width="6.5427%" height="15" fill="rgb(224,137,22)" fg:x="139633300800" fg:w="9865437510"/><text x="92.8539%" y="671.50">_start</text></g><g><title>__libc_start_main (9,865,437,510 samples, 6.54%)</title><rect x="92.6039%" y="645" width="6.5427%" height="15" fill="rgb(254,70,32)" fg:x="139633300800" fg:w="9865437510"/><text x="92.8539%" y="655.50">__libc_st..</text></g><g><title>[libc.so.6] (9,865,437,510 samples, 6.54%)</title><rect x="92.6039%" y="629" width="6.5427%" height="15" fill="rgb(229,75,37)" fg:x="139633300800" fg:w="9865437510"/><text x="92.8539%" y="639.50">[libc.so...</text></g><g><title>main (9,865,437,510 samples, 6.54%)</title><rect x="92.6039%" y="613" width="6.5427%" height="15" fill="rgb(252,64,23)" fg:x="139633300800" fg:w="9865437510"/><text x="92.8539%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (9,865,437,510 samples, 6.54%)</title><rect x="92.6039%" y="597" width="6.5427%" height="15" fill="rgb(232,162,48)" fg:x="139633300800" fg:w="9865437510"/><text x="92.8539%" y="607.50">std::rt::..</text></g><g><title>std::panic::catch_unwind (9,865,437,510 samples, 6.54%)</title><rect x="92.6039%" y="581" width="6.5427%" height="15" fill="rgb(246,160,12)" fg:x="139633300800" fg:w="9865437510"/><text x="92.8539%" y="591.50">std::pani..</text></g><g><title>std::panicking::try (9,865,437,510 samples, 6.54%)</title><rect x="92.6039%" y="565" width="6.5427%" height="15" fill="rgb(247,166,0)" fg:x="139633300800" fg:w="9865437510"/><text x="92.8539%" y="575.50">std::pani..</text></g><g><title>std::panicking::try::do_call (9,865,437,510 samples, 6.54%)</title><rect x="92.6039%" y="549" width="6.5427%" height="15" fill="rgb(249,219,21)" fg:x="139633300800" fg:w="9865437510"/><text x="92.8539%" y="559.50">std::pani..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (9,865,437,510 samples, 6.54%)</title><rect x="92.6039%" y="533" width="6.5427%" height="15" fill="rgb(205,209,3)" fg:x="139633300800" fg:w="9865437510"/><text x="92.8539%" y="543.50">std::rt::..</text></g><g><title>cfree (20,093,899 samples, 0.01%)</title><rect x="99.1531%" y="661" width="0.0133%" height="15" fill="rgb(243,44,1)" fg:x="149508519942" fg:w="20093899"/><text x="99.4031%" y="671.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::pop (15,414,600 samples, 0.01%)</title><rect x="99.2029%" y="661" width="0.0102%" height="15" fill="rgb(206,159,16)" fg:x="149583638277" fg:w="15414600"/><text x="99.4529%" y="671.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push_or_else (20,526,658 samples, 0.01%)</title><rect x="99.2131%" y="661" width="0.0136%" height="15" fill="rgb(244,77,30)" fg:x="149599052877" fg:w="20526658"/><text x="99.4631%" y="671.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::hot_loop (373,233,454 samples, 0.25%)</title><rect x="99.2345%" y="661" width="0.2475%" height="15" fill="rgb(218,69,12)" fg:x="149631361093" fg:w="373233454"/><text x="99.4845%" y="671.50"></text></g><g><title>std::io::append_to_string (27,914,981 samples, 0.02%)</title><rect x="99.4847%" y="661" width="0.0185%" height="15" fill="rgb(212,87,7)" fg:x="150008566296" fg:w="27914981"/><text x="99.7347%" y="671.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (20,020,190 samples, 0.01%)</title><rect x="99.4899%" y="645" width="0.0133%" height="15" fill="rgb(245,114,25)" fg:x="150016461087" fg:w="20020190"/><text x="99.7399%" y="655.50"></text></g><g><title>std::io::read_until (20,020,190 samples, 0.01%)</title><rect x="99.4899%" y="629" width="0.0133%" height="15" fill="rgb(210,61,42)" fg:x="150016461087" fg:w="20020190"/><text x="99.7399%" y="639.50"></text></g><g><title>core::slice::memchr::memchr (20,020,190 samples, 0.01%)</title><rect x="99.4899%" y="613" width="0.0133%" height="15" fill="rgb(211,52,33)" fg:x="150016461087" fg:w="20020190"/><text x="99.7399%" y="623.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (745,145,737 samples, 0.49%)</title><rect x="99.5032%" y="661" width="0.4942%" height="15" fill="rgb(234,58,33)" fg:x="150036481277" fg:w="745145737"/><text x="99.7532%" y="671.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::par_sparse_dense::_{{closure}}::_{{closure}} (745,145,737 samples, 0.49%)</title><rect x="99.5032%" y="645" width="0.4942%" height="15" fill="rgb(220,115,36)" fg:x="150036481277" fg:w="745145737"/><text x="99.7532%" y="655.50"></text></g><g><title>all (150,785,591,265 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(243,153,54)" fg:x="0" fg:w="150785591265"/><text x="0.2500%" y="703.50"></text></g><g><title>profile_spmv (150,785,591,265 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(251,47,18)" fg:x="0" fg:w="150785591265"/><text x="0.2500%" y="687.50">profile_spmv</text></g></svg></svg>