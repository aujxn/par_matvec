<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="159165324396"><g><title>&lt;f64 as num_traits::Num&gt;::from_str_radix (20,033,756 samples, 0.01%)</title><rect x="0.0046%" y="645" width="0.0126%" height="15" fill="rgb(227,0,7)" fg:x="7321824" fg:w="20033756"/><text x="0.2546%" y="655.50"></text></g><g><title>cfree (37,310,032 samples, 0.02%)</title><rect x="0.0295%" y="597" width="0.0234%" height="15" fill="rgb(217,0,24)" fg:x="47029183" fg:w="37310032"/><text x="0.2795%" y="607.50"></text></g><g><title>[libc.so.6] (33,000,373 samples, 0.02%)</title><rect x="0.0323%" y="581" width="0.0207%" height="15" fill="rgb(221,193,54)" fg:x="51338842" fg:w="33000373"/><text x="0.2823%" y="591.50"></text></g><g><title>[libc.so.6] (24,757,410 samples, 0.02%)</title><rect x="0.0374%" y="565" width="0.0156%" height="15" fill="rgb(248,212,6)" fg:x="59581805" fg:w="24757410"/><text x="0.2874%" y="575.50"></text></g><g><title>[libc.so.6] (20,618,264 samples, 0.01%)</title><rect x="0.0400%" y="549" width="0.0130%" height="15" fill="rgb(208,68,35)" fg:x="63720951" fg:w="20618264"/><text x="0.2900%" y="559.50"></text></g><g><title>[libc.so.6] (56,721,149 samples, 0.04%)</title><rect x="0.0225%" y="613" width="0.0356%" height="15" fill="rgb(232,128,0)" fg:x="35859873" fg:w="56721149"/><text x="0.2725%" y="623.50"></text></g><g><title>&lt;Lhs as faer_traits::MulByRef&lt;Rhs&gt;&gt;::mul_by_ref (179,377,450 samples, 0.11%)</title><rect x="0.8349%" y="421" width="0.1127%" height="15" fill="rgb(207,160,47)" fg:x="1328928948" fg:w="179377450"/><text x="1.0849%" y="431.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&gt;::mul (179,377,450 samples, 0.11%)</title><rect x="0.8349%" y="405" width="0.1127%" height="15" fill="rgb(228,23,34)" fg:x="1328928948" fg:w="179377450"/><text x="1.0849%" y="415.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (179,377,450 samples, 0.11%)</title><rect x="0.8349%" y="389" width="0.1127%" height="15" fill="rgb(218,30,26)" fg:x="1328928948" fg:w="179377450"/><text x="1.0849%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (17,622,538 samples, 0.01%)</title><rect x="0.9527%" y="373" width="0.0111%" height="15" fill="rgb(220,122,19)" fg:x="1516432963" fg:w="17622538"/><text x="1.2027%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (161,232,160 samples, 0.10%)</title><rect x="0.9476%" y="421" width="0.1013%" height="15" fill="rgb(250,228,42)" fg:x="1508306398" fg:w="161232160"/><text x="1.1976%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (157,079,319 samples, 0.10%)</title><rect x="0.9502%" y="405" width="0.0987%" height="15" fill="rgb(240,193,28)" fg:x="1512459239" fg:w="157079319"/><text x="1.2002%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next (157,079,319 samples, 0.10%)</title><rect x="0.9502%" y="389" width="0.0987%" height="15" fill="rgb(216,20,37)" fg:x="1512459239" fg:w="157079319"/><text x="1.2002%" y="399.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (135,483,057 samples, 0.09%)</title><rect x="0.9638%" y="373" width="0.0851%" height="15" fill="rgb(206,188,39)" fg:x="1534055501" fg:w="135483057"/><text x="1.2138%" y="383.50"></text></g><g><title>&lt;faer::col::generic::Col&lt;Inner&gt; as core::ops::index::Index&lt;&lt;Rows as faer::ShapeIdx&gt;::Idx&lt;usize&gt;&gt;&gt;::index (76,501,161 samples, 0.05%)</title><rect x="1.0489%" y="421" width="0.0481%" height="15" fill="rgb(217,207,13)" fg:x="1669538558" fg:w="76501161"/><text x="1.2989%" y="431.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::at (69,338,579 samples, 0.04%)</title><rect x="1.0534%" y="405" width="0.0436%" height="15" fill="rgb(231,73,38)" fg:x="1676701140" fg:w="69338579"/><text x="1.3034%" y="415.50"></text></g><g><title>&lt;&amp;&amp;equator::structures::Finalize&lt;E&gt; as equator::traits::Expr&gt;::eval_expr (67,228,546 samples, 0.04%)</title><rect x="1.0548%" y="389" width="0.0422%" height="15" fill="rgb(225,20,46)" fg:x="1678811173" fg:w="67228546"/><text x="1.3048%" y="399.50"></text></g><g><title>&lt;equator::expr::CmpExpr&lt;&amp;equator::spec::by_val::CmpByValWrapper&lt;equator::spec::sized::CmpSizedWrapper&lt;equator::spec::debug::CmpDebugWrapper&lt;C&gt;&gt;&gt;,&amp;Lhs3,&amp;Rhs3&gt; as equator::traits::Expr&gt;::eval_expr (67,228,546 samples, 0.04%)</title><rect x="1.0548%" y="373" width="0.0422%" height="15" fill="rgb(210,31,41)" fg:x="1678811173" fg:w="67228546"/><text x="1.3048%" y="383.50"></text></g><g><title>&lt;equator::Lt as equator::Cmp&lt;Lhs,Rhs&gt;&gt;::test (67,228,546 samples, 0.04%)</title><rect x="1.0548%" y="357" width="0.0422%" height="15" fill="rgb(221,200,47)" fg:x="1678811173" fg:w="67228546"/><text x="1.3048%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (67,228,546 samples, 0.04%)</title><rect x="1.0548%" y="341" width="0.0422%" height="15" fill="rgb(226,26,5)" fg:x="1678811173" fg:w="67228546"/><text x="1.3048%" y="351.50"></text></g><g><title>&lt;faer::col::generic::Col&lt;Inner&gt; as reborrow::ReborrowMut&gt;::rb_mut (148,861,617 samples, 0.09%)</title><rect x="1.0970%" y="421" width="0.0935%" height="15" fill="rgb(249,33,26)" fg:x="1746039719" fg:w="148861617"/><text x="1.3470%" y="431.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::col_range_unchecked (230,146,754 samples, 0.14%)</title><rect x="1.2111%" y="405" width="0.1446%" height="15" fill="rgb(235,183,28)" fg:x="1927608532" fg:w="230146754"/><text x="1.4611%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (58,595,980 samples, 0.04%)</title><rect x="1.3189%" y="389" width="0.0368%" height="15" fill="rgb(221,5,38)" fg:x="2099159306" fg:w="58595980"/><text x="1.5689%" y="399.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::col_range (261,406,152 samples, 0.16%)</title><rect x="1.2086%" y="421" width="0.1642%" height="15" fill="rgb(247,18,42)" fg:x="1923663054" fg:w="261406152"/><text x="1.4586%" y="431.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Ref&lt;I,Rows,Cols&gt;&gt;&gt;::ncols (27,313,920 samples, 0.02%)</title><rect x="1.3557%" y="405" width="0.0172%" height="15" fill="rgb(241,131,45)" fg:x="2157755286" fg:w="27313920"/><text x="1.6057%" y="415.50"></text></g><g><title>&lt;&amp;usize as core::ops::arith::Sub&lt;usize&gt;&gt;::sub (22,832,888,151 samples, 14.35%)</title><rect x="6.0975%" y="405" width="14.3454%" height="15" fill="rgb(249,31,29)" fg:x="9705172474" fg:w="22832888151"/><text x="6.3475%" y="415.50">&lt;&amp;usize as core::ops::..</text></g><g><title>&lt;usize as core::ops::arith::Sub&gt;::sub (1,880,175,971 samples, 1.18%)</title><rect x="19.2617%" y="389" width="1.1813%" height="15" fill="rgb(225,111,53)" fg:x="30657884654" fg:w="1880175971"/><text x="19.5117%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (37,925,536 samples, 0.02%)</title><rect x="20.4429%" y="405" width="0.0238%" height="15" fill="rgb(238,160,17)" fg:x="32538060625" fg:w="37925536"/><text x="20.6929%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (120,317,861 samples, 0.08%)</title><rect x="20.4668%" y="405" width="0.0756%" height="15" fill="rgb(214,148,48)" fg:x="32575986161" fg:w="120317861"/><text x="20.7168%" y="415.50"></text></g><g><title>core::ops::function::FnOnce::call_once (16,086,791 samples, 0.01%)</title><rect x="20.5450%" y="325" width="0.0101%" height="15" fill="rgb(232,36,49)" fg:x="32700501440" fg:w="16086791"/><text x="20.7950%" y="335.50"></text></g><g><title>crossbeam_channel::context::Context::with::CONTEXT::_{{constant}}::_{{closure}} (16,086,791 samples, 0.01%)</title><rect x="20.5450%" y="309" width="0.0101%" height="15" fill="rgb(209,103,24)" fg:x="32700501440" fg:w="16086791"/><text x="20.7950%" y="319.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (16,086,791 samples, 0.01%)</title><rect x="20.5450%" y="293" width="0.0101%" height="15" fill="rgb(229,88,8)" fg:x="32700501440" fg:w="16086791"/><text x="20.7950%" y="303.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::initialize (16,086,791 samples, 0.01%)</title><rect x="20.5450%" y="277" width="0.0101%" height="15" fill="rgb(213,181,19)" fg:x="32700501440" fg:w="16086791"/><text x="20.7950%" y="287.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (23,534,446 samples, 0.01%)</title><rect x="20.5551%" y="277" width="0.0148%" height="15" fill="rgb(254,191,54)" fg:x="32716588231" fg:w="23534446"/><text x="20.8051%" y="287.50"></text></g><g><title>std::thread::park (19,403,922 samples, 0.01%)</title><rect x="20.5577%" y="261" width="0.0122%" height="15" fill="rgb(241,83,37)" fg:x="32720718755" fg:w="19403922"/><text x="20.8077%" y="271.50"></text></g><g><title>std::thread::Thread::park (19,403,922 samples, 0.01%)</title><rect x="20.5577%" y="245" width="0.0122%" height="15" fill="rgb(233,36,39)" fg:x="32720718755" fg:w="19403922"/><text x="20.8077%" y="255.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (19,403,922 samples, 0.01%)</title><rect x="20.5577%" y="229" width="0.0122%" height="15" fill="rgb(226,3,54)" fg:x="32720718755" fg:w="19403922"/><text x="20.8077%" y="239.50"></text></g><g><title>crossbeam_channel::context::Context::with (43,711,853 samples, 0.03%)</title><rect x="20.5450%" y="357" width="0.0275%" height="15" fill="rgb(245,192,40)" fg:x="32700501440" fg:w="43711853"/><text x="20.7950%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (43,711,853 samples, 0.03%)</title><rect x="20.5450%" y="341" width="0.0275%" height="15" fill="rgb(238,167,29)" fg:x="32700501440" fg:w="43711853"/><text x="20.7950%" y="351.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (27,625,062 samples, 0.02%)</title><rect x="20.5551%" y="325" width="0.0174%" height="15" fill="rgb(232,182,51)" fg:x="32716588231" fg:w="27625062"/><text x="20.8051%" y="335.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (27,625,062 samples, 0.02%)</title><rect x="20.5551%" y="309" width="0.0174%" height="15" fill="rgb(231,60,39)" fg:x="32716588231" fg:w="27625062"/><text x="20.8051%" y="319.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::_{{closure}} (27,625,062 samples, 0.02%)</title><rect x="20.5551%" y="293" width="0.0174%" height="15" fill="rgb(208,69,12)" fg:x="32716588231" fg:w="27625062"/><text x="20.8051%" y="303.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (32,538,141 samples, 0.02%)</title><rect x="20.5802%" y="357" width="0.0204%" height="15" fill="rgb(235,93,37)" fg:x="32756562123" fg:w="32538141"/><text x="20.8302%" y="367.50"></text></g><g><title>&lt;crossbeam_channel::channel::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (489,531,697 samples, 0.31%)</title><rect x="20.5424%" y="405" width="0.3076%" height="15" fill="rgb(213,116,39)" fg:x="32696304022" fg:w="489531697"/><text x="20.7924%" y="415.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (489,531,697 samples, 0.31%)</title><rect x="20.5424%" y="389" width="0.3076%" height="15" fill="rgb(222,207,29)" fg:x="32696304022" fg:w="489531697"/><text x="20.7924%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (485,334,279 samples, 0.30%)</title><rect x="20.5450%" y="373" width="0.3049%" height="15" fill="rgb(206,96,30)" fg:x="32700501440" fg:w="485334279"/><text x="20.7950%" y="383.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (396,735,455 samples, 0.25%)</title><rect x="20.6007%" y="357" width="0.2493%" height="15" fill="rgb(218,138,4)" fg:x="32789100264" fg:w="396735455"/><text x="20.8507%" y="367.50"></text></g><g><title>core::hint::spin_loop (392,836,253 samples, 0.25%)</title><rect x="20.6031%" y="341" width="0.2468%" height="15" fill="rgb(250,191,14)" fg:x="32792999466" fg:w="392836253"/><text x="20.8531%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (392,836,253 samples, 0.25%)</title><rect x="20.6031%" y="325" width="0.2468%" height="15" fill="rgb(239,60,40)" fg:x="32792999466" fg:w="392836253"/><text x="20.8531%" y="335.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::read (20,708,114 samples, 0.01%)</title><rect x="20.8633%" y="357" width="0.0130%" height="15" fill="rgb(206,27,48)" fg:x="33207210181" fg:w="20708114"/><text x="21.1133%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (32,151,675 samples, 0.02%)</title><rect x="20.8834%" y="341" width="0.0202%" height="15" fill="rgb(225,35,8)" fg:x="33239120490" fg:w="32151675"/><text x="21.1334%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (32,151,675 samples, 0.02%)</title><rect x="20.8834%" y="325" width="0.0202%" height="15" fill="rgb(250,213,24)" fg:x="33239120490" fg:w="32151675"/><text x="21.1334%" y="335.50"></text></g><g><title>&lt;crossbeam_channel::channel::TryIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (119,093,082 samples, 0.07%)</title><rect x="20.8499%" y="405" width="0.0748%" height="15" fill="rgb(247,123,22)" fg:x="33185835719" fg:w="119093082"/><text x="21.0999%" y="415.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::try_recv (113,179,806 samples, 0.07%)</title><rect x="20.8536%" y="389" width="0.0711%" height="15" fill="rgb(231,138,38)" fg:x="33191748995" fg:w="113179806"/><text x="21.1036%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::try_recv (103,566,183 samples, 0.07%)</title><rect x="20.8597%" y="373" width="0.0651%" height="15" fill="rgb(231,145,46)" fg:x="33201362618" fg:w="103566183"/><text x="21.1097%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (77,010,506 samples, 0.05%)</title><rect x="20.8764%" y="357" width="0.0484%" height="15" fill="rgb(251,118,11)" fg:x="33227918295" fg:w="77010506"/><text x="21.1264%" y="367.50"></text></g><g><title>core::sync::atomic::fence (33,656,636 samples, 0.02%)</title><rect x="20.9036%" y="341" width="0.0211%" height="15" fill="rgb(217,147,25)" fg:x="33271272165" fg:w="33656636"/><text x="21.1536%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (169,363,004 samples, 0.11%)</title><rect x="20.9478%" y="325" width="0.1064%" height="15" fill="rgb(247,81,37)" fg:x="33341666474" fg:w="169363004"/><text x="21.1978%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (169,363,004 samples, 0.11%)</title><rect x="20.9478%" y="309" width="0.1064%" height="15" fill="rgb(209,12,38)" fg:x="33341666474" fg:w="169363004"/><text x="21.1978%" y="319.50"></text></g><g><title>alloc::alloc::realloc (169,363,004 samples, 0.11%)</title><rect x="20.9478%" y="293" width="0.1064%" height="15" fill="rgb(227,1,9)" fg:x="33341666474" fg:w="169363004"/><text x="21.1978%" y="303.50"></text></g><g><title>realloc (167,152,507 samples, 0.11%)</title><rect x="20.9492%" y="277" width="0.1050%" height="15" fill="rgb(248,47,43)" fg:x="33343876971" fg:w="167152507"/><text x="21.1992%" y="287.50"></text></g><g><title>[libc.so.6] (130,768,318 samples, 0.08%)</title><rect x="20.9721%" y="261" width="0.0822%" height="15" fill="rgb(221,10,30)" fg:x="33380261160" fg:w="130768318"/><text x="21.2221%" y="271.50"></text></g><g><title>[libc.so.6] (129,438,396 samples, 0.08%)</title><rect x="20.9729%" y="245" width="0.0813%" height="15" fill="rgb(210,229,1)" fg:x="33381591082" fg:w="129438396"/><text x="21.2229%" y="255.50"></text></g><g><title>[libc.so.6] (64,552,015 samples, 0.04%)</title><rect x="21.0137%" y="229" width="0.0406%" height="15" fill="rgb(222,148,37)" fg:x="33446477463" fg:w="64552015"/><text x="21.2637%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (192,008,182 samples, 0.12%)</title><rect x="20.9436%" y="389" width="0.1206%" height="15" fill="rgb(234,67,33)" fg:x="33334896709" fg:w="192008182"/><text x="21.1936%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (192,008,182 samples, 0.12%)</title><rect x="20.9436%" y="373" width="0.1206%" height="15" fill="rgb(247,98,35)" fg:x="33334896709" fg:w="192008182"/><text x="21.1936%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (192,008,182 samples, 0.12%)</title><rect x="20.9436%" y="357" width="0.1206%" height="15" fill="rgb(247,138,52)" fg:x="33334896709" fg:w="192008182"/><text x="21.1936%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (192,008,182 samples, 0.12%)</title><rect x="20.9436%" y="341" width="0.1206%" height="15" fill="rgb(213,79,30)" fg:x="33334896709" fg:w="192008182"/><text x="21.1936%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (203,183,402 samples, 0.13%)</title><rect x="20.9390%" y="405" width="0.1277%" height="15" fill="rgb(246,177,23)" fg:x="33327644804" fg:w="203183402"/><text x="21.1890%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;par_matvec::sparse_dense_impl::buffer_foreign::Chunk&lt;f64&gt;&gt;&gt; (515,648,978 samples, 0.32%)</title><rect x="21.0667%" y="405" width="0.3240%" height="15" fill="rgb(230,62,27)" fg:x="33530828206" fg:w="515648978"/><text x="21.3167%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (515,648,978 samples, 0.32%)</title><rect x="21.0667%" y="389" width="0.3240%" height="15" fill="rgb(216,154,8)" fg:x="33530828206" fg:w="515648978"/><text x="21.3167%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (515,648,978 samples, 0.32%)</title><rect x="21.0667%" y="373" width="0.3240%" height="15" fill="rgb(244,35,45)" fg:x="33530828206" fg:w="515648978"/><text x="21.3167%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (515,648,978 samples, 0.32%)</title><rect x="21.0667%" y="357" width="0.3240%" height="15" fill="rgb(251,115,12)" fg:x="33530828206" fg:w="515648978"/><text x="21.3167%" y="367.50"></text></g><g><title>cfree (508,657,568 samples, 0.32%)</title><rect x="21.0711%" y="341" width="0.3196%" height="15" fill="rgb(240,54,50)" fg:x="33537819616" fg:w="508657568"/><text x="21.3211%" y="351.50"></text></g><g><title>[libc.so.6] (403,212,361 samples, 0.25%)</title><rect x="21.1373%" y="325" width="0.2533%" height="15" fill="rgb(233,84,52)" fg:x="33643264823" fg:w="403212361"/><text x="21.3873%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::boxed::Box&lt;par_matvec::sparse_dense_impl::buffer_foreign::Chunk&lt;f64&gt;&gt;&gt;&gt; (62,985,322 samples, 0.04%)</title><rect x="21.3906%" y="405" width="0.0396%" height="15" fill="rgb(207,117,47)" fg:x="34046477184" fg:w="62985322"/><text x="21.6406%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62,985,322 samples, 0.04%)</title><rect x="21.3906%" y="389" width="0.0396%" height="15" fill="rgb(249,43,39)" fg:x="34046477184" fg:w="62985322"/><text x="21.6406%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::boxed::Box&lt;par_matvec::sparse_dense_impl::buffer_foreign::Chunk&lt;f64&gt;&gt;,alloc::alloc::Global&gt;&gt; (62,985,322 samples, 0.04%)</title><rect x="21.3906%" y="373" width="0.0396%" height="15" fill="rgb(209,38,44)" fg:x="34046477184" fg:w="62985322"/><text x="21.6406%" y="383.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62,985,322 samples, 0.04%)</title><rect x="21.3906%" y="357" width="0.0396%" height="15" fill="rgb(236,212,23)" fg:x="34046477184" fg:w="62985322"/><text x="21.6406%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::boxed::Box&lt;par_matvec::sparse_dense_impl::buffer_foreign::Chunk&lt;f64&gt;&gt;&gt;&gt; (62,985,322 samples, 0.04%)</title><rect x="21.3906%" y="341" width="0.0396%" height="15" fill="rgb(242,79,21)" fg:x="34046477184" fg:w="62985322"/><text x="21.6406%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62,985,322 samples, 0.04%)</title><rect x="21.3906%" y="325" width="0.0396%" height="15" fill="rgb(211,96,35)" fg:x="34046477184" fg:w="62985322"/><text x="21.6406%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (62,985,322 samples, 0.04%)</title><rect x="21.3906%" y="309" width="0.0396%" height="15" fill="rgb(253,215,40)" fg:x="34046477184" fg:w="62985322"/><text x="21.6406%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (62,985,322 samples, 0.04%)</title><rect x="21.3906%" y="293" width="0.0396%" height="15" fill="rgb(211,81,21)" fg:x="34046477184" fg:w="62985322"/><text x="21.6406%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (62,985,322 samples, 0.04%)</title><rect x="21.3906%" y="277" width="0.0396%" height="15" fill="rgb(208,190,38)" fg:x="34046477184" fg:w="62985322"/><text x="21.6406%" y="287.50"></text></g><g><title>cfree (62,985,322 samples, 0.04%)</title><rect x="21.3906%" y="261" width="0.0396%" height="15" fill="rgb(235,213,38)" fg:x="34046477184" fg:w="62985322"/><text x="21.6406%" y="271.50"></text></g><g><title>[libc.so.6] (46,016,147 samples, 0.03%)</title><rect x="21.4013%" y="245" width="0.0289%" height="15" fill="rgb(237,122,38)" fg:x="34063446359" fg:w="46016147"/><text x="21.6513%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (90,596,107 samples, 0.06%)</title><rect x="21.4610%" y="373" width="0.0569%" height="15" fill="rgb(244,218,35)" fg:x="34158400267" fg:w="90596107"/><text x="21.7110%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (90,596,107 samples, 0.06%)</title><rect x="21.4610%" y="357" width="0.0569%" height="15" fill="rgb(240,68,47)" fg:x="34158400267" fg:w="90596107"/><text x="21.7110%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (202,340,593 samples, 0.13%)</title><rect x="21.5179%" y="373" width="0.1271%" height="15" fill="rgb(210,16,53)" fg:x="34248996374" fg:w="202340593"/><text x="21.7679%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (202,340,593 samples, 0.13%)</title><rect x="21.5179%" y="357" width="0.1271%" height="15" fill="rgb(235,124,12)" fg:x="34248996374" fg:w="202340593"/><text x="21.7679%" y="367.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push (335,558,809 samples, 0.21%)</title><rect x="21.4393%" y="405" width="0.2108%" height="15" fill="rgb(224,169,11)" fg:x="34123911493" fg:w="335558809"/><text x="21.6893%" y="415.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push_or_else (335,558,809 samples, 0.21%)</title><rect x="21.4393%" y="389" width="0.2108%" height="15" fill="rgb(250,166,2)" fg:x="34123911493" fg:w="335558809"/><text x="21.6893%" y="399.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (3,196,111,796 samples, 2.01%)</title><rect x="26.9706%" y="389" width="2.0080%" height="15" fill="rgb(242,216,29)" fg:x="42927885753" fg:w="3196111796"/><text x="27.2206%" y="399.50">&lt;..</text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (3,196,111,796 samples, 2.01%)</title><rect x="26.9706%" y="373" width="2.0080%" height="15" fill="rgb(230,116,27)" fg:x="42927885753" fg:w="3196111796"/><text x="27.2206%" y="383.50">&lt;..</text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (3,196,111,796 samples, 2.01%)</title><rect x="26.9706%" y="357" width="2.0080%" height="15" fill="rgb(228,99,48)" fg:x="42927885753" fg:w="3196111796"/><text x="27.2206%" y="367.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (325,044,525 samples, 0.20%)</title><rect x="28.9787%" y="373" width="0.2042%" height="15" fill="rgb(253,11,6)" fg:x="46123997549" fg:w="325044525"/><text x="29.2287%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (325,044,525 samples, 0.20%)</title><rect x="28.9787%" y="357" width="0.2042%" height="15" fill="rgb(247,143,39)" fg:x="46123997549" fg:w="325044525"/><text x="29.2287%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (181,742,339 samples, 0.11%)</title><rect x="29.0687%" y="341" width="0.1142%" height="15" fill="rgb(236,97,10)" fg:x="46267299735" fg:w="181742339"/><text x="29.3187%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (181,742,339 samples, 0.11%)</title><rect x="29.0687%" y="325" width="0.1142%" height="15" fill="rgb(233,208,19)" fg:x="46267299735" fg:w="181742339"/><text x="29.3187%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (181,742,339 samples, 0.11%)</title><rect x="29.0687%" y="309" width="0.1142%" height="15" fill="rgb(216,164,2)" fg:x="46267299735" fg:w="181742339"/><text x="29.3187%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (181,742,339 samples, 0.11%)</title><rect x="29.0687%" y="293" width="0.1142%" height="15" fill="rgb(220,129,5)" fg:x="46267299735" fg:w="181742339"/><text x="29.3187%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7,340,597,836 samples, 4.61%)</title><rect x="28.9787%" y="389" width="4.6119%" height="15" fill="rgb(242,17,10)" fg:x="46123997549" fg:w="7340597836"/><text x="29.2287%" y="399.50">&lt;allo..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7,015,553,311 samples, 4.41%)</title><rect x="29.1829%" y="373" width="4.4077%" height="15" fill="rgb(242,107,0)" fg:x="46449042074" fg:w="7015553311"/><text x="29.4329%" y="383.50">core:..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7,015,553,311 samples, 4.41%)</title><rect x="29.1829%" y="357" width="4.4077%" height="15" fill="rgb(251,28,31)" fg:x="46449042074" fg:w="7015553311"/><text x="29.4329%" y="367.50">&lt;usiz..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (275,362,963 samples, 0.17%)</title><rect x="33.5906%" y="373" width="0.1730%" height="15" fill="rgb(233,223,10)" fg:x="53464595385" fg:w="275362963"/><text x="33.8406%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (275,362,963 samples, 0.17%)</title><rect x="33.5906%" y="357" width="0.1730%" height="15" fill="rgb(215,21,27)" fg:x="53464595385" fg:w="275362963"/><text x="33.8406%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (267,045,913 samples, 0.17%)</title><rect x="33.5958%" y="341" width="0.1678%" height="15" fill="rgb(232,23,21)" fg:x="53472912435" fg:w="267045913"/><text x="33.8458%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (267,045,913 samples, 0.17%)</title><rect x="33.5958%" y="325" width="0.1678%" height="15" fill="rgb(244,5,23)" fg:x="53472912435" fg:w="267045913"/><text x="33.8458%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (267,045,913 samples, 0.17%)</title><rect x="33.5958%" y="309" width="0.1678%" height="15" fill="rgb(226,81,46)" fg:x="53472912435" fg:w="267045913"/><text x="33.8458%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (267,045,913 samples, 0.17%)</title><rect x="33.5958%" y="293" width="0.1678%" height="15" fill="rgb(247,70,30)" fg:x="53472912435" fg:w="267045913"/><text x="33.8458%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (305,725,836 samples, 0.19%)</title><rect x="33.5906%" y="389" width="0.1921%" height="15" fill="rgb(212,68,19)" fg:x="53464595385" fg:w="305725836"/><text x="33.8406%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (30,362,873 samples, 0.02%)</title><rect x="33.7636%" y="373" width="0.0191%" height="15" fill="rgb(240,187,13)" fg:x="53739958348" fg:w="30362873"/><text x="34.0136%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (30,362,873 samples, 0.02%)</title><rect x="33.7636%" y="357" width="0.0191%" height="15" fill="rgb(223,113,26)" fg:x="53739958348" fg:w="30362873"/><text x="34.0136%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (32,299,528 samples, 0.02%)</title><rect x="34.1068%" y="373" width="0.0203%" height="15" fill="rgb(206,192,2)" fg:x="54286213984" fg:w="32299528"/><text x="34.3568%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (32,299,528 samples, 0.02%)</title><rect x="34.1068%" y="357" width="0.0203%" height="15" fill="rgb(241,108,4)" fg:x="54286213984" fg:w="32299528"/><text x="34.3568%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (32,299,528 samples, 0.02%)</title><rect x="34.1068%" y="341" width="0.0203%" height="15" fill="rgb(247,173,49)" fg:x="54286213984" fg:w="32299528"/><text x="34.3568%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (32,299,528 samples, 0.02%)</title><rect x="34.1068%" y="325" width="0.0203%" height="15" fill="rgb(224,114,35)" fg:x="54286213984" fg:w="32299528"/><text x="34.3568%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (32,299,528 samples, 0.02%)</title><rect x="34.1068%" y="309" width="0.0203%" height="15" fill="rgb(245,159,27)" fg:x="54286213984" fg:w="32299528"/><text x="34.3568%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (32,299,528 samples, 0.02%)</title><rect x="34.1068%" y="293" width="0.0203%" height="15" fill="rgb(245,172,44)" fg:x="54286213984" fg:w="32299528"/><text x="34.3568%" y="303.50"></text></g><g><title>alloc::alloc::realloc (32,299,528 samples, 0.02%)</title><rect x="34.1068%" y="277" width="0.0203%" height="15" fill="rgb(236,23,11)" fg:x="54286213984" fg:w="32299528"/><text x="34.3568%" y="287.50"></text></g><g><title>realloc (32,299,528 samples, 0.02%)</title><rect x="34.1068%" y="261" width="0.0203%" height="15" fill="rgb(205,117,38)" fg:x="54286213984" fg:w="32299528"/><text x="34.3568%" y="271.50"></text></g><g><title>[libc.so.6] (29,589,045 samples, 0.02%)</title><rect x="34.1085%" y="245" width="0.0186%" height="15" fill="rgb(237,72,25)" fg:x="54288924467" fg:w="29589045"/><text x="34.3585%" y="255.50"></text></g><g><title>[libc.so.6] (29,589,045 samples, 0.02%)</title><rect x="34.1085%" y="229" width="0.0186%" height="15" fill="rgb(244,70,9)" fg:x="54288924467" fg:w="29589045"/><text x="34.3585%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (93,300,667 samples, 0.06%)</title><rect x="34.1271%" y="373" width="0.0586%" height="15" fill="rgb(217,125,39)" fg:x="54318513512" fg:w="93300667"/><text x="34.3771%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (93,300,667 samples, 0.06%)</title><rect x="34.1271%" y="357" width="0.0586%" height="15" fill="rgb(235,36,10)" fg:x="54318513512" fg:w="93300667"/><text x="34.3771%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (93,300,667 samples, 0.06%)</title><rect x="34.1271%" y="341" width="0.0586%" height="15" fill="rgb(251,123,47)" fg:x="54318513512" fg:w="93300667"/><text x="34.3771%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (93,300,667 samples, 0.06%)</title><rect x="34.1271%" y="325" width="0.0586%" height="15" fill="rgb(221,13,13)" fg:x="54318513512" fg:w="93300667"/><text x="34.3771%" y="335.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::BlockScratch&lt;T&gt;::add (20,288,193,091 samples, 12.75%)</title><rect x="21.6501%" y="405" width="12.7466%" height="15" fill="rgb(238,131,9)" fg:x="34459470302" fg:w="20288193091"/><text x="21.9001%" y="415.50">par_matvec::sparse_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (977,342,172 samples, 0.61%)</title><rect x="33.7827%" y="389" width="0.6140%" height="15" fill="rgb(211,50,8)" fg:x="53770321221" fg:w="977342172"/><text x="34.0327%" y="399.50"></text></g><g><title>core::ptr::write (335,849,214 samples, 0.21%)</title><rect x="34.1857%" y="373" width="0.2110%" height="15" fill="rgb(245,182,24)" fg:x="54411814179" fg:w="335849214"/><text x="34.4357%" y="383.50"></text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (475,877,875 samples, 0.30%)</title><rect x="35.1966%" y="389" width="0.2990%" height="15" fill="rgb(242,14,37)" fg:x="56020742996" fg:w="475877875"/><text x="35.4466%" y="399.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (475,877,875 samples, 0.30%)</title><rect x="35.1966%" y="373" width="0.2990%" height="15" fill="rgb(246,228,12)" fg:x="56020742996" fg:w="475877875"/><text x="35.4466%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (475,877,875 samples, 0.30%)</title><rect x="35.1966%" y="357" width="0.2990%" height="15" fill="rgb(213,55,15)" fg:x="56020742996" fg:w="475877875"/><text x="35.4466%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (320,049,914 samples, 0.20%)</title><rect x="35.4956%" y="389" width="0.2011%" height="15" fill="rgb(209,9,3)" fg:x="56496620871" fg:w="320049914"/><text x="35.7456%" y="399.50"></text></g><g><title>&lt;&amp;&amp;equator::structures::Finalize&lt;E&gt; as equator::traits::Expr&gt;::eval_expr (256,536,553 samples, 0.16%)</title><rect x="35.6966%" y="357" width="0.1612%" height="15" fill="rgb(230,59,30)" fg:x="56816670785" fg:w="256536553"/><text x="35.9466%" y="367.50"></text></g><g><title>&lt;equator::expr::CmpExpr&lt;&amp;equator::spec::by_val::CmpByValWrapper&lt;equator::spec::sized::CmpSizedWrapper&lt;equator::spec::debug::CmpDebugWrapper&lt;C&gt;&gt;&gt;,&amp;Lhs3,&amp;Rhs3&gt; as equator::traits::Expr&gt;::eval_expr (256,536,553 samples, 0.16%)</title><rect x="35.6966%" y="341" width="0.1612%" height="15" fill="rgb(209,121,21)" fg:x="56816670785" fg:w="256536553"/><text x="35.9466%" y="351.50"></text></g><g><title>&lt;equator::Lt as equator::Cmp&lt;Lhs,Rhs&gt;&gt;::test (256,536,553 samples, 0.16%)</title><rect x="35.6966%" y="325" width="0.1612%" height="15" fill="rgb(220,109,13)" fg:x="56816670785" fg:w="256536553"/><text x="35.9466%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (256,536,553 samples, 0.16%)</title><rect x="35.6966%" y="309" width="0.1612%" height="15" fill="rgb(232,18,1)" fg:x="56816670785" fg:w="256536553"/><text x="35.9466%" y="319.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::BlockScratch&lt;T&gt;::flush_into (2,332,107,026 samples, 1.47%)</title><rect x="34.3967%" y="405" width="1.4652%" height="15" fill="rgb(215,41,42)" fg:x="54747663393" fg:w="2332107026"/><text x="34.6467%" y="415.50"></text></g><g><title>&lt;faer::col::generic::Col&lt;Inner&gt; as core::ops::index::Index&lt;&lt;Rows as faer::ShapeIdx&gt;::Idx&lt;usize&gt;&gt;&gt;::index (263,099,634 samples, 0.17%)</title><rect x="35.6966%" y="389" width="0.1653%" height="15" fill="rgb(224,123,36)" fg:x="56816670785" fg:w="263099634"/><text x="35.9466%" y="399.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::at (263,099,634 samples, 0.17%)</title><rect x="35.6966%" y="373" width="0.1653%" height="15" fill="rgb(240,125,3)" fg:x="56816670785" fg:w="263099634"/><text x="35.9466%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (63,672,765 samples, 0.04%)</title><rect x="35.8684%" y="341" width="0.0400%" height="15" fill="rgb(205,98,50)" fg:x="57090016544" fg:w="63672765"/><text x="36.1184%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (63,672,765 samples, 0.04%)</title><rect x="35.8684%" y="325" width="0.0400%" height="15" fill="rgb(205,185,37)" fg:x="57090016544" fg:w="63672765"/><text x="36.1184%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (63,672,765 samples, 0.04%)</title><rect x="35.8684%" y="309" width="0.0400%" height="15" fill="rgb(238,207,15)" fg:x="57090016544" fg:w="63672765"/><text x="36.1184%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (46,014,293 samples, 0.03%)</title><rect x="35.8795%" y="293" width="0.0289%" height="15" fill="rgb(213,199,42)" fg:x="57107675016" fg:w="46014293"/><text x="36.1295%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (85,071,776 samples, 0.05%)</title><rect x="35.8684%" y="373" width="0.0534%" height="15" fill="rgb(235,201,11)" fg:x="57090016544" fg:w="85071776"/><text x="36.1184%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (85,071,776 samples, 0.05%)</title><rect x="35.8684%" y="357" width="0.0534%" height="15" fill="rgb(207,46,11)" fg:x="57090016544" fg:w="85071776"/><text x="36.1184%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (20,077,203 samples, 0.01%)</title><rect x="35.9092%" y="341" width="0.0126%" height="15" fill="rgb(241,35,35)" fg:x="57155011117" fg:w="20077203"/><text x="36.1592%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (20,077,203 samples, 0.01%)</title><rect x="35.9092%" y="325" width="0.0126%" height="15" fill="rgb(243,32,47)" fg:x="57155011117" fg:w="20077203"/><text x="36.1592%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (20,077,203 samples, 0.01%)</title><rect x="35.9092%" y="309" width="0.0126%" height="15" fill="rgb(247,202,23)" fg:x="57155011117" fg:w="20077203"/><text x="36.1592%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (20,077,203 samples, 0.01%)</title><rect x="35.9092%" y="293" width="0.0126%" height="15" fill="rgb(219,102,11)" fg:x="57155011117" fg:w="20077203"/><text x="36.1592%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20,077,203 samples, 0.01%)</title><rect x="35.9092%" y="277" width="0.0126%" height="15" fill="rgb(243,110,44)" fg:x="57155011117" fg:w="20077203"/><text x="36.1592%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20,077,203 samples, 0.01%)</title><rect x="35.9092%" y="261" width="0.0126%" height="15" fill="rgb(222,74,54)" fg:x="57155011117" fg:w="20077203"/><text x="36.1592%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (20,077,203 samples, 0.01%)</title><rect x="35.9092%" y="245" width="0.0126%" height="15" fill="rgb(216,99,12)" fg:x="57155011117" fg:w="20077203"/><text x="36.1592%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (18,771,369 samples, 0.01%)</title><rect x="35.9100%" y="229" width="0.0118%" height="15" fill="rgb(226,22,26)" fg:x="57156316951" fg:w="18771369"/><text x="36.1600%" y="239.50"></text></g><g><title>core::intrinsics::likely (16,713,165 samples, 0.01%)</title><rect x="35.9291%" y="341" width="0.0105%" height="15" fill="rgb(217,163,10)" fg:x="57186685889" fg:w="16713165"/><text x="36.1791%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (140,052,463 samples, 0.09%)</title><rect x="35.8671%" y="405" width="0.0880%" height="15" fill="rgb(213,25,53)" fg:x="57087920755" fg:w="140052463"/><text x="36.1171%" y="415.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (140,052,463 samples, 0.09%)</title><rect x="35.8671%" y="389" width="0.0880%" height="15" fill="rgb(252,105,26)" fg:x="57087920755" fg:w="140052463"/><text x="36.1171%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (52,884,898 samples, 0.03%)</title><rect x="35.9218%" y="373" width="0.0332%" height="15" fill="rgb(220,39,43)" fg:x="57175088320" fg:w="52884898"/><text x="36.1718%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (49,111,031 samples, 0.03%)</title><rect x="35.9242%" y="357" width="0.0309%" height="15" fill="rgb(229,68,48)" fg:x="57178862187" fg:w="49111031"/><text x="36.1742%" y="367.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::collect_chunks (55,054,968,210 samples, 34.59%)</title><rect x="1.3728%" y="421" width="34.5898%" height="15" fill="rgb(252,8,32)" fg:x="2185069206" fg:w="55054968210"/><text x="1.6228%" y="431.50">par_matvec::sparse_dense_impl::buffer_foreign::collect_c..</text></g><g><title>&lt;Lhs as faer_traits::AddByRef&lt;Rhs&gt;&gt;::add_by_ref (5,590,795,169 samples, 3.51%)</title><rect x="68.2033%" y="405" width="3.5126%" height="15" fill="rgb(223,20,43)" fg:x="108555928093" fg:w="5590795169"/><text x="68.4533%" y="415.50">&lt;Lh..</text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&gt;::add (5,590,795,169 samples, 3.51%)</title><rect x="68.2033%" y="389" width="3.5126%" height="15" fill="rgb(229,81,49)" fg:x="108555928093" fg:w="5590795169"/><text x="68.4533%" y="399.50">&lt;&amp;f..</text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (5,590,795,169 samples, 3.51%)</title><rect x="68.2033%" y="373" width="3.5126%" height="15" fill="rgb(236,28,36)" fg:x="108555928093" fg:w="5590795169"/><text x="68.4533%" y="383.50">&lt;f6..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (602,640,246 samples, 0.38%)</title><rect x="71.7158%" y="405" width="0.3786%" height="15" fill="rgb(249,185,26)" fg:x="114146723262" fg:w="602640246"/><text x="71.9658%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (602,640,246 samples, 0.38%)</title><rect x="71.7158%" y="389" width="0.3786%" height="15" fill="rgb(249,174,33)" fg:x="114146723262" fg:w="602640246"/><text x="71.9658%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (602,640,246 samples, 0.38%)</title><rect x="71.7158%" y="373" width="0.3786%" height="15" fill="rgb(233,201,37)" fg:x="114146723262" fg:w="602640246"/><text x="71.9658%" y="383.50"></text></g><g><title>&lt;&amp;&amp;equator::structures::Finalize&lt;E&gt; as equator::traits::Expr&gt;::eval_expr (45,962,447 samples, 0.03%)</title><rect x="72.0944%" y="373" width="0.0289%" height="15" fill="rgb(221,78,26)" fg:x="114749363508" fg:w="45962447"/><text x="72.3444%" y="383.50"></text></g><g><title>&lt;equator::expr::CmpExpr&lt;&amp;equator::spec::by_val::CmpByValWrapper&lt;equator::spec::sized::CmpSizedWrapper&lt;equator::spec::debug::CmpDebugWrapper&lt;C&gt;&gt;&gt;,&amp;Lhs3,&amp;Rhs3&gt; as equator::traits::Expr&gt;::eval_expr (45,962,447 samples, 0.03%)</title><rect x="72.0944%" y="357" width="0.0289%" height="15" fill="rgb(250,127,30)" fg:x="114749363508" fg:w="45962447"/><text x="72.3444%" y="367.50"></text></g><g><title>&lt;equator::Lt as equator::Cmp&lt;Lhs,Rhs&gt;&gt;::test (45,962,447 samples, 0.03%)</title><rect x="72.0944%" y="341" width="0.0289%" height="15" fill="rgb(230,49,44)" fg:x="114749363508" fg:w="45962447"/><text x="72.3444%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (45,962,447 samples, 0.03%)</title><rect x="72.0944%" y="325" width="0.0289%" height="15" fill="rgb(229,67,23)" fg:x="114749363508" fg:w="45962447"/><text x="72.3444%" y="335.50"></text></g><g><title>&lt;faer::col::generic::Col&lt;Inner&gt; as core::ops::index::Index&lt;&lt;Rows as faer::ShapeIdx&gt;::Idx&lt;usize&gt;&gt;&gt;::index (245,591,476 samples, 0.15%)</title><rect x="72.0944%" y="405" width="0.1543%" height="15" fill="rgb(249,83,47)" fg:x="114749363508" fg:w="245591476"/><text x="72.3444%" y="415.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::at (245,591,476 samples, 0.15%)</title><rect x="72.0944%" y="389" width="0.1543%" height="15" fill="rgb(215,43,3)" fg:x="114749363508" fg:w="245591476"/><text x="72.3444%" y="399.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::at_unchecked (199,629,029 samples, 0.13%)</title><rect x="72.1233%" y="373" width="0.1254%" height="15" fill="rgb(238,154,13)" fg:x="114795325955" fg:w="199629029"/><text x="72.3733%" y="383.50"></text></g><g><title>faer::col::colref::&lt;impl faer::col::generic::Col&lt;faer::col::colref::Ref&lt;T,Rows,RStride&gt;&gt;&gt;::ptr_inbounds_at (199,629,029 samples, 0.13%)</title><rect x="72.1233%" y="357" width="0.1254%" height="15" fill="rgb(219,56,2)" fg:x="114795325955" fg:w="199629029"/><text x="72.3733%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (325,184,024 samples, 0.20%)</title><rect x="72.2487%" y="405" width="0.2043%" height="15" fill="rgb(233,0,4)" fg:x="114994954984" fg:w="325184024"/><text x="72.4987%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (325,184,024 samples, 0.20%)</title><rect x="72.2487%" y="389" width="0.2043%" height="15" fill="rgb(235,30,7)" fg:x="114994954984" fg:w="325184024"/><text x="72.4987%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (248,107,810 samples, 0.16%)</title><rect x="72.2972%" y="373" width="0.1559%" height="15" fill="rgb(250,79,13)" fg:x="115072031198" fg:w="248107810"/><text x="72.5472%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (234,963,046 samples, 0.15%)</title><rect x="75.3730%" y="389" width="0.1476%" height="15" fill="rgb(211,146,34)" fg:x="119967673987" fg:w="234963046"/><text x="75.6230%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (234,963,046 samples, 0.15%)</title><rect x="75.3730%" y="373" width="0.1476%" height="15" fill="rgb(228,22,38)" fg:x="119967673987" fg:w="234963046"/><text x="75.6230%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (234,963,046 samples, 0.15%)</title><rect x="75.3730%" y="357" width="0.1476%" height="15" fill="rgb(235,168,5)" fg:x="119967673987" fg:w="234963046"/><text x="75.6230%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (37,033,216 samples, 0.02%)</title><rect x="75.5206%" y="389" width="0.0233%" height="15" fill="rgb(221,155,16)" fg:x="120202637033" fg:w="37033216"/><text x="75.7706%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (76,449,791 samples, 0.05%)</title><rect x="75.5439%" y="389" width="0.0480%" height="15" fill="rgb(215,215,53)" fg:x="120239670249" fg:w="76449791"/><text x="75.7939%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (76,449,791 samples, 0.05%)</title><rect x="75.5439%" y="373" width="0.0480%" height="15" fill="rgb(223,4,10)" fg:x="120239670249" fg:w="76449791"/><text x="75.7939%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (76,449,791 samples, 0.05%)</title><rect x="75.5439%" y="357" width="0.0480%" height="15" fill="rgb(234,103,6)" fg:x="120239670249" fg:w="76449791"/><text x="75.7939%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (76,449,791 samples, 0.05%)</title><rect x="75.5439%" y="341" width="0.0480%" height="15" fill="rgb(227,97,0)" fg:x="120239670249" fg:w="76449791"/><text x="75.7939%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (76,449,791 samples, 0.05%)</title><rect x="75.5439%" y="325" width="0.0480%" height="15" fill="rgb(234,150,53)" fg:x="120239670249" fg:w="76449791"/><text x="75.7939%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (76,449,791 samples, 0.05%)</title><rect x="75.5439%" y="309" width="0.0480%" height="15" fill="rgb(228,201,54)" fg:x="120239670249" fg:w="76449791"/><text x="75.7939%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (76,449,791 samples, 0.05%)</title><rect x="75.5439%" y="293" width="0.0480%" height="15" fill="rgb(222,22,37)" fg:x="120239670249" fg:w="76449791"/><text x="75.7939%" y="303.50"></text></g><g><title>alloc::alloc::alloc (76,449,791 samples, 0.05%)</title><rect x="75.5439%" y="277" width="0.0480%" height="15" fill="rgb(237,53,32)" fg:x="120239670249" fg:w="76449791"/><text x="75.7939%" y="287.50"></text></g><g><title>malloc (76,449,791 samples, 0.05%)</title><rect x="75.5439%" y="261" width="0.0480%" height="15" fill="rgb(233,25,53)" fg:x="120239670249" fg:w="76449791"/><text x="75.7939%" y="271.50"></text></g><g><title>[libc.so.6] (43,832,607 samples, 0.03%)</title><rect x="75.5644%" y="245" width="0.0275%" height="15" fill="rgb(210,40,34)" fg:x="120272287433" fg:w="43832607"/><text x="75.8144%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (40,752,739 samples, 0.03%)</title><rect x="75.6083%" y="341" width="0.0256%" height="15" fill="rgb(241,220,44)" fg:x="120342247430" fg:w="40752739"/><text x="75.8583%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (40,752,739 samples, 0.03%)</title><rect x="75.6083%" y="325" width="0.0256%" height="15" fill="rgb(235,28,35)" fg:x="120342247430" fg:w="40752739"/><text x="75.8583%" y="335.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (73,748,446 samples, 0.05%)</title><rect x="75.6017%" y="357" width="0.0463%" height="15" fill="rgb(210,56,17)" fg:x="120331719163" fg:w="73748446"/><text x="75.8517%" y="367.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (111,545,589 samples, 0.07%)</title><rect x="75.5945%" y="389" width="0.0701%" height="15" fill="rgb(224,130,29)" fg:x="120320244337" fg:w="111545589"/><text x="75.8445%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (100,070,763 samples, 0.06%)</title><rect x="75.6017%" y="373" width="0.0629%" height="15" fill="rgb(235,212,8)" fg:x="120331719163" fg:w="100070763"/><text x="75.8517%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::write (26,322,317 samples, 0.02%)</title><rect x="75.6481%" y="357" width="0.0165%" height="15" fill="rgb(223,33,50)" fg:x="120405467609" fg:w="26322317"/><text x="75.8981%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (26,322,317 samples, 0.02%)</title><rect x="75.6481%" y="341" width="0.0165%" height="15" fill="rgb(219,149,13)" fg:x="120405467609" fg:w="26322317"/><text x="75.8981%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_or (26,322,317 samples, 0.02%)</title><rect x="75.6481%" y="325" width="0.0165%" height="15" fill="rgb(250,156,29)" fg:x="120405467609" fg:w="26322317"/><text x="75.8981%" y="335.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::Chunk&lt;T&gt;::push (24,075,973,125 samples, 15.13%)</title><rect x="75.6646%" y="389" width="15.1264%" height="15" fill="rgb(216,193,19)" fg:x="120431789926" fg:w="24075973125"/><text x="75.9146%" y="399.50">par_matvec::sparse_dens..</text></g><g><title>__rustc::__rdl_alloc (20,837,003 samples, 0.01%)</title><rect x="90.8100%" y="293" width="0.0131%" height="15" fill="rgb(216,135,14)" fg:x="144537962278" fg:w="20837003"/><text x="91.0600%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20,837,003 samples, 0.01%)</title><rect x="90.8100%" y="277" width="0.0131%" height="15" fill="rgb(241,47,5)" fg:x="144537962278" fg:w="20837003"/><text x="91.0600%" y="287.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (639,791,024 samples, 0.40%)</title><rect x="90.8023%" y="373" width="0.4020%" height="15" fill="rgb(233,42,35)" fg:x="144525723744" fg:w="639791024"/><text x="91.0523%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (627,552,490 samples, 0.39%)</title><rect x="90.8100%" y="357" width="0.3943%" height="15" fill="rgb(231,13,6)" fg:x="144537962278" fg:w="627552490"/><text x="91.0600%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (627,552,490 samples, 0.39%)</title><rect x="90.8100%" y="341" width="0.3943%" height="15" fill="rgb(207,181,40)" fg:x="144537962278" fg:w="627552490"/><text x="91.0600%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (627,552,490 samples, 0.39%)</title><rect x="90.8100%" y="325" width="0.3943%" height="15" fill="rgb(254,173,49)" fg:x="144537962278" fg:w="627552490"/><text x="91.0600%" y="335.50"></text></g><g><title>alloc::alloc::alloc (627,552,490 samples, 0.39%)</title><rect x="90.8100%" y="309" width="0.3943%" height="15" fill="rgb(221,1,38)" fg:x="144537962278" fg:w="627552490"/><text x="91.0600%" y="319.50"></text></g><g><title>malloc (603,360,490 samples, 0.38%)</title><rect x="90.8252%" y="293" width="0.3791%" height="15" fill="rgb(206,124,46)" fg:x="144562154278" fg:w="603360490"/><text x="91.0752%" y="303.50"></text></g><g><title>[libc.so.6] (312,226,192 samples, 0.20%)</title><rect x="91.0081%" y="277" width="0.1962%" height="15" fill="rgb(249,21,11)" fg:x="144853288576" fg:w="312226192"/><text x="91.2581%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (69,066,489 samples, 0.04%)</title><rect x="91.2042%" y="373" width="0.0434%" height="15" fill="rgb(222,201,40)" fg:x="145165514768" fg:w="69066489"/><text x="91.4542%" y="383.50"></text></g><g><title>core::ptr::read (25,691,200 samples, 0.02%)</title><rect x="91.2315%" y="357" width="0.0161%" height="15" fill="rgb(235,61,29)" fg:x="145208890057" fg:w="25691200"/><text x="91.4815%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (236,695,384 samples, 0.15%)</title><rect x="91.3001%" y="357" width="0.1487%" height="15" fill="rgb(219,207,3)" fg:x="145318039773" fg:w="236695384"/><text x="91.5501%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (236,695,384 samples, 0.15%)</title><rect x="91.3001%" y="341" width="0.1487%" height="15" fill="rgb(222,56,46)" fg:x="145318039773" fg:w="236695384"/><text x="91.5501%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (527,616,743 samples, 0.33%)</title><rect x="91.4488%" y="357" width="0.3315%" height="15" fill="rgb(239,76,54)" fg:x="145554735157" fg:w="527616743"/><text x="91.6988%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (527,616,743 samples, 0.33%)</title><rect x="91.4488%" y="341" width="0.3315%" height="15" fill="rgb(231,124,27)" fg:x="145554735157" fg:w="527616743"/><text x="91.6988%" y="351.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (145,981,443,011 samples, 91.72%)</title><rect x="0.0658%" y="581" width="91.7169%" height="15" fill="rgb(249,195,6)" fg:x="104799562" fg:w="145981443011"/><text x="0.3158%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (145,981,443,011 samples, 91.72%)</title><rect x="0.0658%" y="565" width="91.7169%" height="15" fill="rgb(237,174,47)" fg:x="104799562" fg:w="145981443011"/><text x="0.3158%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (145,981,443,011 samples, 91.72%)</title><rect x="0.0658%" y="549" width="91.7169%" height="15" fill="rgb(206,201,31)" fg:x="104799562" fg:w="145981443011"/><text x="0.3158%" y="559.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (145,981,443,011 samples, 91.72%)</title><rect x="0.0658%" y="533" width="91.7169%" height="15" fill="rgb(231,57,52)" fg:x="104799562" fg:w="145981443011"/><text x="0.3158%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (145,981,443,011 samples, 91.72%)</title><rect x="0.0658%" y="517" width="91.7169%" height="15" fill="rgb(248,177,22)" fg:x="104799562" fg:w="145981443011"/><text x="0.3158%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (145,981,443,011 samples, 91.72%)</title><rect x="0.0658%" y="501" width="91.7169%" height="15" fill="rgb(215,211,37)" fg:x="104799562" fg:w="145981443011"/><text x="0.3158%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (145,981,443,011 samples, 91.72%)</title><rect x="0.0658%" y="485" width="91.7169%" height="15" fill="rgb(241,128,51)" fg:x="104799562" fg:w="145981443011"/><text x="0.3158%" y="495.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (145,981,443,011 samples, 91.72%)</title><rect x="0.0658%" y="469" width="91.7169%" height="15" fill="rgb(227,165,31)" fg:x="104799562" fg:w="145981443011"/><text x="0.3158%" y="479.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (145,981,443,011 samples, 91.72%)</title><rect x="0.0658%" y="453" width="91.7169%" height="15" fill="rgb(228,167,24)" fg:x="104799562" fg:w="145981443011"/><text x="0.3158%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::par_sparse_dense::_{{closure}}::_{{closure}} (145,981,443,011 samples, 91.72%)</title><rect x="0.0658%" y="437" width="91.7169%" height="15" fill="rgb(228,143,12)" fg:x="104799562" fg:w="145981443011"/><text x="0.3158%" y="447.50">par_matvec::sparse_dense_impl::buffer_foreign::par_sparse_dense::_{{closure}}::_{{closure}}</text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::hot_loop (88,846,205,157 samples, 55.82%)</title><rect x="35.9626%" y="421" width="55.8201%" height="15" fill="rgb(249,149,8)" fg:x="57240037416" fg:w="88846205157"/><text x="36.2126%" y="431.50">par_matvec::sparse_dense_impl::buffer_foreign::hot_loop</text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::buffer_foreign (30,766,103,565 samples, 19.33%)</title><rect x="72.4531%" y="405" width="19.3297%" height="15" fill="rgb(243,35,44)" fg:x="115320139008" fg:w="30766103565"/><text x="72.7031%" y="415.50">par_matvec::sparse_dense_impl:..</text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::get_fresh_chunk (1,578,479,522 samples, 0.99%)</title><rect x="90.7910%" y="389" width="0.9917%" height="15" fill="rgb(246,89,9)" fg:x="144507763051" fg:w="1578479522"/><text x="91.0410%" y="399.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::pop (851,661,316 samples, 0.54%)</title><rect x="91.2476%" y="373" width="0.5351%" height="15" fill="rgb(233,213,13)" fg:x="145234581257" fg:w="851661316"/><text x="91.4976%" y="383.50"></text></g><g><title>[libc.so.6] (146,059,152,530 samples, 91.77%)</title><rect x="0.0196%" y="645" width="91.7657%" height="15" fill="rgb(233,141,41)" fg:x="31268362" fg:w="146059152530"/><text x="0.2696%" y="655.50">[libc.so.6]</text></g><g><title>[libc.so.6] (146,054,561,019 samples, 91.76%)</title><rect x="0.0225%" y="629" width="91.7628%" height="15" fill="rgb(239,167,4)" fg:x="35859873" fg:w="146054561019"/><text x="0.2725%" y="639.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (145,985,621,330 samples, 91.72%)</title><rect x="0.0658%" y="613" width="91.7195%" height="15" fill="rgb(209,217,16)" fg:x="104799562" fg:w="145985621330"/><text x="0.3158%" y="623.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (145,985,621,330 samples, 91.72%)</title><rect x="0.0658%" y="597" width="91.7195%" height="15" fill="rgb(219,88,35)" fg:x="104799562" fg:w="145985621330"/><text x="0.3158%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;f64 as num_traits::Num&gt;::from_str_radix (24,016,930 samples, 0.02%)</title><rect x="91.9499%" y="629" width="0.0151%" height="15" fill="rgb(220,193,23)" fg:x="146352326142" fg:w="24016930"/><text x="92.1999%" y="639.50"></text></g><g><title>core::slice::memchr::memchr_aligned (16,265,275 samples, 0.01%)</title><rect x="91.9920%" y="629" width="0.0102%" height="15" fill="rgb(230,90,52)" fg:x="146419340903" fg:w="16265275"/><text x="92.2420%" y="639.50"></text></g><g><title>matrix_market_rs::parse_coords_val (40,374,739 samples, 0.03%)</title><rect x="92.0226%" y="613" width="0.0254%" height="15" fill="rgb(252,106,19)" fg:x="146468065512" fg:w="40374739"/><text x="92.2726%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or (21,008,499 samples, 0.01%)</title><rect x="92.0348%" y="597" width="0.0132%" height="15" fill="rgb(206,74,20)" fg:x="146487431752" fg:w="21008499"/><text x="92.2848%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;f64,matrix_market_rs::MtxError&gt;&gt; (21,008,499 samples, 0.01%)</title><rect x="92.0348%" y="581" width="0.0132%" height="15" fill="rgb(230,138,44)" fg:x="146487431752" fg:w="21008499"/><text x="92.2848%" y="591.50"></text></g><g><title>matrix_market_rs::parse_sparse_coo (44,394,954 samples, 0.03%)</title><rect x="92.0226%" y="629" width="0.0279%" height="15" fill="rgb(235,182,43)" fg:x="146468065512" fg:w="44394954"/><text x="92.2726%" y="639.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::collect_chunks (16,598,428 samples, 0.01%)</title><rect x="92.0505%" y="629" width="0.0104%" height="15" fill="rgb(242,16,51)" fg:x="146512460466" fg:w="16598428"/><text x="92.3005%" y="639.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::get_fresh_chunk (26,141,722 samples, 0.02%)</title><rect x="92.0609%" y="629" width="0.0164%" height="15" fill="rgb(248,9,4)" fg:x="146529058894" fg:w="26141722"/><text x="92.3109%" y="639.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::hot_loop (661,567,239 samples, 0.42%)</title><rect x="92.0773%" y="629" width="0.4156%" height="15" fill="rgb(210,31,22)" fg:x="146555200616" fg:w="661567239"/><text x="92.3273%" y="639.50"></text></g><g><title>std::io::append_to_string (15,962,671 samples, 0.01%)</title><rect x="92.4956%" y="629" width="0.0100%" height="15" fill="rgb(239,54,39)" fg:x="147220929572" fg:w="15962671"/><text x="92.7456%" y="639.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (74,000,009 samples, 0.05%)</title><rect x="92.5056%" y="629" width="0.0465%" height="15" fill="rgb(230,99,41)" fg:x="147236892243" fg:w="74000009"/><text x="92.7556%" y="639.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::par_sparse_dense::_{{closure}}::_{{closure}} (74,000,009 samples, 0.05%)</title><rect x="92.5056%" y="613" width="0.0465%" height="15" fill="rgb(253,106,12)" fg:x="147236892243" fg:w="74000009"/><text x="92.7556%" y="623.50"></text></g><g><title>[unknown] (1,218,146,030 samples, 0.77%)</title><rect x="91.7893%" y="645" width="0.7653%" height="15" fill="rgb(213,46,41)" fg:x="146096793992" fg:w="1218146030"/><text x="92.0393%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (42,537,514 samples, 0.03%)</title><rect x="92.5594%" y="181" width="0.0267%" height="15" fill="rgb(215,133,35)" fg:x="147322477844" fg:w="42537514"/><text x="92.8094%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (42,537,514 samples, 0.03%)</title><rect x="92.5594%" y="165" width="0.0267%" height="15" fill="rgb(213,28,5)" fg:x="147322477844" fg:w="42537514"/><text x="92.8094%" y="175.50"></text></g><g><title>core::ptr::write (42,537,514 samples, 0.03%)</title><rect x="92.5594%" y="149" width="0.0267%" height="15" fill="rgb(215,77,49)" fg:x="147322477844" fg:w="42537514"/><text x="92.8094%" y="159.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (97,961,405 samples, 0.06%)</title><rect x="92.5594%" y="197" width="0.0615%" height="15" fill="rgb(248,100,22)" fg:x="147322477844" fg:w="97961405"/><text x="92.8094%" y="207.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market::_{{closure}} (55,423,891 samples, 0.03%)</title><rect x="92.5861%" y="181" width="0.0348%" height="15" fill="rgb(208,67,9)" fg:x="147365015358" fg:w="55423891"/><text x="92.8361%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (104,097,817 samples, 0.07%)</title><rect x="92.5594%" y="357" width="0.0654%" height="15" fill="rgb(219,133,21)" fg:x="147322477844" fg:w="104097817"/><text x="92.8094%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (104,097,817 samples, 0.07%)</title><rect x="92.5594%" y="341" width="0.0654%" height="15" fill="rgb(246,46,29)" fg:x="147322477844" fg:w="104097817"/><text x="92.8094%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (104,097,817 samples, 0.07%)</title><rect x="92.5594%" y="325" width="0.0654%" height="15" fill="rgb(246,185,52)" fg:x="147322477844" fg:w="104097817"/><text x="92.8094%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (104,097,817 samples, 0.07%)</title><rect x="92.5594%" y="309" width="0.0654%" height="15" fill="rgb(252,136,11)" fg:x="147322477844" fg:w="104097817"/><text x="92.8094%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (104,097,817 samples, 0.07%)</title><rect x="92.5594%" y="293" width="0.0654%" height="15" fill="rgb(219,138,53)" fg:x="147322477844" fg:w="104097817"/><text x="92.8094%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (104,097,817 samples, 0.07%)</title><rect x="92.5594%" y="277" width="0.0654%" height="15" fill="rgb(211,51,23)" fg:x="147322477844" fg:w="104097817"/><text x="92.8094%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (104,097,817 samples, 0.07%)</title><rect x="92.5594%" y="261" width="0.0654%" height="15" fill="rgb(247,221,28)" fg:x="147322477844" fg:w="104097817"/><text x="92.8094%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (104,097,817 samples, 0.07%)</title><rect x="92.5594%" y="245" width="0.0654%" height="15" fill="rgb(251,222,45)" fg:x="147322477844" fg:w="104097817"/><text x="92.8094%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (104,097,817 samples, 0.07%)</title><rect x="92.5594%" y="229" width="0.0654%" height="15" fill="rgb(217,162,53)" fg:x="147322477844" fg:w="104097817"/><text x="92.8094%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (104,097,817 samples, 0.07%)</title><rect x="92.5594%" y="213" width="0.0654%" height="15" fill="rgb(229,93,14)" fg:x="147322477844" fg:w="104097817"/><text x="92.8094%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (30,072,786 samples, 0.02%)</title><rect x="92.6410%" y="325" width="0.0189%" height="15" fill="rgb(209,67,49)" fg:x="147452307053" fg:w="30072786"/><text x="92.8910%" y="335.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::new_from_argsort_impl (253,611,562 samples, 0.16%)</title><rect x="92.6248%" y="341" width="0.1593%" height="15" fill="rgb(213,87,29)" fg:x="147426575661" fg:w="253611562"/><text x="92.8748%" y="351.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (197,807,384 samples, 0.12%)</title><rect x="92.6599%" y="325" width="0.1243%" height="15" fill="rgb(205,151,52)" fg:x="147482379839" fg:w="197807384"/><text x="92.9099%" y="335.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (180,723,951 samples, 0.11%)</title><rect x="92.6706%" y="309" width="0.1135%" height="15" fill="rgb(253,215,39)" fg:x="147499463272" fg:w="180723951"/><text x="92.9206%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (170,306,869 samples, 0.11%)</title><rect x="92.8301%" y="325" width="0.1070%" height="15" fill="rgb(221,220,41)" fg:x="147753321765" fg:w="170306869"/><text x="93.0801%" y="335.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (55,076,049 samples, 0.03%)</title><rect x="92.9762%" y="213" width="0.0346%" height="15" fill="rgb(218,133,21)" fg:x="147985792158" fg:w="55076049"/><text x="93.2262%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (16,961,036 samples, 0.01%)</title><rect x="93.0001%" y="197" width="0.0107%" height="15" fill="rgb(221,193,43)" fg:x="148023907171" fg:w="16961036"/><text x="93.2501%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (196,495,473 samples, 0.12%)</title><rect x="92.9454%" y="277" width="0.1235%" height="15" fill="rgb(240,128,52)" fg:x="147936880189" fg:w="196495473"/><text x="93.1954%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (196,495,473 samples, 0.12%)</title><rect x="92.9454%" y="261" width="0.1235%" height="15" fill="rgb(253,114,12)" fg:x="147936880189" fg:w="196495473"/><text x="93.1954%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (196,495,473 samples, 0.12%)</title><rect x="92.9454%" y="245" width="0.1235%" height="15" fill="rgb(215,223,47)" fg:x="147936880189" fg:w="196495473"/><text x="93.1954%" y="255.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (147,583,504 samples, 0.09%)</title><rect x="92.9762%" y="229" width="0.0927%" height="15" fill="rgb(248,225,23)" fg:x="147985792158" fg:w="147583504"/><text x="93.2262%" y="239.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (92,507,455 samples, 0.06%)</title><rect x="93.0108%" y="213" width="0.0581%" height="15" fill="rgb(250,108,0)" fg:x="148040868207" fg:w="92507455"/><text x="93.2608%" y="223.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (74,804,462 samples, 0.05%)</title><rect x="93.0219%" y="197" width="0.0470%" height="15" fill="rgb(228,208,7)" fg:x="148058571200" fg:w="74804462"/><text x="93.2719%" y="207.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (34,637,156 samples, 0.02%)</title><rect x="93.0929%" y="197" width="0.0218%" height="15" fill="rgb(244,45,10)" fg:x="148171550927" fg:w="34637156"/><text x="93.3429%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (17,190,774 samples, 0.01%)</title><rect x="93.1038%" y="181" width="0.0108%" height="15" fill="rgb(207,125,25)" fg:x="148188997309" fg:w="17190774"/><text x="93.3538%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (238,997,266 samples, 0.15%)</title><rect x="93.0689%" y="261" width="0.1502%" height="15" fill="rgb(210,195,18)" fg:x="148133375662" fg:w="238997266"/><text x="93.3189%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (238,997,266 samples, 0.15%)</title><rect x="93.0689%" y="245" width="0.1502%" height="15" fill="rgb(249,80,12)" fg:x="148133375662" fg:w="238997266"/><text x="93.3189%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (238,997,266 samples, 0.15%)</title><rect x="93.0689%" y="229" width="0.1502%" height="15" fill="rgb(221,65,9)" fg:x="148133375662" fg:w="238997266"/><text x="93.3189%" y="239.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (200,822,001 samples, 0.13%)</title><rect x="93.0929%" y="213" width="0.1262%" height="15" fill="rgb(235,49,36)" fg:x="148171550927" fg:w="200822001"/><text x="93.3429%" y="223.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (166,184,845 samples, 0.10%)</title><rect x="93.1146%" y="197" width="0.1044%" height="15" fill="rgb(225,32,20)" fg:x="148206188083" fg:w="166184845"/><text x="93.3646%" y="207.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (153,362,320 samples, 0.10%)</title><rect x="93.1227%" y="181" width="0.0964%" height="15" fill="rgb(215,141,46)" fg:x="148219010608" fg:w="153362320"/><text x="93.3727%" y="191.50"></text></g><g><title>core::intrinsics::copy (21,364,732 samples, 0.01%)</title><rect x="93.2379%" y="197" width="0.0134%" height="15" fill="rgb(250,160,47)" fg:x="148402385448" fg:w="21364732"/><text x="93.4879%" y="207.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (38,319,744 samples, 0.02%)</title><rect x="93.2539%" y="181" width="0.0241%" height="15" fill="rgb(216,222,40)" fg:x="148427934734" fg:w="38319744"/><text x="93.5039%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (25,731,861 samples, 0.02%)</title><rect x="93.2618%" y="165" width="0.0162%" height="15" fill="rgb(234,217,39)" fg:x="148440522617" fg:w="25731861"/><text x="93.5118%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (234,477,659 samples, 0.15%)</title><rect x="93.2244%" y="245" width="0.1473%" height="15" fill="rgb(207,178,40)" fg:x="148380846140" fg:w="234477659"/><text x="93.4744%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (234,477,659 samples, 0.15%)</title><rect x="93.2244%" y="229" width="0.1473%" height="15" fill="rgb(221,136,13)" fg:x="148380846140" fg:w="234477659"/><text x="93.4744%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (234,477,659 samples, 0.15%)</title><rect x="93.2244%" y="213" width="0.1473%" height="15" fill="rgb(249,199,10)" fg:x="148380846140" fg:w="234477659"/><text x="93.4744%" y="223.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (191,573,619 samples, 0.12%)</title><rect x="93.2513%" y="197" width="0.1204%" height="15" fill="rgb(249,222,13)" fg:x="148423750180" fg:w="191573619"/><text x="93.5013%" y="207.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (149,069,321 samples, 0.09%)</title><rect x="93.2780%" y="181" width="0.0937%" height="15" fill="rgb(244,185,38)" fg:x="148466254478" fg:w="149069321"/><text x="93.5280%" y="191.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (136,035,839 samples, 0.09%)</title><rect x="93.2862%" y="165" width="0.0855%" height="15" fill="rgb(236,202,9)" fg:x="148479287960" fg:w="136035839"/><text x="93.5362%" y="175.50"></text></g><g><title>core::intrinsics::copy (17,087,710 samples, 0.01%)</title><rect x="93.3878%" y="181" width="0.0107%" height="15" fill="rgb(250,229,37)" fg:x="148640950686" fg:w="17087710"/><text x="93.6378%" y="191.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (25,690,564 samples, 0.02%)</title><rect x="93.3985%" y="165" width="0.0161%" height="15" fill="rgb(206,174,23)" fg:x="148658038396" fg:w="25690564"/><text x="93.6485%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (157,805,645 samples, 0.10%)</title><rect x="93.3771%" y="229" width="0.0991%" height="15" fill="rgb(211,33,43)" fg:x="148623985818" fg:w="157805645"/><text x="93.6271%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (157,805,645 samples, 0.10%)</title><rect x="93.3771%" y="213" width="0.0991%" height="15" fill="rgb(245,58,50)" fg:x="148623985818" fg:w="157805645"/><text x="93.6271%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (153,456,252 samples, 0.10%)</title><rect x="93.3798%" y="197" width="0.0964%" height="15" fill="rgb(244,68,36)" fg:x="148628335211" fg:w="153456252"/><text x="93.6298%" y="207.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (123,753,067 samples, 0.08%)</title><rect x="93.3985%" y="181" width="0.0778%" height="15" fill="rgb(232,229,15)" fg:x="148658038396" fg:w="123753067"/><text x="93.6485%" y="191.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (98,062,503 samples, 0.06%)</title><rect x="93.4146%" y="165" width="0.0616%" height="15" fill="rgb(254,30,23)" fg:x="148683728960" fg:w="98062503"/><text x="93.6646%" y="175.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (76,778,789 samples, 0.05%)</title><rect x="93.4280%" y="149" width="0.0482%" height="15" fill="rgb(235,160,14)" fg:x="148705012674" fg:w="76778789"/><text x="93.6780%" y="159.50"></text></g><g><title>core::intrinsics::copy (34,384,641 samples, 0.02%)</title><rect x="93.4895%" y="165" width="0.0216%" height="15" fill="rgb(212,155,44)" fg:x="148802874632" fg:w="34384641"/><text x="93.7395%" y="175.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (42,300,773 samples, 0.03%)</title><rect x="93.5165%" y="149" width="0.0266%" height="15" fill="rgb(226,2,50)" fg:x="148845825004" fg:w="42300773"/><text x="93.7665%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (191,265,653 samples, 0.12%)</title><rect x="93.4842%" y="213" width="0.1202%" height="15" fill="rgb(234,177,6)" fg:x="148794503325" fg:w="191265653"/><text x="93.7342%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (191,265,653 samples, 0.12%)</title><rect x="93.4842%" y="197" width="0.1202%" height="15" fill="rgb(217,24,9)" fg:x="148794503325" fg:w="191265653"/><text x="93.7342%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (191,265,653 samples, 0.12%)</title><rect x="93.4842%" y="181" width="0.1202%" height="15" fill="rgb(220,13,46)" fg:x="148794503325" fg:w="191265653"/><text x="93.7342%" y="191.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (148,509,705 samples, 0.09%)</title><rect x="93.5111%" y="165" width="0.0933%" height="15" fill="rgb(239,221,27)" fg:x="148837259273" fg:w="148509705"/><text x="93.7611%" y="175.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (97,643,201 samples, 0.06%)</title><rect x="93.5431%" y="149" width="0.0613%" height="15" fill="rgb(222,198,25)" fg:x="148888125777" fg:w="97643201"/><text x="93.7931%" y="159.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (72,092,425 samples, 0.05%)</title><rect x="93.5591%" y="133" width="0.0453%" height="15" fill="rgb(211,99,13)" fg:x="148913676553" fg:w="72092425"/><text x="93.8091%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (20,981,162 samples, 0.01%)</title><rect x="93.6097%" y="197" width="0.0132%" height="15" fill="rgb(232,111,31)" fg:x="148994148063" fg:w="20981162"/><text x="93.8597%" y="207.50"></text></g><g><title>core::intrinsics::copy (33,959,941 samples, 0.02%)</title><rect x="93.6361%" y="149" width="0.0213%" height="15" fill="rgb(245,82,37)" fg:x="149036204193" fg:w="33959941"/><text x="93.8861%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (47,008,643 samples, 0.03%)</title><rect x="93.6760%" y="117" width="0.0295%" height="15" fill="rgb(227,149,46)" fg:x="149099692063" fg:w="47008643"/><text x="93.9260%" y="127.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (63,802,621 samples, 0.04%)</title><rect x="93.6681%" y="133" width="0.0401%" height="15" fill="rgb(218,36,50)" fg:x="149087103221" fg:w="63802621"/><text x="93.9181%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (208,318,274 samples, 0.13%)</title><rect x="93.6229%" y="197" width="0.1309%" height="15" fill="rgb(226,80,48)" fg:x="149015129225" fg:w="208318274"/><text x="93.8729%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (208,318,274 samples, 0.13%)</title><rect x="93.6229%" y="181" width="0.1309%" height="15" fill="rgb(238,224,15)" fg:x="149015129225" fg:w="208318274"/><text x="93.8729%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (204,138,818 samples, 0.13%)</title><rect x="93.6255%" y="165" width="0.1283%" height="15" fill="rgb(241,136,10)" fg:x="149019308681" fg:w="204138818"/><text x="93.8755%" y="175.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (153,283,365 samples, 0.10%)</title><rect x="93.6574%" y="149" width="0.0963%" height="15" fill="rgb(208,32,45)" fg:x="149070164134" fg:w="153283365"/><text x="93.9074%" y="159.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (72,541,657 samples, 0.05%)</title><rect x="93.7082%" y="133" width="0.0456%" height="15" fill="rgb(207,135,9)" fg:x="149150905842" fg:w="72541657"/><text x="93.9582%" y="143.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (38,364,100 samples, 0.02%)</title><rect x="93.7296%" y="117" width="0.0241%" height="15" fill="rgb(206,86,44)" fg:x="149185083399" fg:w="38364100"/><text x="93.9796%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (16,868,177 samples, 0.01%)</title><rect x="93.7645%" y="165" width="0.0106%" height="15" fill="rgb(245,177,15)" fg:x="149240492165" fg:w="16868177"/><text x="94.0145%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (37,898,941 samples, 0.02%)</title><rect x="93.7591%" y="181" width="0.0238%" height="15" fill="rgb(206,64,50)" fg:x="149232015123" fg:w="37898941"/><text x="94.0091%" y="191.50"></text></g><g><title>core::intrinsics::copy (29,805,042 samples, 0.02%)</title><rect x="93.7909%" y="133" width="0.0187%" height="15" fill="rgb(234,36,40)" fg:x="149282555400" fg:w="29805042"/><text x="94.0409%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (25,810,918 samples, 0.02%)</title><rect x="93.8362%" y="101" width="0.0162%" height="15" fill="rgb(213,64,8)" fg:x="149354661655" fg:w="25810918"/><text x="94.0862%" y="111.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (38,429,854 samples, 0.02%)</title><rect x="93.8309%" y="117" width="0.0241%" height="15" fill="rgb(210,75,36)" fg:x="149346232317" fg:w="38429854"/><text x="94.0809%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (144,552,235 samples, 0.09%)</title><rect x="93.7829%" y="181" width="0.0908%" height="15" fill="rgb(229,88,21)" fg:x="149269914064" fg:w="144552235"/><text x="94.0329%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (144,552,235 samples, 0.09%)</title><rect x="93.7829%" y="165" width="0.0908%" height="15" fill="rgb(252,204,47)" fg:x="149269914064" fg:w="144552235"/><text x="94.0329%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (144,552,235 samples, 0.09%)</title><rect x="93.7829%" y="149" width="0.0908%" height="15" fill="rgb(208,77,27)" fg:x="149269914064" fg:w="144552235"/><text x="94.0329%" y="159.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (102,105,857 samples, 0.06%)</title><rect x="93.8096%" y="133" width="0.0642%" height="15" fill="rgb(221,76,26)" fg:x="149312360442" fg:w="102105857"/><text x="94.0596%" y="143.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (29,804,128 samples, 0.02%)</title><rect x="93.8550%" y="117" width="0.0187%" height="15" fill="rgb(225,139,18)" fg:x="149384662171" fg:w="29804128"/><text x="94.1050%" y="127.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (17,189,631 samples, 0.01%)</title><rect x="93.8630%" y="101" width="0.0108%" height="15" fill="rgb(230,137,11)" fg:x="149397276668" fg:w="17189631"/><text x="94.1130%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (25,430,606 samples, 0.02%)</title><rect x="93.8870%" y="149" width="0.0160%" height="15" fill="rgb(212,28,1)" fg:x="149435565203" fg:w="25430606"/><text x="94.1370%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (25,430,606 samples, 0.02%)</title><rect x="93.8870%" y="133" width="0.0160%" height="15" fill="rgb(248,164,17)" fg:x="149435565203" fg:w="25430606"/><text x="94.1370%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (55,108,893 samples, 0.03%)</title><rect x="93.8738%" y="165" width="0.0346%" height="15" fill="rgb(222,171,42)" fg:x="149414466299" fg:w="55108893"/><text x="94.1238%" y="175.50"></text></g><g><title>core::intrinsics::copy (21,134,398 samples, 0.01%)</title><rect x="93.9164%" y="117" width="0.0133%" height="15" fill="rgb(243,84,45)" fg:x="149482319012" fg:w="21134398"/><text x="94.1664%" y="127.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (38,246,544 samples, 0.02%)</title><rect x="93.9457%" y="101" width="0.0240%" height="15" fill="rgb(252,49,23)" fg:x="149528911411" fg:w="38246544"/><text x="94.1957%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (21,109,583 samples, 0.01%)</title><rect x="93.9564%" y="85" width="0.0133%" height="15" fill="rgb(215,19,7)" fg:x="149546048372" fg:w="21109583"/><text x="94.2064%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (136,042,161 samples, 0.09%)</title><rect x="93.9084%" y="165" width="0.0855%" height="15" fill="rgb(238,81,41)" fg:x="149469575192" fg:w="136042161"/><text x="94.1584%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (136,042,161 samples, 0.09%)</title><rect x="93.9084%" y="149" width="0.0855%" height="15" fill="rgb(210,199,37)" fg:x="149469575192" fg:w="136042161"/><text x="94.1584%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (131,822,329 samples, 0.08%)</title><rect x="93.9110%" y="133" width="0.0828%" height="15" fill="rgb(244,192,49)" fg:x="149473795024" fg:w="131822329"/><text x="94.1610%" y="143.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (102,163,943 samples, 0.06%)</title><rect x="93.9297%" y="117" width="0.0642%" height="15" fill="rgb(226,211,11)" fg:x="149503453410" fg:w="102163943"/><text x="94.1797%" y="127.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (38,459,398 samples, 0.02%)</title><rect x="93.9697%" y="101" width="0.0242%" height="15" fill="rgb(236,162,54)" fg:x="149567157955" fg:w="38459398"/><text x="94.2197%" y="111.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (25,800,064 samples, 0.02%)</title><rect x="93.9776%" y="85" width="0.0162%" height="15" fill="rgb(220,229,9)" fg:x="149579817289" fg:w="25800064"/><text x="94.2276%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (16,968,486 samples, 0.01%)</title><rect x="93.9993%" y="133" width="0.0107%" height="15" fill="rgb(250,87,22)" fg:x="149614221430" fg:w="16968486"/><text x="94.2493%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (38,089,384 samples, 0.02%)</title><rect x="93.9993%" y="149" width="0.0239%" height="15" fill="rgb(239,43,17)" fg:x="149614221430" fg:w="38089384"/><text x="94.2493%" y="159.50"></text></g><g><title>core::intrinsics::copy (25,476,830 samples, 0.02%)</title><rect x="94.0444%" y="101" width="0.0160%" height="15" fill="rgb(231,177,25)" fg:x="149686105598" fg:w="25476830"/><text x="94.2944%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (25,286,150 samples, 0.02%)</title><rect x="94.0792%" y="69" width="0.0159%" height="15" fill="rgb(219,179,1)" fg:x="149741442577" fg:w="25286150"/><text x="94.3292%" y="79.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (46,653,774 samples, 0.03%)</title><rect x="94.0684%" y="85" width="0.0293%" height="15" fill="rgb(238,219,53)" fg:x="149724285449" fg:w="46653774"/><text x="94.3184%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (139,708,108 samples, 0.09%)</title><rect x="94.0232%" y="149" width="0.0878%" height="15" fill="rgb(232,167,36)" fg:x="149652310814" fg:w="139708108"/><text x="94.2732%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (139,708,108 samples, 0.09%)</title><rect x="94.0232%" y="133" width="0.0878%" height="15" fill="rgb(244,19,51)" fg:x="149652310814" fg:w="139708108"/><text x="94.2732%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (131,299,131 samples, 0.08%)</title><rect x="94.0285%" y="117" width="0.0825%" height="15" fill="rgb(224,6,22)" fg:x="149660719791" fg:w="131299131"/><text x="94.2785%" y="127.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (80,436,494 samples, 0.05%)</title><rect x="94.0604%" y="101" width="0.0505%" height="15" fill="rgb(224,145,5)" fg:x="149711582428" fg:w="80436494"/><text x="94.3104%" y="111.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (21,079,699 samples, 0.01%)</title><rect x="94.0977%" y="85" width="0.0132%" height="15" fill="rgb(234,130,49)" fg:x="149770939223" fg:w="21079699"/><text x="94.3477%" y="95.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (29,637,546 samples, 0.02%)</title><rect x="94.1135%" y="133" width="0.0186%" height="15" fill="rgb(254,6,2)" fg:x="149796109002" fg:w="29637546"/><text x="94.3635%" y="143.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (25,411,868 samples, 0.02%)</title><rect x="94.1162%" y="117" width="0.0160%" height="15" fill="rgb(208,96,46)" fg:x="149800334680" fg:w="25411868"/><text x="94.3662%" y="127.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (25,411,868 samples, 0.02%)</title><rect x="94.1162%" y="101" width="0.0160%" height="15" fill="rgb(239,3,39)" fg:x="149800334680" fg:w="25411868"/><text x="94.3662%" y="111.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (16,885,531 samples, 0.01%)</title><rect x="94.1215%" y="85" width="0.0106%" height="15" fill="rgb(233,210,1)" fg:x="149808861017" fg:w="16885531"/><text x="94.3715%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (17,033,682 samples, 0.01%)</title><rect x="94.1322%" y="117" width="0.0107%" height="15" fill="rgb(244,137,37)" fg:x="149825746548" fg:w="17033682"/><text x="94.3822%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (38,465,012 samples, 0.02%)</title><rect x="94.1508%" y="117" width="0.0242%" height="15" fill="rgb(240,136,2)" fg:x="149855476651" fg:w="38465012"/><text x="94.4008%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (38,465,012 samples, 0.02%)</title><rect x="94.1508%" y="101" width="0.0242%" height="15" fill="rgb(239,18,37)" fg:x="149855476651" fg:w="38465012"/><text x="94.4008%" y="111.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (21,325,942 samples, 0.01%)</title><rect x="94.1616%" y="85" width="0.0134%" height="15" fill="rgb(218,185,22)" fg:x="149872615721" fg:w="21325942"/><text x="94.4116%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (85,059,110 samples, 0.05%)</title><rect x="94.1322%" y="133" width="0.0534%" height="15" fill="rgb(225,218,4)" fg:x="149825746548" fg:w="85059110"/><text x="94.3822%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (16,863,995 samples, 0.01%)</title><rect x="94.1750%" y="117" width="0.0106%" height="15" fill="rgb(230,182,32)" fg:x="149893941663" fg:w="16863995"/><text x="94.4250%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (16,863,995 samples, 0.01%)</title><rect x="94.1750%" y="101" width="0.0106%" height="15" fill="rgb(242,56,43)" fg:x="149893941663" fg:w="16863995"/><text x="94.4250%" y="111.50"></text></g><g><title>core::intrinsics::copy (16,766,037 samples, 0.01%)</title><rect x="94.1909%" y="85" width="0.0105%" height="15" fill="rgb(233,99,24)" fg:x="149919246905" fg:w="16766037"/><text x="94.4409%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (21,228,280 samples, 0.01%)</title><rect x="94.2146%" y="53" width="0.0133%" height="15" fill="rgb(234,209,42)" fg:x="149957024737" fg:w="21228280"/><text x="94.4646%" y="63.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (29,809,473 samples, 0.02%)</title><rect x="94.2146%" y="69" width="0.0187%" height="15" fill="rgb(227,7,12)" fg:x="149957024737" fg:w="29809473"/><text x="94.4646%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (101,530,005 samples, 0.06%)</title><rect x="94.1856%" y="133" width="0.0638%" height="15" fill="rgb(245,203,43)" fg:x="149910805658" fg:w="101530005"/><text x="94.4356%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (101,530,005 samples, 0.06%)</title><rect x="94.1856%" y="117" width="0.0638%" height="15" fill="rgb(238,205,33)" fg:x="149910805658" fg:w="101530005"/><text x="94.4356%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (101,530,005 samples, 0.06%)</title><rect x="94.1856%" y="101" width="0.0638%" height="15" fill="rgb(231,56,7)" fg:x="149910805658" fg:w="101530005"/><text x="94.4356%" y="111.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (76,322,721 samples, 0.05%)</title><rect x="94.2014%" y="85" width="0.0480%" height="15" fill="rgb(244,186,29)" fg:x="149936012942" fg:w="76322721"/><text x="94.4514%" y="95.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (25,501,453 samples, 0.02%)</title><rect x="94.2334%" y="69" width="0.0160%" height="15" fill="rgb(234,111,31)" fg:x="149986834210" fg:w="25501453"/><text x="94.4834%" y="79.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (17,122,445 samples, 0.01%)</title><rect x="94.2494%" y="117" width="0.0108%" height="15" fill="rgb(241,149,10)" fg:x="150012335663" fg:w="17122445"/><text x="94.4994%" y="127.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (17,122,445 samples, 0.01%)</title><rect x="94.2494%" y="101" width="0.0108%" height="15" fill="rgb(249,206,44)" fg:x="150012335663" fg:w="17122445"/><text x="94.4994%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (21,345,996 samples, 0.01%)</title><rect x="94.2601%" y="101" width="0.0134%" height="15" fill="rgb(251,153,30)" fg:x="150029458108" fg:w="21345996"/><text x="94.5101%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (16,981,495 samples, 0.01%)</title><rect x="94.2629%" y="85" width="0.0107%" height="15" fill="rgb(239,152,38)" fg:x="150033822609" fg:w="16981495"/><text x="94.5129%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (17,217,340 samples, 0.01%)</title><rect x="94.2736%" y="101" width="0.0108%" height="15" fill="rgb(249,139,47)" fg:x="150050804104" fg:w="17217340"/><text x="94.5236%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (25,560,401 samples, 0.02%)</title><rect x="94.2844%" y="101" width="0.0161%" height="15" fill="rgb(244,64,35)" fg:x="150068021444" fg:w="25560401"/><text x="94.5344%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (25,560,401 samples, 0.02%)</title><rect x="94.2844%" y="85" width="0.0161%" height="15" fill="rgb(216,46,15)" fg:x="150068021444" fg:w="25560401"/><text x="94.5344%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (72,687,252 samples, 0.05%)</title><rect x="94.2601%" y="117" width="0.0457%" height="15" fill="rgb(250,74,19)" fg:x="150029458108" fg:w="72687252"/><text x="94.5101%" y="127.50"></text></g><g><title>core::intrinsics::copy (16,984,938 samples, 0.01%)</title><rect x="94.3111%" y="69" width="0.0107%" height="15" fill="rgb(249,42,33)" fg:x="150110593353" fg:w="16984938"/><text x="94.5611%" y="79.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (21,289,412 samples, 0.01%)</title><rect x="94.3325%" y="53" width="0.0134%" height="15" fill="rgb(242,149,17)" fg:x="150144684681" fg:w="21289412"/><text x="94.5825%" y="63.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::__chaining_lt (17,040,231 samples, 0.01%)</title><rect x="94.3352%" y="37" width="0.0107%" height="15" fill="rgb(244,29,21)" fg:x="150148933862" fg:w="17040231"/><text x="94.5852%" y="47.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (80,749,176 samples, 0.05%)</title><rect x="94.3058%" y="117" width="0.0507%" height="15" fill="rgb(220,130,37)" fg:x="150102145360" fg:w="80749176"/><text x="94.5558%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (80,749,176 samples, 0.05%)</title><rect x="94.3058%" y="101" width="0.0507%" height="15" fill="rgb(211,67,2)" fg:x="150102145360" fg:w="80749176"/><text x="94.5558%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (80,749,176 samples, 0.05%)</title><rect x="94.3058%" y="85" width="0.0507%" height="15" fill="rgb(235,68,52)" fg:x="150102145360" fg:w="80749176"/><text x="94.5558%" y="95.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (55,316,245 samples, 0.03%)</title><rect x="94.3218%" y="69" width="0.0348%" height="15" fill="rgb(246,142,3)" fg:x="150127578291" fg:w="55316245"/><text x="94.5718%" y="79.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl::_{{closure}} (16,920,443 samples, 0.01%)</title><rect x="94.3459%" y="53" width="0.0106%" height="15" fill="rgb(241,25,7)" fg:x="150165974093" fg:w="16920443"/><text x="94.5959%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (17,372,072 samples, 0.01%)</title><rect x="94.3698%" y="85" width="0.0109%" height="15" fill="rgb(242,119,39)" fg:x="150203930931" fg:w="17372072"/><text x="94.6198%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (42,778,016 samples, 0.03%)</title><rect x="94.3672%" y="101" width="0.0269%" height="15" fill="rgb(241,98,45)" fg:x="150199797899" fg:w="42778016"/><text x="94.6172%" y="111.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (V,U,T)&gt;::lt (21,582,959 samples, 0.01%)</title><rect x="94.3940%" y="37" width="0.0136%" height="15" fill="rgb(254,28,30)" fg:x="150242575915" fg:w="21582959"/><text x="94.6440%" y="47.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (30,039,501 samples, 0.02%)</title><rect x="94.3940%" y="101" width="0.0189%" height="15" fill="rgb(241,142,54)" fg:x="150242575915" fg:w="30039501"/><text x="94.6440%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (30,039,501 samples, 0.02%)</title><rect x="94.3940%" y="85" width="0.0189%" height="15" fill="rgb(222,85,15)" fg:x="150242575915" fg:w="30039501"/><text x="94.6440%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (30,039,501 samples, 0.02%)</title><rect x="94.3940%" y="69" width="0.0189%" height="15" fill="rgb(210,85,47)" fg:x="150242575915" fg:w="30039501"/><text x="94.6440%" y="79.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (30,039,501 samples, 0.02%)</title><rect x="94.3940%" y="53" width="0.0189%" height="15" fill="rgb(224,206,25)" fg:x="150242575915" fg:w="30039501"/><text x="94.6440%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (33,912,616 samples, 0.02%)</title><rect x="94.4129%" y="85" width="0.0213%" height="15" fill="rgb(243,201,19)" fg:x="150272615416" fg:w="33912616"/><text x="94.6629%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (25,763,825 samples, 0.02%)</title><rect x="94.4342%" y="85" width="0.0162%" height="15" fill="rgb(236,59,4)" fg:x="150306528032" fg:w="25763825"/><text x="94.6842%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (25,763,825 samples, 0.02%)</title><rect x="94.4342%" y="69" width="0.0162%" height="15" fill="rgb(254,179,45)" fg:x="150306528032" fg:w="25763825"/><text x="94.6842%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (25,763,825 samples, 0.02%)</title><rect x="94.4342%" y="53" width="0.0162%" height="15" fill="rgb(226,14,10)" fg:x="150306528032" fg:w="25763825"/><text x="94.6842%" y="63.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (21,560,234 samples, 0.01%)</title><rect x="94.4369%" y="37" width="0.0135%" height="15" fill="rgb(244,27,41)" fg:x="150310731623" fg:w="21560234"/><text x="94.6869%" y="47.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (2,455,928,005 samples, 1.54%)</title><rect x="92.9454%" y="325" width="1.5430%" height="15" fill="rgb(235,35,32)" fg:x="147936880189" fg:w="2455928005"/><text x="93.1954%" y="335.50"></text></g><g><title>core::slice::sort::unstable::sort (2,455,928,005 samples, 1.54%)</title><rect x="92.9454%" y="309" width="1.5430%" height="15" fill="rgb(218,68,31)" fg:x="147936880189" fg:w="2455928005"/><text x="93.1954%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,455,928,005 samples, 1.54%)</title><rect x="92.9454%" y="293" width="1.5430%" height="15" fill="rgb(207,120,37)" fg:x="147936880189" fg:w="2455928005"/><text x="93.1954%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,259,432,532 samples, 1.42%)</title><rect x="93.0689%" y="277" width="1.4196%" height="15" fill="rgb(227,98,0)" fg:x="148133375662" fg:w="2259432532"/><text x="93.3189%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (2,020,435,266 samples, 1.27%)</title><rect x="93.2190%" y="261" width="1.2694%" height="15" fill="rgb(207,7,3)" fg:x="148372372928" fg:w="2020435266"/><text x="93.4690%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,777,484,395 samples, 1.12%)</title><rect x="93.3717%" y="245" width="1.1168%" height="15" fill="rgb(206,98,19)" fg:x="148615323799" fg:w="1777484395"/><text x="93.6217%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,611,016,731 samples, 1.01%)</title><rect x="93.4763%" y="229" width="1.0122%" height="15" fill="rgb(217,5,26)" fg:x="148781791463" fg:w="1611016731"/><text x="93.7263%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,407,039,216 samples, 0.88%)</title><rect x="93.6044%" y="213" width="0.8840%" height="15" fill="rgb(235,190,38)" fg:x="148985768978" fg:w="1407039216"/><text x="93.8544%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (1,169,360,695 samples, 0.73%)</title><rect x="93.7537%" y="197" width="0.7347%" height="15" fill="rgb(247,86,24)" fg:x="149223447499" fg:w="1169360695"/><text x="94.0037%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (978,341,895 samples, 0.61%)</title><rect x="93.8738%" y="181" width="0.6147%" height="15" fill="rgb(205,101,16)" fg:x="149414466299" fg:w="978341895"/><text x="94.1238%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (787,190,841 samples, 0.49%)</title><rect x="93.9939%" y="165" width="0.4946%" height="15" fill="rgb(246,168,33)" fg:x="149605617353" fg:w="787190841"/><text x="94.2439%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (600,789,272 samples, 0.38%)</title><rect x="94.1110%" y="149" width="0.3775%" height="15" fill="rgb(231,114,1)" fg:x="149792018922" fg:w="600789272"/><text x="94.3610%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (380,472,531 samples, 0.24%)</title><rect x="94.2494%" y="133" width="0.2390%" height="15" fill="rgb(207,184,53)" fg:x="150012335663" fg:w="380472531"/><text x="94.4994%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (209,913,658 samples, 0.13%)</title><rect x="94.3565%" y="117" width="0.1319%" height="15" fill="rgb(224,95,51)" fg:x="150182894536" fg:w="209913658"/><text x="94.6065%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (120,192,778 samples, 0.08%)</title><rect x="94.4129%" y="101" width="0.0755%" height="15" fill="rgb(212,188,45)" fg:x="150272615416" fg:w="120192778"/><text x="94.6629%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (60,516,337 samples, 0.04%)</title><rect x="94.4504%" y="85" width="0.0380%" height="15" fill="rgb(223,154,38)" fg:x="150332291857" fg:w="60516337"/><text x="94.7004%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (30,189,745 samples, 0.02%)</title><rect x="94.4695%" y="69" width="0.0190%" height="15" fill="rgb(251,22,52)" fg:x="150362618449" fg:w="30189745"/><text x="94.7195%" y="79.50"></text></g><g><title>faer::sparse::csc::_&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets::_{{closure}} (200,416,721 samples, 0.13%)</title><rect x="94.4968%" y="325" width="0.1259%" height="15" fill="rgb(229,209,22)" fg:x="150406123900" fg:w="200416721"/><text x="94.7468%" y="335.50"></text></g><g><title>faer::sparse::try_collect (18,240,781 samples, 0.01%)</title><rect x="94.6227%" y="325" width="0.0115%" height="15" fill="rgb(234,138,34)" fg:x="150606540621" fg:w="18240781"/><text x="94.8727%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (18,240,781 samples, 0.01%)</title><rect x="94.6227%" y="309" width="0.0115%" height="15" fill="rgb(212,95,11)" fg:x="150606540621" fg:w="18240781"/><text x="94.8727%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (18,240,781 samples, 0.01%)</title><rect x="94.6227%" y="293" width="0.0115%" height="15" fill="rgb(240,179,47)" fg:x="150606540621" fg:w="18240781"/><text x="94.8727%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (18,240,781 samples, 0.01%)</title><rect x="94.6227%" y="277" width="0.0115%" height="15" fill="rgb(240,163,11)" fg:x="150606540621" fg:w="18240781"/><text x="94.8727%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (18,240,781 samples, 0.01%)</title><rect x="94.6227%" y="261" width="0.0115%" height="15" fill="rgb(236,37,12)" fg:x="150606540621" fg:w="18240781"/><text x="94.8727%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18,240,781 samples, 0.01%)</title><rect x="94.6227%" y="245" width="0.0115%" height="15" fill="rgb(232,164,16)" fg:x="150606540621" fg:w="18240781"/><text x="94.8727%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (18,240,781 samples, 0.01%)</title><rect x="94.6227%" y="229" width="0.0115%" height="15" fill="rgb(244,205,15)" fg:x="150606540621" fg:w="18240781"/><text x="94.8727%" y="239.50"></text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::numeric::generic::SparseColMat&lt;faer::sparse::csc::numeric::Own&lt;I,T,Rows,Cols&gt;&gt;&gt;::try_new_from_triplets (3,213,435,676 samples, 2.02%)</title><rect x="92.6248%" y="357" width="2.0189%" height="15" fill="rgb(223,117,47)" fg:x="147426575661" fg:w="3213435676"/><text x="92.8748%" y="367.50">f..</text></g><g><title>faer::sparse::csc::&lt;impl faer::sparse::csc::symbolic::generic::SymbolicSparseColMat&lt;faer::sparse::csc::symbolic::Own&lt;I,Rows,Cols&gt;&gt;&gt;::try_new_from_indices_impl (2,959,824,114 samples, 1.86%)</title><rect x="92.7841%" y="341" width="1.8596%" height="15" fill="rgb(244,107,35)" fg:x="147680187223" fg:w="2959824114"/><text x="93.0341%" y="351.50">f..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (39,798,749 samples, 0.03%)</title><rect x="94.6590%" y="325" width="0.0250%" height="15" fill="rgb(205,140,8)" fg:x="150664300160" fg:w="39798749"/><text x="94.9090%" y="335.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (289,869,720 samples, 0.18%)</title><rect x="94.7916%" y="149" width="0.1821%" height="15" fill="rgb(228,84,46)" fg:x="150875423806" fg:w="289869720"/><text x="95.0416%" y="159.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (289,869,720 samples, 0.18%)</title><rect x="94.7916%" y="133" width="0.1821%" height="15" fill="rgb(254,188,9)" fg:x="150875423806" fg:w="289869720"/><text x="95.0416%" y="143.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (289,869,720 samples, 0.18%)</title><rect x="94.7916%" y="117" width="0.1821%" height="15" fill="rgb(206,112,54)" fg:x="150875423806" fg:w="289869720"/><text x="95.0416%" y="127.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (289,869,720 samples, 0.18%)</title><rect x="94.7916%" y="101" width="0.1821%" height="15" fill="rgb(216,84,49)" fg:x="150875423806" fg:w="289869720"/><text x="95.0416%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (644,891,370 samples, 0.41%)</title><rect x="94.7645%" y="309" width="0.4052%" height="15" fill="rgb(214,194,35)" fg:x="150832215968" fg:w="644891370"/><text x="95.0145%" y="319.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (644,891,370 samples, 0.41%)</title><rect x="94.7645%" y="293" width="0.4052%" height="15" fill="rgb(249,28,3)" fg:x="150832215968" fg:w="644891370"/><text x="95.0145%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (644,891,370 samples, 0.41%)</title><rect x="94.7645%" y="277" width="0.4052%" height="15" fill="rgb(222,56,52)" fg:x="150832215968" fg:w="644891370"/><text x="95.0145%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (644,891,370 samples, 0.41%)</title><rect x="94.7645%" y="261" width="0.4052%" height="15" fill="rgb(245,217,50)" fg:x="150832215968" fg:w="644891370"/><text x="95.0145%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (644,891,370 samples, 0.41%)</title><rect x="94.7645%" y="245" width="0.4052%" height="15" fill="rgb(213,201,24)" fg:x="150832215968" fg:w="644891370"/><text x="95.0145%" y="255.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (609,702,159 samples, 0.38%)</title><rect x="94.7866%" y="229" width="0.3831%" height="15" fill="rgb(248,116,28)" fg:x="150867405179" fg:w="609702159"/><text x="95.0366%" y="239.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (609,702,159 samples, 0.38%)</title><rect x="94.7866%" y="213" width="0.3831%" height="15" fill="rgb(219,72,43)" fg:x="150867405179" fg:w="609702159"/><text x="95.0366%" y="223.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (601,683,532 samples, 0.38%)</title><rect x="94.7916%" y="197" width="0.3780%" height="15" fill="rgb(209,138,14)" fg:x="150875423806" fg:w="601683532"/><text x="95.0416%" y="207.50"></text></g><g><title>core::str::pattern::Searcher::next_match (601,683,532 samples, 0.38%)</title><rect x="94.7916%" y="181" width="0.3780%" height="15" fill="rgb(222,18,33)" fg:x="150875423806" fg:w="601683532"/><text x="95.0416%" y="191.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (601,683,532 samples, 0.38%)</title><rect x="94.7916%" y="165" width="0.3780%" height="15" fill="rgb(213,199,7)" fg:x="150875423806" fg:w="601683532"/><text x="95.0416%" y="175.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (311,813,812 samples, 0.20%)</title><rect x="94.9738%" y="149" width="0.1959%" height="15" fill="rgb(250,110,10)" fg:x="151165293526" fg:w="311813812"/><text x="95.2238%" y="159.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (311,813,812 samples, 0.20%)</title><rect x="94.9738%" y="133" width="0.1959%" height="15" fill="rgb(248,123,6)" fg:x="151165293526" fg:w="311813812"/><text x="95.2238%" y="143.50"></text></g><g><title>core::str::validations::next_code_point (311,813,812 samples, 0.20%)</title><rect x="94.9738%" y="117" width="0.1959%" height="15" fill="rgb(206,91,31)" fg:x="151165293526" fg:w="311813812"/><text x="95.2238%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23,925,264 samples, 0.02%)</title><rect x="95.1546%" y="101" width="0.0150%" height="15" fill="rgb(211,154,13)" fg:x="151453182074" fg:w="23925264"/><text x="95.4046%" y="111.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (23,925,264 samples, 0.02%)</title><rect x="95.1546%" y="85" width="0.0150%" height="15" fill="rgb(225,148,7)" fg:x="151453182074" fg:w="23925264"/><text x="95.4046%" y="95.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (60,170,364 samples, 0.04%)</title><rect x="95.2397%" y="229" width="0.0378%" height="15" fill="rgb(220,160,43)" fg:x="151588586455" fg:w="60170364"/><text x="95.4897%" y="239.50"></text></g><g><title>core::num::dec2flt::decimal::Decimal::try_fast_path (96,061,049 samples, 0.06%)</title><rect x="95.2222%" y="245" width="0.0604%" height="15" fill="rgb(213,52,39)" fg:x="151560682235" fg:w="96061049"/><text x="95.4722%" y="255.50"></text></g><g><title>core::num::dec2flt::parse::parse_scientific (24,067,205 samples, 0.02%)</title><rect x="95.3455%" y="213" width="0.0151%" height="15" fill="rgb(243,137,7)" fg:x="151757047130" fg:w="24067205"/><text x="95.5955%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (16,064,190 samples, 0.01%)</title><rect x="95.4009%" y="181" width="0.0101%" height="15" fill="rgb(230,79,13)" fg:x="151845193020" fg:w="16064190"/><text x="95.6509%" y="191.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (84,297,009 samples, 0.05%)</title><rect x="95.3859%" y="197" width="0.0530%" height="15" fill="rgb(247,105,23)" fg:x="151821249920" fg:w="84297009"/><text x="95.6359%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (44,289,719 samples, 0.03%)</title><rect x="95.4110%" y="181" width="0.0278%" height="15" fill="rgb(223,179,41)" fg:x="151861257210" fg:w="44289719"/><text x="95.6610%" y="191.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::read_u64 (23,951,032 samples, 0.02%)</title><rect x="95.4388%" y="197" width="0.0150%" height="15" fill="rgb(218,9,34)" fg:x="151905546929" fg:w="23951032"/><text x="95.6888%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (23,951,032 samples, 0.02%)</title><rect x="95.4388%" y="181" width="0.0150%" height="15" fill="rgb(222,106,8)" fg:x="151905546929" fg:w="23951032"/><text x="95.6888%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23,951,032 samples, 0.02%)</title><rect x="95.4388%" y="165" width="0.0150%" height="15" fill="rgb(211,220,0)" fg:x="151905546929" fg:w="23951032"/><text x="95.6888%" y="175.50"></text></g><g><title>core::num::dec2flt::common::is_8digits (43,910,837 samples, 0.03%)</title><rect x="95.4614%" y="197" width="0.0276%" height="15" fill="rgb(229,52,16)" fg:x="151941511921" fg:w="43910837"/><text x="95.7114%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (15,989,134 samples, 0.01%)</title><rect x="95.4790%" y="181" width="0.0100%" height="15" fill="rgb(212,155,18)" fg:x="151969433624" fg:w="15989134"/><text x="95.7290%" y="191.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (264,376,378 samples, 0.17%)</title><rect x="95.3607%" y="213" width="0.1661%" height="15" fill="rgb(242,21,14)" fg:x="151781114335" fg:w="264376378"/><text x="95.6107%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::parse_8digits (60,067,955 samples, 0.04%)</title><rect x="95.4890%" y="197" width="0.0377%" height="15" fill="rgb(222,19,48)" fg:x="151985422758" fg:w="60067955"/><text x="95.7390%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (16,043,036 samples, 0.01%)</title><rect x="95.5167%" y="181" width="0.0101%" height="15" fill="rgb(232,45,27)" fg:x="152029447677" fg:w="16043036"/><text x="95.7667%" y="191.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (396,978,941 samples, 0.25%)</title><rect x="95.2850%" y="245" width="0.2494%" height="15" fill="rgb(249,103,42)" fg:x="151660715243" fg:w="396978941"/><text x="95.5350%" y="255.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (348,804,113 samples, 0.22%)</title><rect x="95.3153%" y="229" width="0.2191%" height="15" fill="rgb(246,81,33)" fg:x="151708890071" fg:w="348804113"/><text x="95.5653%" y="239.50"></text></g><g><title>&lt;f64 as num_traits::Num&gt;::from_str_radix (584,819,979 samples, 0.37%)</title><rect x="95.1697%" y="309" width="0.3674%" height="15" fill="rgb(252,33,42)" fg:x="151477107338" fg:w="584819979"/><text x="95.4197%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (576,820,775 samples, 0.36%)</title><rect x="95.1747%" y="293" width="0.3624%" height="15" fill="rgb(209,212,41)" fg:x="151485106542" fg:w="576820775"/><text x="95.4247%" y="303.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (576,820,775 samples, 0.36%)</title><rect x="95.1747%" y="277" width="0.3624%" height="15" fill="rgb(207,154,6)" fg:x="151485106542" fg:w="576820775"/><text x="95.4247%" y="287.50"></text></g><g><title>core::num::dec2flt::dec2flt (541,123,720 samples, 0.34%)</title><rect x="95.1971%" y="261" width="0.3400%" height="15" fill="rgb(223,64,47)" fg:x="151520803597" fg:w="541123720"/><text x="95.4471%" y="271.50"></text></g><g><title>__rustc::__rdl_alloc (20,077,926 samples, 0.01%)</title><rect x="95.5447%" y="117" width="0.0126%" height="15" fill="rgb(211,161,38)" fg:x="152074033613" fg:w="20077926"/><text x="95.7947%" y="127.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20,077,926 samples, 0.01%)</title><rect x="95.5447%" y="101" width="0.0126%" height="15" fill="rgb(219,138,40)" fg:x="152074033613" fg:w="20077926"/><text x="95.7947%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (88,255,788 samples, 0.06%)</title><rect x="95.5371%" y="229" width="0.0554%" height="15" fill="rgb(241,228,46)" fg:x="152061927317" fg:w="88255788"/><text x="95.7871%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (88,255,788 samples, 0.06%)</title><rect x="95.5371%" y="213" width="0.0554%" height="15" fill="rgb(223,209,38)" fg:x="152061927317" fg:w="88255788"/><text x="95.7871%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (88,255,788 samples, 0.06%)</title><rect x="95.5371%" y="197" width="0.0554%" height="15" fill="rgb(236,164,45)" fg:x="152061927317" fg:w="88255788"/><text x="95.7871%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (88,255,788 samples, 0.06%)</title><rect x="95.5371%" y="181" width="0.0554%" height="15" fill="rgb(231,15,5)" fg:x="152061927317" fg:w="88255788"/><text x="95.7871%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (76,149,492 samples, 0.05%)</title><rect x="95.5447%" y="165" width="0.0478%" height="15" fill="rgb(252,35,15)" fg:x="152074033613" fg:w="76149492"/><text x="95.7947%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (76,149,492 samples, 0.05%)</title><rect x="95.5447%" y="149" width="0.0478%" height="15" fill="rgb(248,181,18)" fg:x="152074033613" fg:w="76149492"/><text x="95.7947%" y="159.50"></text></g><g><title>alloc::alloc::alloc (76,149,492 samples, 0.05%)</title><rect x="95.5447%" y="133" width="0.0478%" height="15" fill="rgb(233,39,42)" fg:x="152074033613" fg:w="76149492"/><text x="95.7947%" y="143.50"></text></g><g><title>malloc (48,052,223 samples, 0.03%)</title><rect x="95.5624%" y="117" width="0.0302%" height="15" fill="rgb(238,110,33)" fg:x="152102130882" fg:w="48052223"/><text x="95.8124%" y="127.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (132,228,859 samples, 0.08%)</title><rect x="95.5371%" y="309" width="0.0831%" height="15" fill="rgb(233,195,10)" fg:x="152061927317" fg:w="132228859"/><text x="95.7871%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (132,228,859 samples, 0.08%)</title><rect x="95.5371%" y="293" width="0.0831%" height="15" fill="rgb(254,105,3)" fg:x="152061927317" fg:w="132228859"/><text x="95.7871%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (132,228,859 samples, 0.08%)</title><rect x="95.5371%" y="277" width="0.0831%" height="15" fill="rgb(221,225,9)" fg:x="152061927317" fg:w="132228859"/><text x="95.7871%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (132,228,859 samples, 0.08%)</title><rect x="95.5371%" y="261" width="0.0831%" height="15" fill="rgb(224,227,45)" fg:x="152061927317" fg:w="132228859"/><text x="95.7871%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (132,228,859 samples, 0.08%)</title><rect x="95.5371%" y="245" width="0.0831%" height="15" fill="rgb(229,198,43)" fg:x="152061927317" fg:w="132228859"/><text x="95.7871%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (43,973,071 samples, 0.03%)</title><rect x="95.5925%" y="229" width="0.0276%" height="15" fill="rgb(206,209,35)" fg:x="152150183105" fg:w="43973071"/><text x="95.8425%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43,973,071 samples, 0.03%)</title><rect x="95.5925%" y="213" width="0.0276%" height="15" fill="rgb(245,195,53)" fg:x="152150183105" fg:w="43973071"/><text x="95.8425%" y="223.50"></text></g><g><title>[libc.so.6] (35,892,219 samples, 0.02%)</title><rect x="95.5976%" y="197" width="0.0226%" height="15" fill="rgb(240,92,26)" fg:x="152158263957" fg:w="35892219"/><text x="95.8476%" y="207.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (180,716,391 samples, 0.11%)</title><rect x="95.6202%" y="309" width="0.1135%" height="15" fill="rgb(207,40,23)" fg:x="152194156176" fg:w="180716391"/><text x="95.8702%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (180,716,391 samples, 0.11%)</title><rect x="95.6202%" y="293" width="0.1135%" height="15" fill="rgb(223,111,35)" fg:x="152194156176" fg:w="180716391"/><text x="95.8702%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (180,716,391 samples, 0.11%)</title><rect x="95.6202%" y="277" width="0.1135%" height="15" fill="rgb(229,147,28)" fg:x="152194156176" fg:w="180716391"/><text x="95.8702%" y="287.50"></text></g><g><title>cfree (96,324,195 samples, 0.06%)</title><rect x="95.7387%" y="277" width="0.0605%" height="15" fill="rgb(211,29,28)" fg:x="152382891551" fg:w="96324195"/><text x="95.9887%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or (120,666,992 samples, 0.08%)</title><rect x="95.7337%" y="309" width="0.0758%" height="15" fill="rgb(228,72,33)" fg:x="152374872567" fg:w="120666992"/><text x="95.9837%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;f64,matrix_market_rs::MtxError&gt;&gt; (116,642,295 samples, 0.07%)</title><rect x="95.7362%" y="293" width="0.0733%" height="15" fill="rgb(205,214,31)" fg:x="152378897264" fg:w="116642295"/><text x="95.9862%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;matrix_market_rs::MtxError&gt; (16,323,813 samples, 0.01%)</title><rect x="95.7993%" y="277" width="0.0103%" height="15" fill="rgb(224,111,15)" fg:x="152479215746" fg:w="16323813"/><text x="96.0493%" y="287.50"></text></g><g><title>matrix_market_rs::parse_coords_val (1,791,551,342 samples, 1.13%)</title><rect x="94.6890%" y="325" width="1.1256%" height="15" fill="rgb(253,21,26)" fg:x="150712020899" fg:w="1791551342"/><text x="94.9390%" y="335.50"></text></g><g><title>alloc::string::String::len (15,967,207 samples, 0.01%)</title><rect x="95.8221%" y="293" width="0.0100%" height="15" fill="rgb(245,139,43)" fg:x="152515536494" fg:w="15967207"/><text x="96.0721%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (15,967,207 samples, 0.01%)</title><rect x="95.8221%" y="277" width="0.0100%" height="15" fill="rgb(252,170,7)" fg:x="152515536494" fg:w="15967207"/><text x="96.0721%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (86,772,255 samples, 0.05%)</title><rect x="95.8346%" y="293" width="0.0545%" height="15" fill="rgb(231,118,14)" fg:x="152535528296" fg:w="86772255"/><text x="96.0846%" y="303.50"></text></g><g><title>core::str::validations::run_utf8_validation (70,595,032 samples, 0.04%)</title><rect x="95.8448%" y="277" width="0.0444%" height="15" fill="rgb(238,83,0)" fg:x="152551705519" fg:w="70595032"/><text x="96.0948%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (18,687,831 samples, 0.01%)</title><rect x="95.9042%" y="261" width="0.0117%" height="15" fill="rgb(221,39,39)" fg:x="152646254933" fg:w="18687831"/><text x="96.1542%" y="271.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (18,687,831 samples, 0.01%)</title><rect x="95.9042%" y="245" width="0.0117%" height="15" fill="rgb(222,119,46)" fg:x="152646254933" fg:w="18687831"/><text x="96.1542%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (15,925,734 samples, 0.01%)</title><rect x="95.9211%" y="213" width="0.0100%" height="15" fill="rgb(222,165,49)" fg:x="152673151650" fg:w="15925734"/><text x="96.1711%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15,925,734 samples, 0.01%)</title><rect x="95.9211%" y="197" width="0.0100%" height="15" fill="rgb(219,113,52)" fg:x="152673151650" fg:w="15925734"/><text x="96.1711%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (15,925,734 samples, 0.01%)</title><rect x="95.9211%" y="181" width="0.0100%" height="15" fill="rgb(214,7,15)" fg:x="152673151650" fg:w="15925734"/><text x="96.1711%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (15,925,734 samples, 0.01%)</title><rect x="95.9211%" y="165" width="0.0100%" height="15" fill="rgb(235,32,4)" fg:x="152673151650" fg:w="15925734"/><text x="96.1711%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (36,067,829 samples, 0.02%)</title><rect x="95.9160%" y="261" width="0.0227%" height="15" fill="rgb(238,90,54)" fg:x="152664942764" fg:w="36067829"/><text x="96.1660%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (36,067,829 samples, 0.02%)</title><rect x="95.9160%" y="245" width="0.0227%" height="15" fill="rgb(213,208,19)" fg:x="152664942764" fg:w="36067829"/><text x="96.1660%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (36,067,829 samples, 0.02%)</title><rect x="95.9160%" y="229" width="0.0227%" height="15" fill="rgb(233,156,4)" fg:x="152664942764" fg:w="36067829"/><text x="96.1660%" y="239.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (27,732,720 samples, 0.02%)</title><rect x="95.9965%" y="213" width="0.0174%" height="15" fill="rgb(207,194,5)" fg:x="152793077048" fg:w="27732720"/><text x="96.2465%" y="223.50"></text></g><g><title>matrix_market_rs::MtxData&lt;T,_&gt;::from_file (2,308,871,574 samples, 1.45%)</title><rect x="94.6464%" y="357" width="1.4506%" height="15" fill="rgb(206,111,30)" fg:x="150644200108" fg:w="2308871574"/><text x="94.8964%" y="367.50"></text></g><g><title>matrix_market_rs::parse_sparse_coo (2,308,871,574 samples, 1.45%)</title><rect x="94.6464%" y="341" width="1.4506%" height="15" fill="rgb(243,70,54)" fg:x="150644200108" fg:w="2308871574"/><text x="94.8964%" y="351.50"></text></g><g><title>std::io::BufRead::read_line (449,499,441 samples, 0.28%)</title><rect x="95.8146%" y="325" width="0.2824%" height="15" fill="rgb(242,28,8)" fg:x="152503572241" fg:w="449499441"/><text x="96.0646%" y="335.50"></text></g><g><title>std::io::append_to_string (449,499,441 samples, 0.28%)</title><rect x="95.8146%" y="309" width="0.2824%" height="15" fill="rgb(219,106,18)" fg:x="152503572241" fg:w="449499441"/><text x="96.0646%" y="319.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (330,771,131 samples, 0.21%)</title><rect x="95.8892%" y="293" width="0.2078%" height="15" fill="rgb(244,222,10)" fg:x="152622300551" fg:w="330771131"/><text x="96.1392%" y="303.50"></text></g><g><title>std::io::read_until (330,771,131 samples, 0.21%)</title><rect x="95.8892%" y="277" width="0.2078%" height="15" fill="rgb(236,179,52)" fg:x="152622300551" fg:w="330771131"/><text x="96.1392%" y="287.50"></text></g><g><title>core::slice::memchr::memchr (252,061,089 samples, 0.16%)</title><rect x="95.9386%" y="261" width="0.1584%" height="15" fill="rgb(213,23,39)" fg:x="152701010593" fg:w="252061089"/><text x="96.1886%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_aligned (224,252,010 samples, 0.14%)</title><rect x="95.9561%" y="245" width="0.1409%" height="15" fill="rgb(238,48,10)" fg:x="152728819672" fg:w="224252010"/><text x="96.2061%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (216,149,856 samples, 0.14%)</title><rect x="95.9612%" y="229" width="0.1358%" height="15" fill="rgb(251,196,23)" fg:x="152736921826" fg:w="216149856"/><text x="96.2112%" y="239.50"></text></g><g><title>core::slice::memchr::memchr_naive (132,261,914 samples, 0.08%)</title><rect x="96.0139%" y="213" width="0.0831%" height="15" fill="rgb(250,152,24)" fg:x="152820809768" fg:w="132261914"/><text x="96.2639%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (80,638,319 samples, 0.05%)</title><rect x="96.1266%" y="341" width="0.0507%" height="15" fill="rgb(209,150,17)" fg:x="153000212274" fg:w="80638319"/><text x="96.3766%" y="351.50"></text></g><g><title>par_matvec::test_utils::FaerLoader::load_from_matrix_market (5,805,439,013 samples, 3.65%)</title><rect x="92.5594%" y="373" width="3.6474%" height="15" fill="rgb(234,202,34)" fg:x="147322477844" fg:w="5805439013"/><text x="92.8094%" y="383.50">par_..</text></g><g><title>par_matvec::test_utils::mtx_data_to_nalgebra_coo (174,845,175 samples, 0.11%)</title><rect x="96.0970%" y="357" width="0.1099%" height="15" fill="rgb(253,148,53)" fg:x="152953071682" fg:w="174845175"/><text x="96.3470%" y="367.50"></text></g><g><title>nalgebra_sparse::coo::CooMatrix&lt;T&gt;::try_from_triplets (47,066,264 samples, 0.03%)</title><rect x="96.1773%" y="341" width="0.0296%" height="15" fill="rgb(218,129,16)" fg:x="153080850593" fg:w="47066264"/><text x="96.4273%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (47,066,264 samples, 0.03%)</title><rect x="96.1773%" y="325" width="0.0296%" height="15" fill="rgb(216,85,19)" fg:x="153080850593" fg:w="47066264"/><text x="96.4273%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (19,596,512 samples, 0.01%)</title><rect x="96.2142%" y="133" width="0.0123%" height="15" fill="rgb(235,228,7)" fg:x="153139640514" fg:w="19596512"/><text x="96.4642%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (19,596,512 samples, 0.01%)</title><rect x="96.2142%" y="117" width="0.0123%" height="15" fill="rgb(245,175,0)" fg:x="153139640514" fg:w="19596512"/><text x="96.4642%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (19,596,512 samples, 0.01%)</title><rect x="96.2142%" y="101" width="0.0123%" height="15" fill="rgb(208,168,36)" fg:x="153139640514" fg:w="19596512"/><text x="96.4642%" y="111.50"></text></g><g><title>core::ptr::write (19,596,512 samples, 0.01%)</title><rect x="96.2142%" y="85" width="0.0123%" height="15" fill="rgb(246,171,24)" fg:x="153139640514" fg:w="19596512"/><text x="96.4642%" y="95.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::new (33,967,368 samples, 0.02%)</title><rect x="96.2142%" y="325" width="0.0213%" height="15" fill="rgb(215,142,24)" fg:x="153139640514" fg:w="33967368"/><text x="96.4642%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (33,967,368 samples, 0.02%)</title><rect x="96.2142%" y="309" width="0.0213%" height="15" fill="rgb(250,187,7)" fg:x="153139640514" fg:w="33967368"/><text x="96.4642%" y="319.50"></text></g><g><title>alloc::boxed::iter::&lt;impl core::iter::traits::collect::FromIterator&lt;I&gt; for alloc::boxed::Box&lt;[I]&gt;&gt;::from_iter (33,967,368 samples, 0.02%)</title><rect x="96.2142%" y="293" width="0.0213%" height="15" fill="rgb(228,66,33)" fg:x="153139640514" fg:w="33967368"/><text x="96.4642%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (33,967,368 samples, 0.02%)</title><rect x="96.2142%" y="277" width="0.0213%" height="15" fill="rgb(234,215,21)" fg:x="153139640514" fg:w="33967368"/><text x="96.4642%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (33,967,368 samples, 0.02%)</title><rect x="96.2142%" y="261" width="0.0213%" height="15" fill="rgb(222,191,20)" fg:x="153139640514" fg:w="33967368"/><text x="96.4642%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33,967,368 samples, 0.02%)</title><rect x="96.2142%" y="245" width="0.0213%" height="15" fill="rgb(245,79,54)" fg:x="153139640514" fg:w="33967368"/><text x="96.4642%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (33,967,368 samples, 0.02%)</title><rect x="96.2142%" y="229" width="0.0213%" height="15" fill="rgb(240,10,37)" fg:x="153139640514" fg:w="33967368"/><text x="96.4642%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (33,967,368 samples, 0.02%)</title><rect x="96.2142%" y="213" width="0.0213%" height="15" fill="rgb(214,192,32)" fg:x="153139640514" fg:w="33967368"/><text x="96.4642%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (33,967,368 samples, 0.02%)</title><rect x="96.2142%" y="197" width="0.0213%" height="15" fill="rgb(209,36,54)" fg:x="153139640514" fg:w="33967368"/><text x="96.4642%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (33,967,368 samples, 0.02%)</title><rect x="96.2142%" y="181" width="0.0213%" height="15" fill="rgb(220,10,11)" fg:x="153139640514" fg:w="33967368"/><text x="96.4642%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33,967,368 samples, 0.02%)</title><rect x="96.2142%" y="165" width="0.0213%" height="15" fill="rgb(221,106,17)" fg:x="153139640514" fg:w="33967368"/><text x="96.4642%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (33,967,368 samples, 0.02%)</title><rect x="96.2142%" y="149" width="0.0213%" height="15" fill="rgb(251,142,44)" fg:x="153139640514" fg:w="33967368"/><text x="96.4642%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (73,167,086 samples, 0.05%)</title><rect x="96.2529%" y="293" width="0.0460%" height="15" fill="rgb(238,13,15)" fg:x="153201272590" fg:w="73167086"/><text x="96.5029%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (73,167,086 samples, 0.05%)</title><rect x="96.2529%" y="277" width="0.0460%" height="15" fill="rgb(208,107,27)" fg:x="153201272590" fg:w="73167086"/><text x="96.5029%" y="287.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push (138,465,622 samples, 0.09%)</title><rect x="96.2355%" y="325" width="0.0870%" height="15" fill="rgb(205,136,37)" fg:x="153173607882" fg:w="138465622"/><text x="96.4855%" y="335.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push_or_else (130,748,353 samples, 0.08%)</title><rect x="96.2404%" y="309" width="0.0821%" height="15" fill="rgb(250,205,27)" fg:x="153181325151" fg:w="130748353"/><text x="96.4904%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (37,633,828 samples, 0.02%)</title><rect x="96.2989%" y="293" width="0.0236%" height="15" fill="rgb(210,80,43)" fg:x="153274439676" fg:w="37633828"/><text x="96.5489%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (37,633,828 samples, 0.02%)</title><rect x="96.2989%" y="277" width="0.0236%" height="15" fill="rgb(247,160,36)" fg:x="153274439676" fg:w="37633828"/><text x="96.5489%" y="287.50"></text></g><g><title>dyn_stack::MemStack::make_with (4,317,323,545 samples, 2.71%)</title><rect x="96.3225%" y="325" width="2.7125%" height="15" fill="rgb(234,13,49)" fg:x="153312073504" fg:w="4317323545"/><text x="96.5725%" y="335.50">dy..</text></g><g><title>dyn_stack::MemStack::make_aligned_with (4,317,323,545 samples, 2.71%)</title><rect x="96.3225%" y="309" width="2.7125%" height="15" fill="rgb(234,122,0)" fg:x="153312073504" fg:w="4317323545"/><text x="96.5725%" y="319.50">dy..</text></g><g><title>dyn_stack::init_array_with (4,317,323,545 samples, 2.71%)</title><rect x="96.3225%" y="293" width="2.7125%" height="15" fill="rgb(207,146,38)" fg:x="153312073504" fg:w="4317323545"/><text x="96.5725%" y="303.50">dy..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4,317,323,545 samples, 2.71%)</title><rect x="96.3225%" y="277" width="2.7125%" height="15" fill="rgb(207,177,25)" fg:x="153312073504" fg:w="4317323545"/><text x="96.5725%" y="287.50">co..</text></g><g><title>core::ptr::write (4,317,323,545 samples, 2.71%)</title><rect x="96.3225%" y="261" width="2.7125%" height="15" fill="rgb(211,178,42)" fg:x="153312073504" fg:w="4317323545"/><text x="96.5725%" y="271.50">co..</text></g><g><title>[libc.so.6] (4,317,323,545 samples, 2.71%)</title><rect x="96.3225%" y="245" width="2.7125%" height="15" fill="rgb(230,69,54)" fg:x="153312073504" fg:w="4317323545"/><text x="96.5725%" y="255.50">[l..</text></g><g><title>[libc.so.6] (37,758,273 samples, 0.02%)</title><rect x="99.0374%" y="69" width="0.0237%" height="15" fill="rgb(214,135,41)" fg:x="157633228137" fg:w="37758273"/><text x="99.2874%" y="79.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::BlockScratch&lt;T&gt;::new (45,225,437 samples, 0.03%)</title><rect x="99.0350%" y="213" width="0.0284%" height="15" fill="rgb(237,67,25)" fg:x="157629397049" fg:w="45225437"/><text x="99.2850%" y="223.50"></text></g><g><title>alloc::vec::from_elem (41,394,349 samples, 0.03%)</title><rect x="99.0374%" y="197" width="0.0260%" height="15" fill="rgb(222,189,50)" fg:x="157633228137" fg:w="41394349"/><text x="99.2874%" y="207.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (41,394,349 samples, 0.03%)</title><rect x="99.0374%" y="181" width="0.0260%" height="15" fill="rgb(245,148,34)" fg:x="157633228137" fg:w="41394349"/><text x="99.2874%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (41,394,349 samples, 0.03%)</title><rect x="99.0374%" y="165" width="0.0260%" height="15" fill="rgb(222,29,6)" fg:x="157633228137" fg:w="41394349"/><text x="99.2874%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (41,394,349 samples, 0.03%)</title><rect x="99.0374%" y="149" width="0.0260%" height="15" fill="rgb(221,189,43)" fg:x="157633228137" fg:w="41394349"/><text x="99.2874%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (41,394,349 samples, 0.03%)</title><rect x="99.0374%" y="133" width="0.0260%" height="15" fill="rgb(207,36,27)" fg:x="157633228137" fg:w="41394349"/><text x="99.2874%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (41,394,349 samples, 0.03%)</title><rect x="99.0374%" y="117" width="0.0260%" height="15" fill="rgb(217,90,24)" fg:x="157633228137" fg:w="41394349"/><text x="99.2874%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (41,394,349 samples, 0.03%)</title><rect x="99.0374%" y="101" width="0.0260%" height="15" fill="rgb(224,66,35)" fg:x="157633228137" fg:w="41394349"/><text x="99.2874%" y="111.50"></text></g><g><title>alloc::alloc::alloc_zeroed (41,394,349 samples, 0.03%)</title><rect x="99.0374%" y="85" width="0.0260%" height="15" fill="rgb(221,13,50)" fg:x="157633228137" fg:w="41394349"/><text x="99.2874%" y="95.50"></text></g><g><title>std::panic::catch_unwind (10,371,652,805 samples, 6.52%)</title><rect x="92.5594%" y="501" width="6.5163%" height="15" fill="rgb(236,68,49)" fg:x="147322477844" fg:w="10371652805"/><text x="92.8094%" y="511.50">std::pani..</text></g><g><title>std::panicking::try (10,371,652,805 samples, 6.52%)</title><rect x="92.5594%" y="485" width="6.5163%" height="15" fill="rgb(229,146,28)" fg:x="147322477844" fg:w="10371652805"/><text x="92.8094%" y="495.50">std::pani..</text></g><g><title>std::panicking::try::do_call (10,371,652,805 samples, 6.52%)</title><rect x="92.5594%" y="469" width="6.5163%" height="15" fill="rgb(225,31,38)" fg:x="147322477844" fg:w="10371652805"/><text x="92.8094%" y="479.50">std::pani..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (10,371,652,805 samples, 6.52%)</title><rect x="92.5594%" y="453" width="6.5163%" height="15" fill="rgb(250,208,3)" fg:x="147322477844" fg:w="10371652805"/><text x="92.8094%" y="463.50">core::ops..</text></g><g><title>std::rt::lang_start::_{{closure}} (10,371,652,805 samples, 6.52%)</title><rect x="92.5594%" y="437" width="6.5163%" height="15" fill="rgb(246,54,23)" fg:x="147322477844" fg:w="10371652805"/><text x="92.8094%" y="447.50">std::rt::..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (10,371,652,805 samples, 6.52%)</title><rect x="92.5594%" y="421" width="6.5163%" height="15" fill="rgb(243,76,11)" fg:x="147322477844" fg:w="10371652805"/><text x="92.8094%" y="431.50">std::sys:..</text></g><g><title>core::ops::function::FnOnce::call_once (10,371,652,805 samples, 6.52%)</title><rect x="92.5594%" y="405" width="6.5163%" height="15" fill="rgb(245,21,50)" fg:x="147322477844" fg:w="10371652805"/><text x="92.8094%" y="415.50">core::ops..</text></g><g><title>profile_spmv::main (10,371,652,805 samples, 6.52%)</title><rect x="92.5594%" y="389" width="6.5163%" height="15" fill="rgb(228,9,43)" fg:x="147322477844" fg:w="10371652805"/><text x="92.8094%" y="399.50">profile_s..</text></g><g><title>profile_spmv::profile_sparse_dense_buffer (4,566,213,792 samples, 2.87%)</title><rect x="96.2068%" y="373" width="2.8688%" height="15" fill="rgb(208,100,47)" fg:x="153127916857" fg:w="4566213792"/><text x="96.4568%" y="383.50">pr..</text></g><g><title>par_matvec::spmv_drivers::sparse_dense_matmul (4,566,213,792 samples, 2.87%)</title><rect x="96.2068%" y="357" width="2.8688%" height="15" fill="rgb(232,26,8)" fg:x="153127916857" fg:w="4566213792"/><text x="96.4568%" y="367.50">pa..</text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::par_sparse_dense (4,566,213,792 samples, 2.87%)</title><rect x="96.2068%" y="341" width="2.8688%" height="15" fill="rgb(216,166,38)" fg:x="153127916857" fg:w="4566213792"/><text x="96.4568%" y="351.50">pa..</text></g><g><title>std::thread::scoped::scope (64,733,600 samples, 0.04%)</title><rect x="99.0350%" y="325" width="0.0407%" height="15" fill="rgb(251,202,51)" fg:x="157629397049" fg:w="64733600"/><text x="99.2850%" y="335.50"></text></g><g><title>std::panic::catch_unwind (64,733,600 samples, 0.04%)</title><rect x="99.0350%" y="309" width="0.0407%" height="15" fill="rgb(254,216,34)" fg:x="157629397049" fg:w="64733600"/><text x="99.2850%" y="319.50"></text></g><g><title>std::panicking::try (64,733,600 samples, 0.04%)</title><rect x="99.0350%" y="293" width="0.0407%" height="15" fill="rgb(251,32,27)" fg:x="157629397049" fg:w="64733600"/><text x="99.2850%" y="303.50"></text></g><g><title>std::panicking::try::do_call (64,733,600 samples, 0.04%)</title><rect x="99.0350%" y="277" width="0.0407%" height="15" fill="rgb(208,127,28)" fg:x="157629397049" fg:w="64733600"/><text x="99.2850%" y="287.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (64,733,600 samples, 0.04%)</title><rect x="99.0350%" y="261" width="0.0407%" height="15" fill="rgb(224,137,22)" fg:x="157629397049" fg:w="64733600"/><text x="99.2850%" y="271.50"></text></g><g><title>std::thread::scoped::scope::_{{closure}} (64,733,600 samples, 0.04%)</title><rect x="99.0350%" y="245" width="0.0407%" height="15" fill="rgb(254,70,32)" fg:x="157629397049" fg:w="64733600"/><text x="99.2850%" y="255.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::par_sparse_dense::_{{closure}} (64,733,600 samples, 0.04%)</title><rect x="99.0350%" y="229" width="0.0407%" height="15" fill="rgb(229,75,37)" fg:x="157629397049" fg:w="64733600"/><text x="99.2850%" y="239.50"></text></g><g><title>std::thread::scoped::Scope::spawn (19,508,163 samples, 0.01%)</title><rect x="99.0634%" y="213" width="0.0123%" height="15" fill="rgb(252,64,23)" fg:x="157674622486" fg:w="19508163"/><text x="99.3134%" y="223.50"></text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (19,508,163 samples, 0.01%)</title><rect x="99.0634%" y="197" width="0.0123%" height="15" fill="rgb(232,162,48)" fg:x="157674622486" fg:w="19508163"/><text x="99.3134%" y="207.50"></text></g><g><title>_start (10,372,154,309 samples, 6.52%)</title><rect x="92.5594%" y="645" width="6.5166%" height="15" fill="rgb(246,160,12)" fg:x="147322477844" fg:w="10372154309"/><text x="92.8094%" y="655.50">_start</text></g><g><title>__libc_start_main (10,372,154,309 samples, 6.52%)</title><rect x="92.5594%" y="629" width="6.5166%" height="15" fill="rgb(247,166,0)" fg:x="147322477844" fg:w="10372154309"/><text x="92.8094%" y="639.50">__libc_st..</text></g><g><title>[libc.so.6] (10,372,154,309 samples, 6.52%)</title><rect x="92.5594%" y="613" width="6.5166%" height="15" fill="rgb(249,219,21)" fg:x="147322477844" fg:w="10372154309"/><text x="92.8094%" y="623.50">[libc.so...</text></g><g><title>main (10,372,154,309 samples, 6.52%)</title><rect x="92.5594%" y="597" width="6.5166%" height="15" fill="rgb(205,209,3)" fg:x="147322477844" fg:w="10372154309"/><text x="92.8094%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (10,372,154,309 samples, 6.52%)</title><rect x="92.5594%" y="581" width="6.5166%" height="15" fill="rgb(243,44,1)" fg:x="147322477844" fg:w="10372154309"/><text x="92.8094%" y="591.50">std::rt::..</text></g><g><title>std::panic::catch_unwind (10,372,154,309 samples, 6.52%)</title><rect x="92.5594%" y="565" width="6.5166%" height="15" fill="rgb(206,159,16)" fg:x="147322477844" fg:w="10372154309"/><text x="92.8094%" y="575.50">std::pani..</text></g><g><title>std::panicking::try (10,372,154,309 samples, 6.52%)</title><rect x="92.5594%" y="549" width="6.5166%" height="15" fill="rgb(244,77,30)" fg:x="147322477844" fg:w="10372154309"/><text x="92.8094%" y="559.50">std::pani..</text></g><g><title>std::panicking::try::do_call (10,372,154,309 samples, 6.52%)</title><rect x="92.5594%" y="533" width="6.5166%" height="15" fill="rgb(218,69,12)" fg:x="147322477844" fg:w="10372154309"/><text x="92.8094%" y="543.50">std::pani..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (10,372,154,309 samples, 6.52%)</title><rect x="92.5594%" y="517" width="6.5166%" height="15" fill="rgb(212,87,7)" fg:x="147322477844" fg:w="10372154309"/><text x="92.8094%" y="527.50">std::rt::..</text></g><g><title>cfree (27,963,304 samples, 0.02%)</title><rect x="99.0766%" y="645" width="0.0176%" height="15" fill="rgb(245,114,25)" fg:x="157695635161" fg:w="27963304"/><text x="99.3266%" y="655.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::pop (22,858,831 samples, 0.01%)</title><rect x="99.1406%" y="645" width="0.0144%" height="15" fill="rgb(210,61,42)" fg:x="157797477323" fg:w="22858831"/><text x="99.3906%" y="655.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push_or_else (36,850,702 samples, 0.02%)</title><rect x="99.1550%" y="645" width="0.0232%" height="15" fill="rgb(211,52,33)" fg:x="157820336154" fg:w="36850702"/><text x="99.4050%" y="655.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::hot_loop (468,160,798 samples, 0.29%)</title><rect x="99.1840%" y="645" width="0.2941%" height="15" fill="rgb(234,58,33)" fg:x="157866502072" fg:w="468160798"/><text x="99.4340%" y="655.50"></text></g><g><title>std::io::append_to_string (19,974,716 samples, 0.01%)</title><rect x="99.4781%" y="645" width="0.0125%" height="15" fill="rgb(220,115,36)" fg:x="158334662870" fg:w="19974716"/><text x="99.7281%" y="655.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (15,953,371 samples, 0.01%)</title><rect x="99.4806%" y="629" width="0.0100%" height="15" fill="rgb(243,153,54)" fg:x="158338684215" fg:w="15953371"/><text x="99.7306%" y="639.50"></text></g><g><title>std::io::read_until (15,953,371 samples, 0.01%)</title><rect x="99.4806%" y="613" width="0.0100%" height="15" fill="rgb(251,47,18)" fg:x="158338684215" fg:w="15953371"/><text x="99.7306%" y="623.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (799,020,907 samples, 0.50%)</title><rect x="99.4907%" y="645" width="0.5020%" height="15" fill="rgb(242,102,42)" fg:x="158354637586" fg:w="799020907"/><text x="99.7407%" y="655.50"></text></g><g><title>par_matvec::sparse_dense_impl::buffer_foreign::par_sparse_dense::_{{closure}}::_{{closure}} (799,020,907 samples, 0.50%)</title><rect x="99.4907%" y="629" width="0.5020%" height="15" fill="rgb(234,31,38)" fg:x="158354637586" fg:w="799020907"/><text x="99.7407%" y="639.50"></text></g><g><title>all (159,165,324,396 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(221,117,51)" fg:x="0" fg:w="159165324396"/><text x="0.2500%" y="687.50"></text></g><g><title>profile_spmv (159,165,324,396 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(212,20,18)" fg:x="0" fg:w="159165324396"/><text x="0.2500%" y="671.50">profile_spmv</text></g></svg></svg>